/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
)

// SObjectDescribe struct for SObjectDescribe
type SObjectDescribe struct {
	Activateable          *bool                  `json:"activateable,omitempty"`
	AssociateEntityType   NullableString         `json:"associateEntityType,omitempty"`
	AssociateParentEntity NullableString         `json:"associateParentEntity,omitempty"`
	CompactLayoutable     *bool                  `json:"compactLayoutable,omitempty"`
	Createable            *bool                  `json:"createable,omitempty"`
	Custom                *bool                  `json:"custom,omitempty"`
	CustomSetting         *bool                  `json:"customSetting,omitempty"`
	DeepCloneable         *bool                  `json:"deepCloneable,omitempty"`
	DefaultImplementation NullableString         `json:"defaultImplementation,omitempty"`
	Deletable             *bool                  `json:"deletable,omitempty"`
	DeprecatedAndHidden   *bool                  `json:"deprecatedAndHidden,omitempty"`
	ExtendedBy            NullableString         `json:"extendedBy,omitempty"`
	ExtendsInterfaces     NullableString         `json:"extendsInterfaces,omitempty"`
	FeedEnabled           *bool                  `json:"feedEnabled,omitempty"`
	HasSubtypes           *bool                  `json:"hasSubtypes,omitempty"`
	ImplementedBy         NullableString         `json:"implementedBy,omitempty"`
	ImplementsInterfaces  NullableString         `json:"implementsInterfaces,omitempty"`
	IsInterface           *bool                  `json:"isInterface,omitempty"`
	IsSubtype             *bool                  `json:"isSubtype,omitempty"`
	KeyPrefix             string                 `json:"keyPrefix"`
	Label                 string                 `json:"label"`
	LabelPlural           string                 `json:"labelPlural"`
	Layoutable            *bool                  `json:"layoutable,omitempty"`
	Listviewable          NullableString         `json:"listviewable,omitempty"`
	LookupLayoutable      NullableString         `json:"lookupLayoutable,omitempty"`
	Mergeable             *bool                  `json:"mergeable,omitempty"`
	MruEnabled            *bool                  `json:"mruEnabled,omitempty"`
	Name                  string                 `json:"name"`
	NetworkScopeFieldName NullableString         `json:"networkScopeFieldName,omitempty"`
	Queryable             *bool                  `json:"queryable,omitempty"`
	Replicateable         *bool                  `json:"replicateable,omitempty"`
	Retrieveable          *bool                  `json:"retrieveable,omitempty"`
	SearchLayoutable      *bool                  `json:"searchLayoutable,omitempty"`
	Searchable            *bool                  `json:"searchable,omitempty"`
	SobjectDescribeOption *string                `json:"sobjectDescribeOption,omitempty"`
	Triggerable           *bool                  `json:"triggerable,omitempty"`
	Undeletable           *bool                  `json:"undeletable,omitempty"`
	Updateable            *bool                  `json:"updateable,omitempty"`
	NamedLayoutInfos      []interface{}          `json:"namedLayoutInfos,omitempty"`
	ActionOverrides       []ActionOverrides      `json:"actionOverrides,omitempty"`
	ChildRelationships    []ChildRelationships   `json:"childRelationships,omitempty"`
	RecordTypeInfos       []RecordTypeInfo       `json:"recordTypeInfos,omitempty"`
	SupportedScopes       []SupportedScopes      `json:"supportedScopes,omitempty"`
	Urls                  map[string]interface{} `json:"urls,omitempty"`
	Fields                []FieldDescribe        `json:"fields,omitempty"`
}

// NewSObjectDescribe instantiates a new SObjectDescribe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSObjectDescribe(keyPrefix string, label string, labelPlural string, name string) *SObjectDescribe {
	this := SObjectDescribe{}
	this.KeyPrefix = keyPrefix
	this.Label = label
	this.LabelPlural = labelPlural
	this.Name = name
	return &this
}

// NewSObjectDescribeWithDefaults instantiates a new SObjectDescribe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSObjectDescribeWithDefaults() *SObjectDescribe {
	this := SObjectDescribe{}
	return &this
}

// GetActivateable returns the Activateable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetActivateable() bool {
	if o == nil || isNil(o.Activateable) {
		var ret bool
		return ret
	}
	return *o.Activateable
}

// GetActivateableOk returns a tuple with the Activateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetActivateableOk() (*bool, bool) {
	if o == nil || isNil(o.Activateable) {
		return nil, false
	}
	return o.Activateable, true
}

// HasActivateable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasActivateable() bool {
	if o != nil && !isNil(o.Activateable) {
		return true
	}

	return false
}

// SetActivateable gets a reference to the given bool and assigns it to the Activateable field.
func (o *SObjectDescribe) SetActivateable(v bool) {
	o.Activateable = &v
}

// GetAssociateEntityType returns the AssociateEntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetAssociateEntityType() string {
	if o == nil || isNil(o.AssociateEntityType.Get()) {
		var ret string
		return ret
	}
	return *o.AssociateEntityType.Get()
}

// GetAssociateEntityTypeOk returns a tuple with the AssociateEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetAssociateEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociateEntityType.Get(), o.AssociateEntityType.IsSet()
}

// HasAssociateEntityType returns a boolean if a field has been set.
func (o *SObjectDescribe) HasAssociateEntityType() bool {
	if o != nil && o.AssociateEntityType.IsSet() {
		return true
	}

	return false
}

// SetAssociateEntityType gets a reference to the given NullableString and assigns it to the AssociateEntityType field.
func (o *SObjectDescribe) SetAssociateEntityType(v string) {
	o.AssociateEntityType.Set(&v)
}

// SetAssociateEntityTypeNil sets the value for AssociateEntityType to be an explicit nil
func (o *SObjectDescribe) SetAssociateEntityTypeNil() {
	o.AssociateEntityType.Set(nil)
}

// UnsetAssociateEntityType ensures that no value is present for AssociateEntityType, not even an explicit nil
func (o *SObjectDescribe) UnsetAssociateEntityType() {
	o.AssociateEntityType.Unset()
}

// GetAssociateParentEntity returns the AssociateParentEntity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetAssociateParentEntity() string {
	if o == nil || isNil(o.AssociateParentEntity.Get()) {
		var ret string
		return ret
	}
	return *o.AssociateParentEntity.Get()
}

// GetAssociateParentEntityOk returns a tuple with the AssociateParentEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetAssociateParentEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociateParentEntity.Get(), o.AssociateParentEntity.IsSet()
}

// HasAssociateParentEntity returns a boolean if a field has been set.
func (o *SObjectDescribe) HasAssociateParentEntity() bool {
	if o != nil && o.AssociateParentEntity.IsSet() {
		return true
	}

	return false
}

// SetAssociateParentEntity gets a reference to the given NullableString and assigns it to the AssociateParentEntity field.
func (o *SObjectDescribe) SetAssociateParentEntity(v string) {
	o.AssociateParentEntity.Set(&v)
}

// SetAssociateParentEntityNil sets the value for AssociateParentEntity to be an explicit nil
func (o *SObjectDescribe) SetAssociateParentEntityNil() {
	o.AssociateParentEntity.Set(nil)
}

// UnsetAssociateParentEntity ensures that no value is present for AssociateParentEntity, not even an explicit nil
func (o *SObjectDescribe) UnsetAssociateParentEntity() {
	o.AssociateParentEntity.Unset()
}

// GetCompactLayoutable returns the CompactLayoutable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetCompactLayoutable() bool {
	if o == nil || isNil(o.CompactLayoutable) {
		var ret bool
		return ret
	}
	return *o.CompactLayoutable
}

// GetCompactLayoutableOk returns a tuple with the CompactLayoutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetCompactLayoutableOk() (*bool, bool) {
	if o == nil || isNil(o.CompactLayoutable) {
		return nil, false
	}
	return o.CompactLayoutable, true
}

// HasCompactLayoutable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasCompactLayoutable() bool {
	if o != nil && !isNil(o.CompactLayoutable) {
		return true
	}

	return false
}

// SetCompactLayoutable gets a reference to the given bool and assigns it to the CompactLayoutable field.
func (o *SObjectDescribe) SetCompactLayoutable(v bool) {
	o.CompactLayoutable = &v
}

// GetCreateable returns the Createable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetCreateable() bool {
	if o == nil || isNil(o.Createable) {
		var ret bool
		return ret
	}
	return *o.Createable
}

// GetCreateableOk returns a tuple with the Createable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetCreateableOk() (*bool, bool) {
	if o == nil || isNil(o.Createable) {
		return nil, false
	}
	return o.Createable, true
}

// HasCreateable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasCreateable() bool {
	if o != nil && !isNil(o.Createable) {
		return true
	}

	return false
}

// SetCreateable gets a reference to the given bool and assigns it to the Createable field.
func (o *SObjectDescribe) SetCreateable(v bool) {
	o.Createable = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *SObjectDescribe) GetCustom() bool {
	if o == nil || isNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetCustomOk() (*bool, bool) {
	if o == nil || isNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *SObjectDescribe) HasCustom() bool {
	if o != nil && !isNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *SObjectDescribe) SetCustom(v bool) {
	o.Custom = &v
}

// GetCustomSetting returns the CustomSetting field value if set, zero value otherwise.
func (o *SObjectDescribe) GetCustomSetting() bool {
	if o == nil || isNil(o.CustomSetting) {
		var ret bool
		return ret
	}
	return *o.CustomSetting
}

// GetCustomSettingOk returns a tuple with the CustomSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetCustomSettingOk() (*bool, bool) {
	if o == nil || isNil(o.CustomSetting) {
		return nil, false
	}
	return o.CustomSetting, true
}

// HasCustomSetting returns a boolean if a field has been set.
func (o *SObjectDescribe) HasCustomSetting() bool {
	if o != nil && !isNil(o.CustomSetting) {
		return true
	}

	return false
}

// SetCustomSetting gets a reference to the given bool and assigns it to the CustomSetting field.
func (o *SObjectDescribe) SetCustomSetting(v bool) {
	o.CustomSetting = &v
}

// GetDeepCloneable returns the DeepCloneable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetDeepCloneable() bool {
	if o == nil || isNil(o.DeepCloneable) {
		var ret bool
		return ret
	}
	return *o.DeepCloneable
}

// GetDeepCloneableOk returns a tuple with the DeepCloneable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetDeepCloneableOk() (*bool, bool) {
	if o == nil || isNil(o.DeepCloneable) {
		return nil, false
	}
	return o.DeepCloneable, true
}

// HasDeepCloneable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasDeepCloneable() bool {
	if o != nil && !isNil(o.DeepCloneable) {
		return true
	}

	return false
}

// SetDeepCloneable gets a reference to the given bool and assigns it to the DeepCloneable field.
func (o *SObjectDescribe) SetDeepCloneable(v bool) {
	o.DeepCloneable = &v
}

// GetDefaultImplementation returns the DefaultImplementation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetDefaultImplementation() string {
	if o == nil || isNil(o.DefaultImplementation.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultImplementation.Get()
}

// GetDefaultImplementationOk returns a tuple with the DefaultImplementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetDefaultImplementationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultImplementation.Get(), o.DefaultImplementation.IsSet()
}

// HasDefaultImplementation returns a boolean if a field has been set.
func (o *SObjectDescribe) HasDefaultImplementation() bool {
	if o != nil && o.DefaultImplementation.IsSet() {
		return true
	}

	return false
}

// SetDefaultImplementation gets a reference to the given NullableString and assigns it to the DefaultImplementation field.
func (o *SObjectDescribe) SetDefaultImplementation(v string) {
	o.DefaultImplementation.Set(&v)
}

// SetDefaultImplementationNil sets the value for DefaultImplementation to be an explicit nil
func (o *SObjectDescribe) SetDefaultImplementationNil() {
	o.DefaultImplementation.Set(nil)
}

// UnsetDefaultImplementation ensures that no value is present for DefaultImplementation, not even an explicit nil
func (o *SObjectDescribe) UnsetDefaultImplementation() {
	o.DefaultImplementation.Unset()
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetDeletable() bool {
	if o == nil || isNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetDeletableOk() (*bool, bool) {
	if o == nil || isNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasDeletable() bool {
	if o != nil && !isNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *SObjectDescribe) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetDeprecatedAndHidden returns the DeprecatedAndHidden field value if set, zero value otherwise.
func (o *SObjectDescribe) GetDeprecatedAndHidden() bool {
	if o == nil || isNil(o.DeprecatedAndHidden) {
		var ret bool
		return ret
	}
	return *o.DeprecatedAndHidden
}

// GetDeprecatedAndHiddenOk returns a tuple with the DeprecatedAndHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetDeprecatedAndHiddenOk() (*bool, bool) {
	if o == nil || isNil(o.DeprecatedAndHidden) {
		return nil, false
	}
	return o.DeprecatedAndHidden, true
}

// HasDeprecatedAndHidden returns a boolean if a field has been set.
func (o *SObjectDescribe) HasDeprecatedAndHidden() bool {
	if o != nil && !isNil(o.DeprecatedAndHidden) {
		return true
	}

	return false
}

// SetDeprecatedAndHidden gets a reference to the given bool and assigns it to the DeprecatedAndHidden field.
func (o *SObjectDescribe) SetDeprecatedAndHidden(v bool) {
	o.DeprecatedAndHidden = &v
}

// GetExtendedBy returns the ExtendedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetExtendedBy() string {
	if o == nil || isNil(o.ExtendedBy.Get()) {
		var ret string
		return ret
	}
	return *o.ExtendedBy.Get()
}

// GetExtendedByOk returns a tuple with the ExtendedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetExtendedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtendedBy.Get(), o.ExtendedBy.IsSet()
}

// HasExtendedBy returns a boolean if a field has been set.
func (o *SObjectDescribe) HasExtendedBy() bool {
	if o != nil && o.ExtendedBy.IsSet() {
		return true
	}

	return false
}

// SetExtendedBy gets a reference to the given NullableString and assigns it to the ExtendedBy field.
func (o *SObjectDescribe) SetExtendedBy(v string) {
	o.ExtendedBy.Set(&v)
}

// SetExtendedByNil sets the value for ExtendedBy to be an explicit nil
func (o *SObjectDescribe) SetExtendedByNil() {
	o.ExtendedBy.Set(nil)
}

// UnsetExtendedBy ensures that no value is present for ExtendedBy, not even an explicit nil
func (o *SObjectDescribe) UnsetExtendedBy() {
	o.ExtendedBy.Unset()
}

// GetExtendsInterfaces returns the ExtendsInterfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetExtendsInterfaces() string {
	if o == nil || isNil(o.ExtendsInterfaces.Get()) {
		var ret string
		return ret
	}
	return *o.ExtendsInterfaces.Get()
}

// GetExtendsInterfacesOk returns a tuple with the ExtendsInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetExtendsInterfacesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtendsInterfaces.Get(), o.ExtendsInterfaces.IsSet()
}

// HasExtendsInterfaces returns a boolean if a field has been set.
func (o *SObjectDescribe) HasExtendsInterfaces() bool {
	if o != nil && o.ExtendsInterfaces.IsSet() {
		return true
	}

	return false
}

// SetExtendsInterfaces gets a reference to the given NullableString and assigns it to the ExtendsInterfaces field.
func (o *SObjectDescribe) SetExtendsInterfaces(v string) {
	o.ExtendsInterfaces.Set(&v)
}

// SetExtendsInterfacesNil sets the value for ExtendsInterfaces to be an explicit nil
func (o *SObjectDescribe) SetExtendsInterfacesNil() {
	o.ExtendsInterfaces.Set(nil)
}

// UnsetExtendsInterfaces ensures that no value is present for ExtendsInterfaces, not even an explicit nil
func (o *SObjectDescribe) UnsetExtendsInterfaces() {
	o.ExtendsInterfaces.Unset()
}

// GetFeedEnabled returns the FeedEnabled field value if set, zero value otherwise.
func (o *SObjectDescribe) GetFeedEnabled() bool {
	if o == nil || isNil(o.FeedEnabled) {
		var ret bool
		return ret
	}
	return *o.FeedEnabled
}

// GetFeedEnabledOk returns a tuple with the FeedEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetFeedEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.FeedEnabled) {
		return nil, false
	}
	return o.FeedEnabled, true
}

// HasFeedEnabled returns a boolean if a field has been set.
func (o *SObjectDescribe) HasFeedEnabled() bool {
	if o != nil && !isNil(o.FeedEnabled) {
		return true
	}

	return false
}

// SetFeedEnabled gets a reference to the given bool and assigns it to the FeedEnabled field.
func (o *SObjectDescribe) SetFeedEnabled(v bool) {
	o.FeedEnabled = &v
}

// GetHasSubtypes returns the HasSubtypes field value if set, zero value otherwise.
func (o *SObjectDescribe) GetHasSubtypes() bool {
	if o == nil || isNil(o.HasSubtypes) {
		var ret bool
		return ret
	}
	return *o.HasSubtypes
}

// GetHasSubtypesOk returns a tuple with the HasSubtypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetHasSubtypesOk() (*bool, bool) {
	if o == nil || isNil(o.HasSubtypes) {
		return nil, false
	}
	return o.HasSubtypes, true
}

// HasHasSubtypes returns a boolean if a field has been set.
func (o *SObjectDescribe) HasHasSubtypes() bool {
	if o != nil && !isNil(o.HasSubtypes) {
		return true
	}

	return false
}

// SetHasSubtypes gets a reference to the given bool and assigns it to the HasSubtypes field.
func (o *SObjectDescribe) SetHasSubtypes(v bool) {
	o.HasSubtypes = &v
}

// GetImplementedBy returns the ImplementedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetImplementedBy() string {
	if o == nil || isNil(o.ImplementedBy.Get()) {
		var ret string
		return ret
	}
	return *o.ImplementedBy.Get()
}

// GetImplementedByOk returns a tuple with the ImplementedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetImplementedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImplementedBy.Get(), o.ImplementedBy.IsSet()
}

// HasImplementedBy returns a boolean if a field has been set.
func (o *SObjectDescribe) HasImplementedBy() bool {
	if o != nil && o.ImplementedBy.IsSet() {
		return true
	}

	return false
}

// SetImplementedBy gets a reference to the given NullableString and assigns it to the ImplementedBy field.
func (o *SObjectDescribe) SetImplementedBy(v string) {
	o.ImplementedBy.Set(&v)
}

// SetImplementedByNil sets the value for ImplementedBy to be an explicit nil
func (o *SObjectDescribe) SetImplementedByNil() {
	o.ImplementedBy.Set(nil)
}

// UnsetImplementedBy ensures that no value is present for ImplementedBy, not even an explicit nil
func (o *SObjectDescribe) UnsetImplementedBy() {
	o.ImplementedBy.Unset()
}

// GetImplementsInterfaces returns the ImplementsInterfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetImplementsInterfaces() string {
	if o == nil || isNil(o.ImplementsInterfaces.Get()) {
		var ret string
		return ret
	}
	return *o.ImplementsInterfaces.Get()
}

// GetImplementsInterfacesOk returns a tuple with the ImplementsInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetImplementsInterfacesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImplementsInterfaces.Get(), o.ImplementsInterfaces.IsSet()
}

// HasImplementsInterfaces returns a boolean if a field has been set.
func (o *SObjectDescribe) HasImplementsInterfaces() bool {
	if o != nil && o.ImplementsInterfaces.IsSet() {
		return true
	}

	return false
}

// SetImplementsInterfaces gets a reference to the given NullableString and assigns it to the ImplementsInterfaces field.
func (o *SObjectDescribe) SetImplementsInterfaces(v string) {
	o.ImplementsInterfaces.Set(&v)
}

// SetImplementsInterfacesNil sets the value for ImplementsInterfaces to be an explicit nil
func (o *SObjectDescribe) SetImplementsInterfacesNil() {
	o.ImplementsInterfaces.Set(nil)
}

// UnsetImplementsInterfaces ensures that no value is present for ImplementsInterfaces, not even an explicit nil
func (o *SObjectDescribe) UnsetImplementsInterfaces() {
	o.ImplementsInterfaces.Unset()
}

// GetIsInterface returns the IsInterface field value if set, zero value otherwise.
func (o *SObjectDescribe) GetIsInterface() bool {
	if o == nil || isNil(o.IsInterface) {
		var ret bool
		return ret
	}
	return *o.IsInterface
}

// GetIsInterfaceOk returns a tuple with the IsInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetIsInterfaceOk() (*bool, bool) {
	if o == nil || isNil(o.IsInterface) {
		return nil, false
	}
	return o.IsInterface, true
}

// HasIsInterface returns a boolean if a field has been set.
func (o *SObjectDescribe) HasIsInterface() bool {
	if o != nil && !isNil(o.IsInterface) {
		return true
	}

	return false
}

// SetIsInterface gets a reference to the given bool and assigns it to the IsInterface field.
func (o *SObjectDescribe) SetIsInterface(v bool) {
	o.IsInterface = &v
}

// GetIsSubtype returns the IsSubtype field value if set, zero value otherwise.
func (o *SObjectDescribe) GetIsSubtype() bool {
	if o == nil || isNil(o.IsSubtype) {
		var ret bool
		return ret
	}
	return *o.IsSubtype
}

// GetIsSubtypeOk returns a tuple with the IsSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetIsSubtypeOk() (*bool, bool) {
	if o == nil || isNil(o.IsSubtype) {
		return nil, false
	}
	return o.IsSubtype, true
}

// HasIsSubtype returns a boolean if a field has been set.
func (o *SObjectDescribe) HasIsSubtype() bool {
	if o != nil && !isNil(o.IsSubtype) {
		return true
	}

	return false
}

// SetIsSubtype gets a reference to the given bool and assigns it to the IsSubtype field.
func (o *SObjectDescribe) SetIsSubtype(v bool) {
	o.IsSubtype = &v
}

// GetKeyPrefix returns the KeyPrefix field value
func (o *SObjectDescribe) GetKeyPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyPrefix
}

// GetKeyPrefixOk returns a tuple with the KeyPrefix field value
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetKeyPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyPrefix, true
}

// SetKeyPrefix sets field value
func (o *SObjectDescribe) SetKeyPrefix(v string) {
	o.KeyPrefix = v
}

// GetLabel returns the Label field value
func (o *SObjectDescribe) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SObjectDescribe) SetLabel(v string) {
	o.Label = v
}

// GetLabelPlural returns the LabelPlural field value
func (o *SObjectDescribe) GetLabelPlural() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelPlural
}

// GetLabelPluralOk returns a tuple with the LabelPlural field value
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetLabelPluralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelPlural, true
}

// SetLabelPlural sets field value
func (o *SObjectDescribe) SetLabelPlural(v string) {
	o.LabelPlural = v
}

// GetLayoutable returns the Layoutable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetLayoutable() bool {
	if o == nil || isNil(o.Layoutable) {
		var ret bool
		return ret
	}
	return *o.Layoutable
}

// GetLayoutableOk returns a tuple with the Layoutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetLayoutableOk() (*bool, bool) {
	if o == nil || isNil(o.Layoutable) {
		return nil, false
	}
	return o.Layoutable, true
}

// HasLayoutable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasLayoutable() bool {
	if o != nil && !isNil(o.Layoutable) {
		return true
	}

	return false
}

// SetLayoutable gets a reference to the given bool and assigns it to the Layoutable field.
func (o *SObjectDescribe) SetLayoutable(v bool) {
	o.Layoutable = &v
}

// GetListviewable returns the Listviewable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetListviewable() string {
	if o == nil || isNil(o.Listviewable.Get()) {
		var ret string
		return ret
	}
	return *o.Listviewable.Get()
}

// GetListviewableOk returns a tuple with the Listviewable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetListviewableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Listviewable.Get(), o.Listviewable.IsSet()
}

// HasListviewable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasListviewable() bool {
	if o != nil && o.Listviewable.IsSet() {
		return true
	}

	return false
}

// SetListviewable gets a reference to the given NullableString and assigns it to the Listviewable field.
func (o *SObjectDescribe) SetListviewable(v string) {
	o.Listviewable.Set(&v)
}

// SetListviewableNil sets the value for Listviewable to be an explicit nil
func (o *SObjectDescribe) SetListviewableNil() {
	o.Listviewable.Set(nil)
}

// UnsetListviewable ensures that no value is present for Listviewable, not even an explicit nil
func (o *SObjectDescribe) UnsetListviewable() {
	o.Listviewable.Unset()
}

// GetLookupLayoutable returns the LookupLayoutable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetLookupLayoutable() string {
	if o == nil || isNil(o.LookupLayoutable.Get()) {
		var ret string
		return ret
	}
	return *o.LookupLayoutable.Get()
}

// GetLookupLayoutableOk returns a tuple with the LookupLayoutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetLookupLayoutableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LookupLayoutable.Get(), o.LookupLayoutable.IsSet()
}

// HasLookupLayoutable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasLookupLayoutable() bool {
	if o != nil && o.LookupLayoutable.IsSet() {
		return true
	}

	return false
}

// SetLookupLayoutable gets a reference to the given NullableString and assigns it to the LookupLayoutable field.
func (o *SObjectDescribe) SetLookupLayoutable(v string) {
	o.LookupLayoutable.Set(&v)
}

// SetLookupLayoutableNil sets the value for LookupLayoutable to be an explicit nil
func (o *SObjectDescribe) SetLookupLayoutableNil() {
	o.LookupLayoutable.Set(nil)
}

// UnsetLookupLayoutable ensures that no value is present for LookupLayoutable, not even an explicit nil
func (o *SObjectDescribe) UnsetLookupLayoutable() {
	o.LookupLayoutable.Unset()
}

// GetMergeable returns the Mergeable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetMergeable() bool {
	if o == nil || isNil(o.Mergeable) {
		var ret bool
		return ret
	}
	return *o.Mergeable
}

// GetMergeableOk returns a tuple with the Mergeable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetMergeableOk() (*bool, bool) {
	if o == nil || isNil(o.Mergeable) {
		return nil, false
	}
	return o.Mergeable, true
}

// HasMergeable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasMergeable() bool {
	if o != nil && !isNil(o.Mergeable) {
		return true
	}

	return false
}

// SetMergeable gets a reference to the given bool and assigns it to the Mergeable field.
func (o *SObjectDescribe) SetMergeable(v bool) {
	o.Mergeable = &v
}

// GetMruEnabled returns the MruEnabled field value if set, zero value otherwise.
func (o *SObjectDescribe) GetMruEnabled() bool {
	if o == nil || isNil(o.MruEnabled) {
		var ret bool
		return ret
	}
	return *o.MruEnabled
}

// GetMruEnabledOk returns a tuple with the MruEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetMruEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.MruEnabled) {
		return nil, false
	}
	return o.MruEnabled, true
}

// HasMruEnabled returns a boolean if a field has been set.
func (o *SObjectDescribe) HasMruEnabled() bool {
	if o != nil && !isNil(o.MruEnabled) {
		return true
	}

	return false
}

// SetMruEnabled gets a reference to the given bool and assigns it to the MruEnabled field.
func (o *SObjectDescribe) SetMruEnabled(v bool) {
	o.MruEnabled = &v
}

// GetName returns the Name field value
func (o *SObjectDescribe) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SObjectDescribe) SetName(v string) {
	o.Name = v
}

// GetNetworkScopeFieldName returns the NetworkScopeFieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectDescribe) GetNetworkScopeFieldName() string {
	if o == nil || isNil(o.NetworkScopeFieldName.Get()) {
		var ret string
		return ret
	}
	return *o.NetworkScopeFieldName.Get()
}

// GetNetworkScopeFieldNameOk returns a tuple with the NetworkScopeFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectDescribe) GetNetworkScopeFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkScopeFieldName.Get(), o.NetworkScopeFieldName.IsSet()
}

// HasNetworkScopeFieldName returns a boolean if a field has been set.
func (o *SObjectDescribe) HasNetworkScopeFieldName() bool {
	if o != nil && o.NetworkScopeFieldName.IsSet() {
		return true
	}

	return false
}

// SetNetworkScopeFieldName gets a reference to the given NullableString and assigns it to the NetworkScopeFieldName field.
func (o *SObjectDescribe) SetNetworkScopeFieldName(v string) {
	o.NetworkScopeFieldName.Set(&v)
}

// SetNetworkScopeFieldNameNil sets the value for NetworkScopeFieldName to be an explicit nil
func (o *SObjectDescribe) SetNetworkScopeFieldNameNil() {
	o.NetworkScopeFieldName.Set(nil)
}

// UnsetNetworkScopeFieldName ensures that no value is present for NetworkScopeFieldName, not even an explicit nil
func (o *SObjectDescribe) UnsetNetworkScopeFieldName() {
	o.NetworkScopeFieldName.Unset()
}

// GetQueryable returns the Queryable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetQueryable() bool {
	if o == nil || isNil(o.Queryable) {
		var ret bool
		return ret
	}
	return *o.Queryable
}

// GetQueryableOk returns a tuple with the Queryable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetQueryableOk() (*bool, bool) {
	if o == nil || isNil(o.Queryable) {
		return nil, false
	}
	return o.Queryable, true
}

// HasQueryable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasQueryable() bool {
	if o != nil && !isNil(o.Queryable) {
		return true
	}

	return false
}

// SetQueryable gets a reference to the given bool and assigns it to the Queryable field.
func (o *SObjectDescribe) SetQueryable(v bool) {
	o.Queryable = &v
}

// GetReplicateable returns the Replicateable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetReplicateable() bool {
	if o == nil || isNil(o.Replicateable) {
		var ret bool
		return ret
	}
	return *o.Replicateable
}

// GetReplicateableOk returns a tuple with the Replicateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetReplicateableOk() (*bool, bool) {
	if o == nil || isNil(o.Replicateable) {
		return nil, false
	}
	return o.Replicateable, true
}

// HasReplicateable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasReplicateable() bool {
	if o != nil && !isNil(o.Replicateable) {
		return true
	}

	return false
}

// SetReplicateable gets a reference to the given bool and assigns it to the Replicateable field.
func (o *SObjectDescribe) SetReplicateable(v bool) {
	o.Replicateable = &v
}

// GetRetrieveable returns the Retrieveable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetRetrieveable() bool {
	if o == nil || isNil(o.Retrieveable) {
		var ret bool
		return ret
	}
	return *o.Retrieveable
}

// GetRetrieveableOk returns a tuple with the Retrieveable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetRetrieveableOk() (*bool, bool) {
	if o == nil || isNil(o.Retrieveable) {
		return nil, false
	}
	return o.Retrieveable, true
}

// HasRetrieveable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasRetrieveable() bool {
	if o != nil && !isNil(o.Retrieveable) {
		return true
	}

	return false
}

// SetRetrieveable gets a reference to the given bool and assigns it to the Retrieveable field.
func (o *SObjectDescribe) SetRetrieveable(v bool) {
	o.Retrieveable = &v
}

// GetSearchLayoutable returns the SearchLayoutable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetSearchLayoutable() bool {
	if o == nil || isNil(o.SearchLayoutable) {
		var ret bool
		return ret
	}
	return *o.SearchLayoutable
}

// GetSearchLayoutableOk returns a tuple with the SearchLayoutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetSearchLayoutableOk() (*bool, bool) {
	if o == nil || isNil(o.SearchLayoutable) {
		return nil, false
	}
	return o.SearchLayoutable, true
}

// HasSearchLayoutable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasSearchLayoutable() bool {
	if o != nil && !isNil(o.SearchLayoutable) {
		return true
	}

	return false
}

// SetSearchLayoutable gets a reference to the given bool and assigns it to the SearchLayoutable field.
func (o *SObjectDescribe) SetSearchLayoutable(v bool) {
	o.SearchLayoutable = &v
}

// GetSearchable returns the Searchable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetSearchable() bool {
	if o == nil || isNil(o.Searchable) {
		var ret bool
		return ret
	}
	return *o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetSearchableOk() (*bool, bool) {
	if o == nil || isNil(o.Searchable) {
		return nil, false
	}
	return o.Searchable, true
}

// HasSearchable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasSearchable() bool {
	if o != nil && !isNil(o.Searchable) {
		return true
	}

	return false
}

// SetSearchable gets a reference to the given bool and assigns it to the Searchable field.
func (o *SObjectDescribe) SetSearchable(v bool) {
	o.Searchable = &v
}

// GetSobjectDescribeOption returns the SobjectDescribeOption field value if set, zero value otherwise.
func (o *SObjectDescribe) GetSobjectDescribeOption() string {
	if o == nil || isNil(o.SobjectDescribeOption) {
		var ret string
		return ret
	}
	return *o.SobjectDescribeOption
}

// GetSobjectDescribeOptionOk returns a tuple with the SobjectDescribeOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetSobjectDescribeOptionOk() (*string, bool) {
	if o == nil || isNil(o.SobjectDescribeOption) {
		return nil, false
	}
	return o.SobjectDescribeOption, true
}

// HasSobjectDescribeOption returns a boolean if a field has been set.
func (o *SObjectDescribe) HasSobjectDescribeOption() bool {
	if o != nil && !isNil(o.SobjectDescribeOption) {
		return true
	}

	return false
}

// SetSobjectDescribeOption gets a reference to the given string and assigns it to the SobjectDescribeOption field.
func (o *SObjectDescribe) SetSobjectDescribeOption(v string) {
	o.SobjectDescribeOption = &v
}

// GetTriggerable returns the Triggerable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetTriggerable() bool {
	if o == nil || isNil(o.Triggerable) {
		var ret bool
		return ret
	}
	return *o.Triggerable
}

// GetTriggerableOk returns a tuple with the Triggerable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetTriggerableOk() (*bool, bool) {
	if o == nil || isNil(o.Triggerable) {
		return nil, false
	}
	return o.Triggerable, true
}

// HasTriggerable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasTriggerable() bool {
	if o != nil && !isNil(o.Triggerable) {
		return true
	}

	return false
}

// SetTriggerable gets a reference to the given bool and assigns it to the Triggerable field.
func (o *SObjectDescribe) SetTriggerable(v bool) {
	o.Triggerable = &v
}

// GetUndeletable returns the Undeletable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetUndeletable() bool {
	if o == nil || isNil(o.Undeletable) {
		var ret bool
		return ret
	}
	return *o.Undeletable
}

// GetUndeletableOk returns a tuple with the Undeletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetUndeletableOk() (*bool, bool) {
	if o == nil || isNil(o.Undeletable) {
		return nil, false
	}
	return o.Undeletable, true
}

// HasUndeletable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasUndeletable() bool {
	if o != nil && !isNil(o.Undeletable) {
		return true
	}

	return false
}

// SetUndeletable gets a reference to the given bool and assigns it to the Undeletable field.
func (o *SObjectDescribe) SetUndeletable(v bool) {
	o.Undeletable = &v
}

// GetUpdateable returns the Updateable field value if set, zero value otherwise.
func (o *SObjectDescribe) GetUpdateable() bool {
	if o == nil || isNil(o.Updateable) {
		var ret bool
		return ret
	}
	return *o.Updateable
}

// GetUpdateableOk returns a tuple with the Updateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetUpdateableOk() (*bool, bool) {
	if o == nil || isNil(o.Updateable) {
		return nil, false
	}
	return o.Updateable, true
}

// HasUpdateable returns a boolean if a field has been set.
func (o *SObjectDescribe) HasUpdateable() bool {
	if o != nil && !isNil(o.Updateable) {
		return true
	}

	return false
}

// SetUpdateable gets a reference to the given bool and assigns it to the Updateable field.
func (o *SObjectDescribe) SetUpdateable(v bool) {
	o.Updateable = &v
}

// GetNamedLayoutInfos returns the NamedLayoutInfos field value if set, zero value otherwise.
func (o *SObjectDescribe) GetNamedLayoutInfos() []interface{} {
	if o == nil || isNil(o.NamedLayoutInfos) {
		var ret []interface{}
		return ret
	}
	return o.NamedLayoutInfos
}

// GetNamedLayoutInfosOk returns a tuple with the NamedLayoutInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetNamedLayoutInfosOk() ([]interface{}, bool) {
	if o == nil || isNil(o.NamedLayoutInfos) {
		return nil, false
	}
	return o.NamedLayoutInfos, true
}

// HasNamedLayoutInfos returns a boolean if a field has been set.
func (o *SObjectDescribe) HasNamedLayoutInfos() bool {
	if o != nil && !isNil(o.NamedLayoutInfos) {
		return true
	}

	return false
}

// SetNamedLayoutInfos gets a reference to the given []interface{} and assigns it to the NamedLayoutInfos field.
func (o *SObjectDescribe) SetNamedLayoutInfos(v []interface{}) {
	o.NamedLayoutInfos = v
}

// GetActionOverrides returns the ActionOverrides field value if set, zero value otherwise.
func (o *SObjectDescribe) GetActionOverrides() []ActionOverrides {
	if o == nil || isNil(o.ActionOverrides) {
		var ret []ActionOverrides
		return ret
	}
	return o.ActionOverrides
}

// GetActionOverridesOk returns a tuple with the ActionOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetActionOverridesOk() ([]ActionOverrides, bool) {
	if o == nil || isNil(o.ActionOverrides) {
		return nil, false
	}
	return o.ActionOverrides, true
}

// HasActionOverrides returns a boolean if a field has been set.
func (o *SObjectDescribe) HasActionOverrides() bool {
	if o != nil && !isNil(o.ActionOverrides) {
		return true
	}

	return false
}

// SetActionOverrides gets a reference to the given []ActionOverrides and assigns it to the ActionOverrides field.
func (o *SObjectDescribe) SetActionOverrides(v []ActionOverrides) {
	o.ActionOverrides = v
}

// GetChildRelationships returns the ChildRelationships field value if set, zero value otherwise.
func (o *SObjectDescribe) GetChildRelationships() []ChildRelationships {
	if o == nil || isNil(o.ChildRelationships) {
		var ret []ChildRelationships
		return ret
	}
	return o.ChildRelationships
}

// GetChildRelationshipsOk returns a tuple with the ChildRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetChildRelationshipsOk() ([]ChildRelationships, bool) {
	if o == nil || isNil(o.ChildRelationships) {
		return nil, false
	}
	return o.ChildRelationships, true
}

// HasChildRelationships returns a boolean if a field has been set.
func (o *SObjectDescribe) HasChildRelationships() bool {
	if o != nil && !isNil(o.ChildRelationships) {
		return true
	}

	return false
}

// SetChildRelationships gets a reference to the given []ChildRelationships and assigns it to the ChildRelationships field.
func (o *SObjectDescribe) SetChildRelationships(v []ChildRelationships) {
	o.ChildRelationships = v
}

// GetRecordTypeInfos returns the RecordTypeInfos field value if set, zero value otherwise.
func (o *SObjectDescribe) GetRecordTypeInfos() []RecordTypeInfo {
	if o == nil || isNil(o.RecordTypeInfos) {
		var ret []RecordTypeInfo
		return ret
	}
	return o.RecordTypeInfos
}

// GetRecordTypeInfosOk returns a tuple with the RecordTypeInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetRecordTypeInfosOk() ([]RecordTypeInfo, bool) {
	if o == nil || isNil(o.RecordTypeInfos) {
		return nil, false
	}
	return o.RecordTypeInfos, true
}

// HasRecordTypeInfos returns a boolean if a field has been set.
func (o *SObjectDescribe) HasRecordTypeInfos() bool {
	if o != nil && !isNil(o.RecordTypeInfos) {
		return true
	}

	return false
}

// SetRecordTypeInfos gets a reference to the given []RecordTypeInfo and assigns it to the RecordTypeInfos field.
func (o *SObjectDescribe) SetRecordTypeInfos(v []RecordTypeInfo) {
	o.RecordTypeInfos = v
}

// GetSupportedScopes returns the SupportedScopes field value if set, zero value otherwise.
func (o *SObjectDescribe) GetSupportedScopes() []SupportedScopes {
	if o == nil || isNil(o.SupportedScopes) {
		var ret []SupportedScopes
		return ret
	}
	return o.SupportedScopes
}

// GetSupportedScopesOk returns a tuple with the SupportedScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetSupportedScopesOk() ([]SupportedScopes, bool) {
	if o == nil || isNil(o.SupportedScopes) {
		return nil, false
	}
	return o.SupportedScopes, true
}

// HasSupportedScopes returns a boolean if a field has been set.
func (o *SObjectDescribe) HasSupportedScopes() bool {
	if o != nil && !isNil(o.SupportedScopes) {
		return true
	}

	return false
}

// SetSupportedScopes gets a reference to the given []SupportedScopes and assigns it to the SupportedScopes field.
func (o *SObjectDescribe) SetSupportedScopes(v []SupportedScopes) {
	o.SupportedScopes = v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *SObjectDescribe) GetUrls() map[string]interface{} {
	if o == nil || isNil(o.Urls) {
		var ret map[string]interface{}
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetUrlsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Urls) {
		return map[string]interface{}{}, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *SObjectDescribe) HasUrls() bool {
	if o != nil && !isNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given map[string]interface{} and assigns it to the Urls field.
func (o *SObjectDescribe) SetUrls(v map[string]interface{}) {
	o.Urls = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *SObjectDescribe) GetFields() []FieldDescribe {
	if o == nil || isNil(o.Fields) {
		var ret []FieldDescribe
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribe) GetFieldsOk() ([]FieldDescribe, bool) {
	if o == nil || isNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *SObjectDescribe) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []FieldDescribe and assigns it to the Fields field.
func (o *SObjectDescribe) SetFields(v []FieldDescribe) {
	o.Fields = v
}

func (o SObjectDescribe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Activateable) {
		toSerialize["activateable"] = o.Activateable
	}
	if o.AssociateEntityType.IsSet() {
		toSerialize["associateEntityType"] = o.AssociateEntityType.Get()
	}
	if o.AssociateParentEntity.IsSet() {
		toSerialize["associateParentEntity"] = o.AssociateParentEntity.Get()
	}
	if !isNil(o.CompactLayoutable) {
		toSerialize["compactLayoutable"] = o.CompactLayoutable
	}
	if !isNil(o.Createable) {
		toSerialize["createable"] = o.Createable
	}
	if !isNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !isNil(o.CustomSetting) {
		toSerialize["customSetting"] = o.CustomSetting
	}
	if !isNil(o.DeepCloneable) {
		toSerialize["deepCloneable"] = o.DeepCloneable
	}
	if o.DefaultImplementation.IsSet() {
		toSerialize["defaultImplementation"] = o.DefaultImplementation.Get()
	}
	if !isNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !isNil(o.DeprecatedAndHidden) {
		toSerialize["deprecatedAndHidden"] = o.DeprecatedAndHidden
	}
	if o.ExtendedBy.IsSet() {
		toSerialize["extendedBy"] = o.ExtendedBy.Get()
	}
	if o.ExtendsInterfaces.IsSet() {
		toSerialize["extendsInterfaces"] = o.ExtendsInterfaces.Get()
	}
	if !isNil(o.FeedEnabled) {
		toSerialize["feedEnabled"] = o.FeedEnabled
	}
	if !isNil(o.HasSubtypes) {
		toSerialize["hasSubtypes"] = o.HasSubtypes
	}
	if o.ImplementedBy.IsSet() {
		toSerialize["implementedBy"] = o.ImplementedBy.Get()
	}
	if o.ImplementsInterfaces.IsSet() {
		toSerialize["implementsInterfaces"] = o.ImplementsInterfaces.Get()
	}
	if !isNil(o.IsInterface) {
		toSerialize["isInterface"] = o.IsInterface
	}
	if !isNil(o.IsSubtype) {
		toSerialize["isSubtype"] = o.IsSubtype
	}
	if true {
		toSerialize["keyPrefix"] = o.KeyPrefix
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["labelPlural"] = o.LabelPlural
	}
	if !isNil(o.Layoutable) {
		toSerialize["layoutable"] = o.Layoutable
	}
	if o.Listviewable.IsSet() {
		toSerialize["listviewable"] = o.Listviewable.Get()
	}
	if o.LookupLayoutable.IsSet() {
		toSerialize["lookupLayoutable"] = o.LookupLayoutable.Get()
	}
	if !isNil(o.Mergeable) {
		toSerialize["mergeable"] = o.Mergeable
	}
	if !isNil(o.MruEnabled) {
		toSerialize["mruEnabled"] = o.MruEnabled
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.NetworkScopeFieldName.IsSet() {
		toSerialize["networkScopeFieldName"] = o.NetworkScopeFieldName.Get()
	}
	if !isNil(o.Queryable) {
		toSerialize["queryable"] = o.Queryable
	}
	if !isNil(o.Replicateable) {
		toSerialize["replicateable"] = o.Replicateable
	}
	if !isNil(o.Retrieveable) {
		toSerialize["retrieveable"] = o.Retrieveable
	}
	if !isNil(o.SearchLayoutable) {
		toSerialize["searchLayoutable"] = o.SearchLayoutable
	}
	if !isNil(o.Searchable) {
		toSerialize["searchable"] = o.Searchable
	}
	if !isNil(o.SobjectDescribeOption) {
		toSerialize["sobjectDescribeOption"] = o.SobjectDescribeOption
	}
	if !isNil(o.Triggerable) {
		toSerialize["triggerable"] = o.Triggerable
	}
	if !isNil(o.Undeletable) {
		toSerialize["undeletable"] = o.Undeletable
	}
	if !isNil(o.Updateable) {
		toSerialize["updateable"] = o.Updateable
	}
	if !isNil(o.NamedLayoutInfos) {
		toSerialize["namedLayoutInfos"] = o.NamedLayoutInfos
	}
	if !isNil(o.ActionOverrides) {
		toSerialize["actionOverrides"] = o.ActionOverrides
	}
	if !isNil(o.ChildRelationships) {
		toSerialize["childRelationships"] = o.ChildRelationships
	}
	if !isNil(o.RecordTypeInfos) {
		toSerialize["recordTypeInfos"] = o.RecordTypeInfos
	}
	if !isNil(o.SupportedScopes) {
		toSerialize["supportedScopes"] = o.SupportedScopes
	}
	if !isNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableSObjectDescribe struct {
	value *SObjectDescribe
	isSet bool
}

func (v NullableSObjectDescribe) Get() *SObjectDescribe {
	return v.value
}

func (v *NullableSObjectDescribe) Set(val *SObjectDescribe) {
	v.value = val
	v.isSet = true
}

func (v NullableSObjectDescribe) IsSet() bool {
	return v.isSet
}

func (v *NullableSObjectDescribe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSObjectDescribe(val *SObjectDescribe) *NullableSObjectDescribe {
	return &NullableSObjectDescribe{value: val, isSet: true}
}

func (v NullableSObjectDescribe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSObjectDescribe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
