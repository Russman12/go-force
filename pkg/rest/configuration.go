/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"context"
	"net/http"
	"strings"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes an oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKeys takes a string apikey as authentication for the request
	ContextAPIKeys = contextKey("apiKeys")

	// ContextHttpSignatureAuth takes HttpSignatureAuth as authentication for the request.
	ContextHttpSignatureAuth = contextKey("httpsignature")

	// ContextServerIndex uses a server configuration from the index.
	ContextServerIndex = contextKey("serverIndex")

	// ContextOperationServerIndices uses a server configuration from the index mapping.
	ContextOperationServerIndices = contextKey("serverOperationIndices")

	// ContextServerVariables overrides a server configuration variables.
	ContextServerVariables = contextKey("serverVariables")

	// ContextOperationServerVariables overrides a server configuration variables using operation specific values.
	ContextOperationServerVariables = contextKey("serverOperationVariables")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

// ServerVariable stores the information about a server variable
type ServerVariable struct {
	description  string
	defaultValue string
	currentValue string
	enumValues   []string
}

// ServerConfiguration stores the information about a server
type ServerConfiguration struct {
	url         string
	description string
	variables   map[string]*ServerVariable
}

// ServerConfigurations stores multiple ServerConfiguration items
type ServerConfigurations []*ServerConfiguration

// Configuration stores the configuration of the API client
type Configuration struct {
	Host              string            `json:"host,omitempty"`
	Scheme            string            `json:"scheme,omitempty"`
	DefaultHeader     map[string]string `json:"defaultHeader,omitempty"`
	UserAgent         string            `json:"userAgent,omitempty"`
	Debug             bool              `json:"debug,omitempty"`
	servers           ServerConfigurations
	activeServerIndex int
	operationServers  map[string]ServerConfigurations
	httpClient        *http.Client
}

// NewConfiguration returns a new Configuration object
func NewConfiguration() *Configuration {
	cfg := &Configuration{
		DefaultHeader: make(map[string]string),
		UserAgent:     "OpenAPI-Generator/1.0.0/go",
		Debug:         false,
		servers: ServerConfigurations{
			{
				url:         "{instanceUrl}/services/data/v{apiVersion}",
				description: "API Base URL",
				variables: map[string]*ServerVariable{
					"instanceUrl": &ServerVariable{
						description:  "Salesforce server domain",
						defaultValue: "https://myorg.lightning.force.com",
					},
					"apiVersion": &ServerVariable{
						description:  "Salesforce api version",
						defaultValue: "56.0",
					},
				},
			},
		},
		activeServerIndex: 0,
		operationServers:  map[string]ServerConfigurations{},
	}
	return cfg
}

// NewConfigurationWithActiveServerVars returns a new Configuration object with the default server and variable replacements set
func NewConfigurationWithActiveServerVars(index int, variables map[string]string) *Configuration {
	cfg := NewConfiguration()
	cfg.activeServerIndex = index
	for name, val := range variables {
		cfg.servers[cfg.activeServerIndex].SetServerVariable(name, val)
	}
	return cfg
}

// SetActiveServer sets the current active server configuration
func (c *Configuration) SetActiveServer(index int) {
	c.activeServerIndex = index
}

// GetActiveServer returns the current active server configuration
func (c *Configuration) GetActiveServer() *ServerConfiguration {
	return c.servers[c.activeServerIndex]
}

func (c *Configuration) GetServer(index int) *ServerConfiguration {
	return c.servers[index]
}

func (sc *ServerConfiguration) SetServerVariable(name string, value string) {
	if _, ok := sc.variables[name]; !ok {
		sc.variables[name] = &ServerVariable{currentValue: value}
	}
	sc.variables[name].currentValue = value
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

// GetURL gets the url for a server config with variables injected
func (sc ServerConfiguration) GetURL() string {
	urlVars := map[string]string{}
	for varName, serverVar := range sc.variables {
		urlVars[varName] = serverVar.currentValue
	}
	return injectUrlVars(sc.url, urlVars)
}

// injectUrlVars formats the given string with injected variables
func injectUrlVars(url string, variables map[string]string) string {
	// go through variables and replace placeholders
	for name, value := range variables {
		url = strings.Replace(url, "{"+name+"}", value, -1)
	}
	return url
}

func getServerIndex(ctx context.Context) (int, error) {
	si := ctx.Value(ContextServerIndex)
	if si != nil {
		if index, ok := si.(int); ok {
			return index, nil
		}
		return 0, reportError("Invalid type %T should be int", si)
	}
	return 0, nil
}

func getServerOperationIndex(ctx context.Context, endpoint string) (int, error) {
	osi := ctx.Value(ContextOperationServerIndices)
	if osi != nil {
		if operationIndices, ok := osi.(map[string]int); !ok {
			return 0, reportError("Invalid type %T should be map[string]int", osi)
		} else {
			index, ok := operationIndices[endpoint]
			if ok {
				return index, nil
			}
		}
	}
	return getServerIndex(ctx)
}

func getServerVariables(ctx context.Context) (map[string]string, error) {
	sv := ctx.Value(ContextServerVariables)
	if sv != nil {
		if variables, ok := sv.(map[string]string); ok {
			return variables, nil
		}
		return nil, reportError("ctx value of ContextServerVariables has invalid type %T should be map[string]string", sv)
	}
	return nil, nil
}

func getServerOperationVariables(ctx context.Context, endpoint string) (map[string]string, error) {
	osv := ctx.Value(ContextOperationServerVariables)
	if osv != nil {
		if operationVariables, ok := osv.(map[string]map[string]string); !ok {
			return nil, reportError("ctx value of ContextOperationServerVariables has invalid type %T should be map[string]map[string]string", osv)
		} else {
			variables, ok := operationVariables[endpoint]
			if ok {
				return variables, nil
			}
		}
	}
	return getServerVariables(ctx)
}
