/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
)

// SobjectDescribes struct for SobjectDescribes
type SobjectDescribes struct {
	Encoding     string            `json:"encoding"`
	MaxBatchSize int32             `json:"maxBatchSize"`
	Sobjects     []SobjectDescribe `json:"sobjects"`
}

// NewSobjectDescribes instantiates a new SobjectDescribes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSobjectDescribes(encoding string, maxBatchSize int32, sobjects []SobjectDescribe) *SobjectDescribes {
	this := SobjectDescribes{}
	this.Encoding = encoding
	this.MaxBatchSize = maxBatchSize
	this.Sobjects = sobjects
	return &this
}

// NewSobjectDescribesWithDefaults instantiates a new SobjectDescribes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSobjectDescribesWithDefaults() *SobjectDescribes {
	this := SobjectDescribes{}
	return &this
}

// GetEncoding returns the Encoding field value
func (o *SobjectDescribes) GetEncoding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value
// and a boolean to check if the value has been set.
func (o *SobjectDescribes) GetEncodingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encoding, true
}

// SetEncoding sets field value
func (o *SobjectDescribes) SetEncoding(v string) {
	o.Encoding = v
}

// GetMaxBatchSize returns the MaxBatchSize field value
func (o *SobjectDescribes) GetMaxBatchSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxBatchSize
}

// GetMaxBatchSizeOk returns a tuple with the MaxBatchSize field value
// and a boolean to check if the value has been set.
func (o *SobjectDescribes) GetMaxBatchSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBatchSize, true
}

// SetMaxBatchSize sets field value
func (o *SobjectDescribes) SetMaxBatchSize(v int32) {
	o.MaxBatchSize = v
}

// GetSobjects returns the Sobjects field value
func (o *SobjectDescribes) GetSobjects() []SobjectDescribe {
	if o == nil {
		var ret []SobjectDescribe
		return ret
	}

	return o.Sobjects
}

// GetSobjectsOk returns a tuple with the Sobjects field value
// and a boolean to check if the value has been set.
func (o *SobjectDescribes) GetSobjectsOk() ([]SobjectDescribe, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sobjects, true
}

// SetSobjects sets field value
func (o *SobjectDescribes) SetSobjects(v []SobjectDescribe) {
	o.Sobjects = v
}

func (o SobjectDescribes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["encoding"] = o.Encoding
	}
	if true {
		toSerialize["maxBatchSize"] = o.MaxBatchSize
	}
	if true {
		toSerialize["sobjects"] = o.Sobjects
	}
	return json.Marshal(toSerialize)
}

type NullableSobjectDescribes struct {
	value *SobjectDescribes
	isSet bool
}

func (v NullableSobjectDescribes) Get() *SobjectDescribes {
	return v.value
}

func (v *NullableSobjectDescribes) Set(val *SobjectDescribes) {
	v.value = val
	v.isSet = true
}

func (v NullableSobjectDescribes) IsSet() bool {
	return v.isSet
}

func (v *NullableSobjectDescribes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSobjectDescribes(val *SobjectDescribes) *NullableSobjectDescribes {
	return &NullableSobjectDescribes{value: val, isSet: true}
}

func (v NullableSobjectDescribes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSobjectDescribes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
