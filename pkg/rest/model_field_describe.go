/*
Salesforce Platform REST APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
)

// FieldDescribe struct for FieldDescribe
type FieldDescribe struct {
	Aggregatable                 *bool                   `json:"aggregatable,omitempty"`
	AiPredictionField            *bool                   `json:"aiPredictionField,omitempty"`
	AutoNumber                   *bool                   `json:"autoNumber,omitempty"`
	ByteLength                   *int32                  `json:"byteLength,omitempty"`
	Calculated                   *bool                   `json:"calculated,omitempty"`
	CalculatedFormula            NullableString          `json:"calculatedFormula,omitempty"`
	CascadeDelete                *bool                   `json:"cascadeDelete,omitempty"`
	CaseSensitive                *bool                   `json:"caseSensitive,omitempty"`
	CompoundFieldName            NullableString          `json:"compoundFieldName,omitempty"`
	ControllerName               NullableString          `json:"controllerName,omitempty"`
	Createable                   *bool                   `json:"createable,omitempty"`
	Custom                       *bool                   `json:"custom,omitempty"`
	DefaultValue                 interface{}             `json:"defaultValue,omitempty"`
	DefaultValueFormula          NullableString          `json:"defaultValueFormula,omitempty"`
	DefaultedOnCreate            *bool                   `json:"defaultedOnCreate,omitempty"`
	DependentPicklist            *bool                   `json:"dependentPicklist,omitempty"`
	DeprecatedAndHidden          *bool                   `json:"deprecatedAndHidden,omitempty"`
	Digits                       *int32                  `json:"digits,omitempty"`
	DisplayLocationInDecimal     *bool                   `json:"displayLocationInDecimal,omitempty"`
	Encrypted                    *bool                   `json:"encrypted,omitempty"`
	ExternalId                   *bool                   `json:"externalId,omitempty"`
	ExtraTypeInfo                NullableString          `json:"extraTypeInfo,omitempty"`
	Filterable                   *bool                   `json:"filterable,omitempty"`
	FilteredLookupInfo           map[string]interface{}  `json:"filteredLookupInfo,omitempty"`
	FormulaTreatNullNumberAsZero *bool                   `json:"formulaTreatNullNumberAsZero,omitempty"`
	Groupable                    *bool                   `json:"groupable,omitempty"`
	HighScaleNumber              *bool                   `json:"highScaleNumber,omitempty"`
	HtmlFormatted                *bool                   `json:"htmlFormatted,omitempty"`
	IdLookup                     *bool                   `json:"idLookup,omitempty"`
	InlineHelpText               NullableString          `json:"inlineHelpText,omitempty"`
	Label                        *string                 `json:"label,omitempty"`
	Length                       *int32                  `json:"length,omitempty"`
	Mask                         NullableString          `json:"mask,omitempty"`
	MaskType                     NullableString          `json:"maskType,omitempty"`
	Name                         *string                 `json:"name,omitempty"`
	NameField                    *bool                   `json:"nameField,omitempty"`
	NamePointing                 *bool                   `json:"namePointing,omitempty"`
	Nillable                     *bool                   `json:"nillable,omitempty"`
	Permissionable               *bool                   `json:"permissionable,omitempty"`
	PicklistValues               []FieldDescribePicklist `json:"picklistValues,omitempty"`
	PolymorphicForeignKey        *bool                   `json:"polymorphicForeignKey,omitempty"`
	Precision                    *int32                  `json:"precision,omitempty"`
	QueryByDistance              *bool                   `json:"queryByDistance,omitempty"`
	ReferenceTargetField         NullableString          `json:"referenceTargetField,omitempty"`
	ReferenceTo                  []string                `json:"referenceTo,omitempty"`
	RelationshipName             NullableString          `json:"relationshipName,omitempty"`
	RelationshipOrder            NullableInt32           `json:"relationshipOrder,omitempty"`
	RestrictedDelete             *bool                   `json:"restrictedDelete,omitempty"`
	RestrictedPicklist           *bool                   `json:"restrictedPicklist,omitempty"`
	Scale                        *int32                  `json:"scale,omitempty"`
	SearchPrefilterable          *bool                   `json:"searchPrefilterable,omitempty"`
	SoapType                     *string                 `json:"soapType,omitempty"`
	Sortable                     *bool                   `json:"sortable,omitempty"`
	Type                         *string                 `json:"type,omitempty"`
	Unique                       *bool                   `json:"unique,omitempty"`
	Updateable                   *bool                   `json:"updateable,omitempty"`
	WriteRequiresMasterRead      *bool                   `json:"writeRequiresMasterRead,omitempty"`
}

// NewFieldDescribe instantiates a new FieldDescribe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldDescribe() *FieldDescribe {
	this := FieldDescribe{}
	return &this
}

// NewFieldDescribeWithDefaults instantiates a new FieldDescribe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldDescribeWithDefaults() *FieldDescribe {
	this := FieldDescribe{}
	return &this
}

// GetAggregatable returns the Aggregatable field value if set, zero value otherwise.
func (o *FieldDescribe) GetAggregatable() bool {
	if o == nil || isNil(o.Aggregatable) {
		var ret bool
		return ret
	}
	return *o.Aggregatable
}

// GetAggregatableOk returns a tuple with the Aggregatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetAggregatableOk() (*bool, bool) {
	if o == nil || isNil(o.Aggregatable) {
		return nil, false
	}
	return o.Aggregatable, true
}

// HasAggregatable returns a boolean if a field has been set.
func (o *FieldDescribe) HasAggregatable() bool {
	if o != nil && !isNil(o.Aggregatable) {
		return true
	}

	return false
}

// SetAggregatable gets a reference to the given bool and assigns it to the Aggregatable field.
func (o *FieldDescribe) SetAggregatable(v bool) {
	o.Aggregatable = &v
}

// GetAiPredictionField returns the AiPredictionField field value if set, zero value otherwise.
func (o *FieldDescribe) GetAiPredictionField() bool {
	if o == nil || isNil(o.AiPredictionField) {
		var ret bool
		return ret
	}
	return *o.AiPredictionField
}

// GetAiPredictionFieldOk returns a tuple with the AiPredictionField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetAiPredictionFieldOk() (*bool, bool) {
	if o == nil || isNil(o.AiPredictionField) {
		return nil, false
	}
	return o.AiPredictionField, true
}

// HasAiPredictionField returns a boolean if a field has been set.
func (o *FieldDescribe) HasAiPredictionField() bool {
	if o != nil && !isNil(o.AiPredictionField) {
		return true
	}

	return false
}

// SetAiPredictionField gets a reference to the given bool and assigns it to the AiPredictionField field.
func (o *FieldDescribe) SetAiPredictionField(v bool) {
	o.AiPredictionField = &v
}

// GetAutoNumber returns the AutoNumber field value if set, zero value otherwise.
func (o *FieldDescribe) GetAutoNumber() bool {
	if o == nil || isNil(o.AutoNumber) {
		var ret bool
		return ret
	}
	return *o.AutoNumber
}

// GetAutoNumberOk returns a tuple with the AutoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetAutoNumberOk() (*bool, bool) {
	if o == nil || isNil(o.AutoNumber) {
		return nil, false
	}
	return o.AutoNumber, true
}

// HasAutoNumber returns a boolean if a field has been set.
func (o *FieldDescribe) HasAutoNumber() bool {
	if o != nil && !isNil(o.AutoNumber) {
		return true
	}

	return false
}

// SetAutoNumber gets a reference to the given bool and assigns it to the AutoNumber field.
func (o *FieldDescribe) SetAutoNumber(v bool) {
	o.AutoNumber = &v
}

// GetByteLength returns the ByteLength field value if set, zero value otherwise.
func (o *FieldDescribe) GetByteLength() int32 {
	if o == nil || isNil(o.ByteLength) {
		var ret int32
		return ret
	}
	return *o.ByteLength
}

// GetByteLengthOk returns a tuple with the ByteLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetByteLengthOk() (*int32, bool) {
	if o == nil || isNil(o.ByteLength) {
		return nil, false
	}
	return o.ByteLength, true
}

// HasByteLength returns a boolean if a field has been set.
func (o *FieldDescribe) HasByteLength() bool {
	if o != nil && !isNil(o.ByteLength) {
		return true
	}

	return false
}

// SetByteLength gets a reference to the given int32 and assigns it to the ByteLength field.
func (o *FieldDescribe) SetByteLength(v int32) {
	o.ByteLength = &v
}

// GetCalculated returns the Calculated field value if set, zero value otherwise.
func (o *FieldDescribe) GetCalculated() bool {
	if o == nil || isNil(o.Calculated) {
		var ret bool
		return ret
	}
	return *o.Calculated
}

// GetCalculatedOk returns a tuple with the Calculated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetCalculatedOk() (*bool, bool) {
	if o == nil || isNil(o.Calculated) {
		return nil, false
	}
	return o.Calculated, true
}

// HasCalculated returns a boolean if a field has been set.
func (o *FieldDescribe) HasCalculated() bool {
	if o != nil && !isNil(o.Calculated) {
		return true
	}

	return false
}

// SetCalculated gets a reference to the given bool and assigns it to the Calculated field.
func (o *FieldDescribe) SetCalculated(v bool) {
	o.Calculated = &v
}

// GetCalculatedFormula returns the CalculatedFormula field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetCalculatedFormula() string {
	if o == nil || isNil(o.CalculatedFormula.Get()) {
		var ret string
		return ret
	}
	return *o.CalculatedFormula.Get()
}

// GetCalculatedFormulaOk returns a tuple with the CalculatedFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetCalculatedFormulaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedFormula.Get(), o.CalculatedFormula.IsSet()
}

// HasCalculatedFormula returns a boolean if a field has been set.
func (o *FieldDescribe) HasCalculatedFormula() bool {
	if o != nil && o.CalculatedFormula.IsSet() {
		return true
	}

	return false
}

// SetCalculatedFormula gets a reference to the given NullableString and assigns it to the CalculatedFormula field.
func (o *FieldDescribe) SetCalculatedFormula(v string) {
	o.CalculatedFormula.Set(&v)
}

// SetCalculatedFormulaNil sets the value for CalculatedFormula to be an explicit nil
func (o *FieldDescribe) SetCalculatedFormulaNil() {
	o.CalculatedFormula.Set(nil)
}

// UnsetCalculatedFormula ensures that no value is present for CalculatedFormula, not even an explicit nil
func (o *FieldDescribe) UnsetCalculatedFormula() {
	o.CalculatedFormula.Unset()
}

// GetCascadeDelete returns the CascadeDelete field value if set, zero value otherwise.
func (o *FieldDescribe) GetCascadeDelete() bool {
	if o == nil || isNil(o.CascadeDelete) {
		var ret bool
		return ret
	}
	return *o.CascadeDelete
}

// GetCascadeDeleteOk returns a tuple with the CascadeDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetCascadeDeleteOk() (*bool, bool) {
	if o == nil || isNil(o.CascadeDelete) {
		return nil, false
	}
	return o.CascadeDelete, true
}

// HasCascadeDelete returns a boolean if a field has been set.
func (o *FieldDescribe) HasCascadeDelete() bool {
	if o != nil && !isNil(o.CascadeDelete) {
		return true
	}

	return false
}

// SetCascadeDelete gets a reference to the given bool and assigns it to the CascadeDelete field.
func (o *FieldDescribe) SetCascadeDelete(v bool) {
	o.CascadeDelete = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *FieldDescribe) GetCaseSensitive() bool {
	if o == nil || isNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || isNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *FieldDescribe) HasCaseSensitive() bool {
	if o != nil && !isNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *FieldDescribe) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetCompoundFieldName returns the CompoundFieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetCompoundFieldName() string {
	if o == nil || isNil(o.CompoundFieldName.Get()) {
		var ret string
		return ret
	}
	return *o.CompoundFieldName.Get()
}

// GetCompoundFieldNameOk returns a tuple with the CompoundFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetCompoundFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompoundFieldName.Get(), o.CompoundFieldName.IsSet()
}

// HasCompoundFieldName returns a boolean if a field has been set.
func (o *FieldDescribe) HasCompoundFieldName() bool {
	if o != nil && o.CompoundFieldName.IsSet() {
		return true
	}

	return false
}

// SetCompoundFieldName gets a reference to the given NullableString and assigns it to the CompoundFieldName field.
func (o *FieldDescribe) SetCompoundFieldName(v string) {
	o.CompoundFieldName.Set(&v)
}

// SetCompoundFieldNameNil sets the value for CompoundFieldName to be an explicit nil
func (o *FieldDescribe) SetCompoundFieldNameNil() {
	o.CompoundFieldName.Set(nil)
}

// UnsetCompoundFieldName ensures that no value is present for CompoundFieldName, not even an explicit nil
func (o *FieldDescribe) UnsetCompoundFieldName() {
	o.CompoundFieldName.Unset()
}

// GetControllerName returns the ControllerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetControllerName() string {
	if o == nil || isNil(o.ControllerName.Get()) {
		var ret string
		return ret
	}
	return *o.ControllerName.Get()
}

// GetControllerNameOk returns a tuple with the ControllerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetControllerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerName.Get(), o.ControllerName.IsSet()
}

// HasControllerName returns a boolean if a field has been set.
func (o *FieldDescribe) HasControllerName() bool {
	if o != nil && o.ControllerName.IsSet() {
		return true
	}

	return false
}

// SetControllerName gets a reference to the given NullableString and assigns it to the ControllerName field.
func (o *FieldDescribe) SetControllerName(v string) {
	o.ControllerName.Set(&v)
}

// SetControllerNameNil sets the value for ControllerName to be an explicit nil
func (o *FieldDescribe) SetControllerNameNil() {
	o.ControllerName.Set(nil)
}

// UnsetControllerName ensures that no value is present for ControllerName, not even an explicit nil
func (o *FieldDescribe) UnsetControllerName() {
	o.ControllerName.Unset()
}

// GetCreateable returns the Createable field value if set, zero value otherwise.
func (o *FieldDescribe) GetCreateable() bool {
	if o == nil || isNil(o.Createable) {
		var ret bool
		return ret
	}
	return *o.Createable
}

// GetCreateableOk returns a tuple with the Createable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetCreateableOk() (*bool, bool) {
	if o == nil || isNil(o.Createable) {
		return nil, false
	}
	return o.Createable, true
}

// HasCreateable returns a boolean if a field has been set.
func (o *FieldDescribe) HasCreateable() bool {
	if o != nil && !isNil(o.Createable) {
		return true
	}

	return false
}

// SetCreateable gets a reference to the given bool and assigns it to the Createable field.
func (o *FieldDescribe) SetCreateable(v bool) {
	o.Createable = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *FieldDescribe) GetCustom() bool {
	if o == nil || isNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetCustomOk() (*bool, bool) {
	if o == nil || isNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *FieldDescribe) HasCustom() bool {
	if o != nil && !isNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *FieldDescribe) SetCustom(v bool) {
	o.Custom = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetDefaultValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetDefaultValueOk() (*interface{}, bool) {
	if o == nil || isNil(o.DefaultValue) {
		return nil, false
	}
	return &o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *FieldDescribe) HasDefaultValue() bool {
	if o != nil && isNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given interface{} and assigns it to the DefaultValue field.
func (o *FieldDescribe) SetDefaultValue(v interface{}) {
	o.DefaultValue = v
}

// GetDefaultValueFormula returns the DefaultValueFormula field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetDefaultValueFormula() string {
	if o == nil || isNil(o.DefaultValueFormula.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValueFormula.Get()
}

// GetDefaultValueFormulaOk returns a tuple with the DefaultValueFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetDefaultValueFormulaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValueFormula.Get(), o.DefaultValueFormula.IsSet()
}

// HasDefaultValueFormula returns a boolean if a field has been set.
func (o *FieldDescribe) HasDefaultValueFormula() bool {
	if o != nil && o.DefaultValueFormula.IsSet() {
		return true
	}

	return false
}

// SetDefaultValueFormula gets a reference to the given NullableString and assigns it to the DefaultValueFormula field.
func (o *FieldDescribe) SetDefaultValueFormula(v string) {
	o.DefaultValueFormula.Set(&v)
}

// SetDefaultValueFormulaNil sets the value for DefaultValueFormula to be an explicit nil
func (o *FieldDescribe) SetDefaultValueFormulaNil() {
	o.DefaultValueFormula.Set(nil)
}

// UnsetDefaultValueFormula ensures that no value is present for DefaultValueFormula, not even an explicit nil
func (o *FieldDescribe) UnsetDefaultValueFormula() {
	o.DefaultValueFormula.Unset()
}

// GetDefaultedOnCreate returns the DefaultedOnCreate field value if set, zero value otherwise.
func (o *FieldDescribe) GetDefaultedOnCreate() bool {
	if o == nil || isNil(o.DefaultedOnCreate) {
		var ret bool
		return ret
	}
	return *o.DefaultedOnCreate
}

// GetDefaultedOnCreateOk returns a tuple with the DefaultedOnCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetDefaultedOnCreateOk() (*bool, bool) {
	if o == nil || isNil(o.DefaultedOnCreate) {
		return nil, false
	}
	return o.DefaultedOnCreate, true
}

// HasDefaultedOnCreate returns a boolean if a field has been set.
func (o *FieldDescribe) HasDefaultedOnCreate() bool {
	if o != nil && !isNil(o.DefaultedOnCreate) {
		return true
	}

	return false
}

// SetDefaultedOnCreate gets a reference to the given bool and assigns it to the DefaultedOnCreate field.
func (o *FieldDescribe) SetDefaultedOnCreate(v bool) {
	o.DefaultedOnCreate = &v
}

// GetDependentPicklist returns the DependentPicklist field value if set, zero value otherwise.
func (o *FieldDescribe) GetDependentPicklist() bool {
	if o == nil || isNil(o.DependentPicklist) {
		var ret bool
		return ret
	}
	return *o.DependentPicklist
}

// GetDependentPicklistOk returns a tuple with the DependentPicklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetDependentPicklistOk() (*bool, bool) {
	if o == nil || isNil(o.DependentPicklist) {
		return nil, false
	}
	return o.DependentPicklist, true
}

// HasDependentPicklist returns a boolean if a field has been set.
func (o *FieldDescribe) HasDependentPicklist() bool {
	if o != nil && !isNil(o.DependentPicklist) {
		return true
	}

	return false
}

// SetDependentPicklist gets a reference to the given bool and assigns it to the DependentPicklist field.
func (o *FieldDescribe) SetDependentPicklist(v bool) {
	o.DependentPicklist = &v
}

// GetDeprecatedAndHidden returns the DeprecatedAndHidden field value if set, zero value otherwise.
func (o *FieldDescribe) GetDeprecatedAndHidden() bool {
	if o == nil || isNil(o.DeprecatedAndHidden) {
		var ret bool
		return ret
	}
	return *o.DeprecatedAndHidden
}

// GetDeprecatedAndHiddenOk returns a tuple with the DeprecatedAndHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetDeprecatedAndHiddenOk() (*bool, bool) {
	if o == nil || isNil(o.DeprecatedAndHidden) {
		return nil, false
	}
	return o.DeprecatedAndHidden, true
}

// HasDeprecatedAndHidden returns a boolean if a field has been set.
func (o *FieldDescribe) HasDeprecatedAndHidden() bool {
	if o != nil && !isNil(o.DeprecatedAndHidden) {
		return true
	}

	return false
}

// SetDeprecatedAndHidden gets a reference to the given bool and assigns it to the DeprecatedAndHidden field.
func (o *FieldDescribe) SetDeprecatedAndHidden(v bool) {
	o.DeprecatedAndHidden = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *FieldDescribe) GetDigits() int32 {
	if o == nil || isNil(o.Digits) {
		var ret int32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetDigitsOk() (*int32, bool) {
	if o == nil || isNil(o.Digits) {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *FieldDescribe) HasDigits() bool {
	if o != nil && !isNil(o.Digits) {
		return true
	}

	return false
}

// SetDigits gets a reference to the given int32 and assigns it to the Digits field.
func (o *FieldDescribe) SetDigits(v int32) {
	o.Digits = &v
}

// GetDisplayLocationInDecimal returns the DisplayLocationInDecimal field value if set, zero value otherwise.
func (o *FieldDescribe) GetDisplayLocationInDecimal() bool {
	if o == nil || isNil(o.DisplayLocationInDecimal) {
		var ret bool
		return ret
	}
	return *o.DisplayLocationInDecimal
}

// GetDisplayLocationInDecimalOk returns a tuple with the DisplayLocationInDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetDisplayLocationInDecimalOk() (*bool, bool) {
	if o == nil || isNil(o.DisplayLocationInDecimal) {
		return nil, false
	}
	return o.DisplayLocationInDecimal, true
}

// HasDisplayLocationInDecimal returns a boolean if a field has been set.
func (o *FieldDescribe) HasDisplayLocationInDecimal() bool {
	if o != nil && !isNil(o.DisplayLocationInDecimal) {
		return true
	}

	return false
}

// SetDisplayLocationInDecimal gets a reference to the given bool and assigns it to the DisplayLocationInDecimal field.
func (o *FieldDescribe) SetDisplayLocationInDecimal(v bool) {
	o.DisplayLocationInDecimal = &v
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *FieldDescribe) GetEncrypted() bool {
	if o == nil || isNil(o.Encrypted) {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetEncryptedOk() (*bool, bool) {
	if o == nil || isNil(o.Encrypted) {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *FieldDescribe) HasEncrypted() bool {
	if o != nil && !isNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *FieldDescribe) SetEncrypted(v bool) {
	o.Encrypted = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *FieldDescribe) GetExternalId() bool {
	if o == nil || isNil(o.ExternalId) {
		var ret bool
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetExternalIdOk() (*bool, bool) {
	if o == nil || isNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *FieldDescribe) HasExternalId() bool {
	if o != nil && !isNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given bool and assigns it to the ExternalId field.
func (o *FieldDescribe) SetExternalId(v bool) {
	o.ExternalId = &v
}

// GetExtraTypeInfo returns the ExtraTypeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetExtraTypeInfo() string {
	if o == nil || isNil(o.ExtraTypeInfo.Get()) {
		var ret string
		return ret
	}
	return *o.ExtraTypeInfo.Get()
}

// GetExtraTypeInfoOk returns a tuple with the ExtraTypeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetExtraTypeInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraTypeInfo.Get(), o.ExtraTypeInfo.IsSet()
}

// HasExtraTypeInfo returns a boolean if a field has been set.
func (o *FieldDescribe) HasExtraTypeInfo() bool {
	if o != nil && o.ExtraTypeInfo.IsSet() {
		return true
	}

	return false
}

// SetExtraTypeInfo gets a reference to the given NullableString and assigns it to the ExtraTypeInfo field.
func (o *FieldDescribe) SetExtraTypeInfo(v string) {
	o.ExtraTypeInfo.Set(&v)
}

// SetExtraTypeInfoNil sets the value for ExtraTypeInfo to be an explicit nil
func (o *FieldDescribe) SetExtraTypeInfoNil() {
	o.ExtraTypeInfo.Set(nil)
}

// UnsetExtraTypeInfo ensures that no value is present for ExtraTypeInfo, not even an explicit nil
func (o *FieldDescribe) UnsetExtraTypeInfo() {
	o.ExtraTypeInfo.Unset()
}

// GetFilterable returns the Filterable field value if set, zero value otherwise.
func (o *FieldDescribe) GetFilterable() bool {
	if o == nil || isNil(o.Filterable) {
		var ret bool
		return ret
	}
	return *o.Filterable
}

// GetFilterableOk returns a tuple with the Filterable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetFilterableOk() (*bool, bool) {
	if o == nil || isNil(o.Filterable) {
		return nil, false
	}
	return o.Filterable, true
}

// HasFilterable returns a boolean if a field has been set.
func (o *FieldDescribe) HasFilterable() bool {
	if o != nil && !isNil(o.Filterable) {
		return true
	}

	return false
}

// SetFilterable gets a reference to the given bool and assigns it to the Filterable field.
func (o *FieldDescribe) SetFilterable(v bool) {
	o.Filterable = &v
}

// GetFilteredLookupInfo returns the FilteredLookupInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetFilteredLookupInfo() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.FilteredLookupInfo
}

// GetFilteredLookupInfoOk returns a tuple with the FilteredLookupInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetFilteredLookupInfoOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.FilteredLookupInfo) {
		return map[string]interface{}{}, false
	}
	return o.FilteredLookupInfo, true
}

// HasFilteredLookupInfo returns a boolean if a field has been set.
func (o *FieldDescribe) HasFilteredLookupInfo() bool {
	if o != nil && isNil(o.FilteredLookupInfo) {
		return true
	}

	return false
}

// SetFilteredLookupInfo gets a reference to the given map[string]interface{} and assigns it to the FilteredLookupInfo field.
func (o *FieldDescribe) SetFilteredLookupInfo(v map[string]interface{}) {
	o.FilteredLookupInfo = v
}

// GetFormulaTreatNullNumberAsZero returns the FormulaTreatNullNumberAsZero field value if set, zero value otherwise.
func (o *FieldDescribe) GetFormulaTreatNullNumberAsZero() bool {
	if o == nil || isNil(o.FormulaTreatNullNumberAsZero) {
		var ret bool
		return ret
	}
	return *o.FormulaTreatNullNumberAsZero
}

// GetFormulaTreatNullNumberAsZeroOk returns a tuple with the FormulaTreatNullNumberAsZero field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetFormulaTreatNullNumberAsZeroOk() (*bool, bool) {
	if o == nil || isNil(o.FormulaTreatNullNumberAsZero) {
		return nil, false
	}
	return o.FormulaTreatNullNumberAsZero, true
}

// HasFormulaTreatNullNumberAsZero returns a boolean if a field has been set.
func (o *FieldDescribe) HasFormulaTreatNullNumberAsZero() bool {
	if o != nil && !isNil(o.FormulaTreatNullNumberAsZero) {
		return true
	}

	return false
}

// SetFormulaTreatNullNumberAsZero gets a reference to the given bool and assigns it to the FormulaTreatNullNumberAsZero field.
func (o *FieldDescribe) SetFormulaTreatNullNumberAsZero(v bool) {
	o.FormulaTreatNullNumberAsZero = &v
}

// GetGroupable returns the Groupable field value if set, zero value otherwise.
func (o *FieldDescribe) GetGroupable() bool {
	if o == nil || isNil(o.Groupable) {
		var ret bool
		return ret
	}
	return *o.Groupable
}

// GetGroupableOk returns a tuple with the Groupable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetGroupableOk() (*bool, bool) {
	if o == nil || isNil(o.Groupable) {
		return nil, false
	}
	return o.Groupable, true
}

// HasGroupable returns a boolean if a field has been set.
func (o *FieldDescribe) HasGroupable() bool {
	if o != nil && !isNil(o.Groupable) {
		return true
	}

	return false
}

// SetGroupable gets a reference to the given bool and assigns it to the Groupable field.
func (o *FieldDescribe) SetGroupable(v bool) {
	o.Groupable = &v
}

// GetHighScaleNumber returns the HighScaleNumber field value if set, zero value otherwise.
func (o *FieldDescribe) GetHighScaleNumber() bool {
	if o == nil || isNil(o.HighScaleNumber) {
		var ret bool
		return ret
	}
	return *o.HighScaleNumber
}

// GetHighScaleNumberOk returns a tuple with the HighScaleNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetHighScaleNumberOk() (*bool, bool) {
	if o == nil || isNil(o.HighScaleNumber) {
		return nil, false
	}
	return o.HighScaleNumber, true
}

// HasHighScaleNumber returns a boolean if a field has been set.
func (o *FieldDescribe) HasHighScaleNumber() bool {
	if o != nil && !isNil(o.HighScaleNumber) {
		return true
	}

	return false
}

// SetHighScaleNumber gets a reference to the given bool and assigns it to the HighScaleNumber field.
func (o *FieldDescribe) SetHighScaleNumber(v bool) {
	o.HighScaleNumber = &v
}

// GetHtmlFormatted returns the HtmlFormatted field value if set, zero value otherwise.
func (o *FieldDescribe) GetHtmlFormatted() bool {
	if o == nil || isNil(o.HtmlFormatted) {
		var ret bool
		return ret
	}
	return *o.HtmlFormatted
}

// GetHtmlFormattedOk returns a tuple with the HtmlFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetHtmlFormattedOk() (*bool, bool) {
	if o == nil || isNil(o.HtmlFormatted) {
		return nil, false
	}
	return o.HtmlFormatted, true
}

// HasHtmlFormatted returns a boolean if a field has been set.
func (o *FieldDescribe) HasHtmlFormatted() bool {
	if o != nil && !isNil(o.HtmlFormatted) {
		return true
	}

	return false
}

// SetHtmlFormatted gets a reference to the given bool and assigns it to the HtmlFormatted field.
func (o *FieldDescribe) SetHtmlFormatted(v bool) {
	o.HtmlFormatted = &v
}

// GetIdLookup returns the IdLookup field value if set, zero value otherwise.
func (o *FieldDescribe) GetIdLookup() bool {
	if o == nil || isNil(o.IdLookup) {
		var ret bool
		return ret
	}
	return *o.IdLookup
}

// GetIdLookupOk returns a tuple with the IdLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetIdLookupOk() (*bool, bool) {
	if o == nil || isNil(o.IdLookup) {
		return nil, false
	}
	return o.IdLookup, true
}

// HasIdLookup returns a boolean if a field has been set.
func (o *FieldDescribe) HasIdLookup() bool {
	if o != nil && !isNil(o.IdLookup) {
		return true
	}

	return false
}

// SetIdLookup gets a reference to the given bool and assigns it to the IdLookup field.
func (o *FieldDescribe) SetIdLookup(v bool) {
	o.IdLookup = &v
}

// GetInlineHelpText returns the InlineHelpText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetInlineHelpText() string {
	if o == nil || isNil(o.InlineHelpText.Get()) {
		var ret string
		return ret
	}
	return *o.InlineHelpText.Get()
}

// GetInlineHelpTextOk returns a tuple with the InlineHelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetInlineHelpTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InlineHelpText.Get(), o.InlineHelpText.IsSet()
}

// HasInlineHelpText returns a boolean if a field has been set.
func (o *FieldDescribe) HasInlineHelpText() bool {
	if o != nil && o.InlineHelpText.IsSet() {
		return true
	}

	return false
}

// SetInlineHelpText gets a reference to the given NullableString and assigns it to the InlineHelpText field.
func (o *FieldDescribe) SetInlineHelpText(v string) {
	o.InlineHelpText.Set(&v)
}

// SetInlineHelpTextNil sets the value for InlineHelpText to be an explicit nil
func (o *FieldDescribe) SetInlineHelpTextNil() {
	o.InlineHelpText.Set(nil)
}

// UnsetInlineHelpText ensures that no value is present for InlineHelpText, not even an explicit nil
func (o *FieldDescribe) UnsetInlineHelpText() {
	o.InlineHelpText.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FieldDescribe) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FieldDescribe) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FieldDescribe) SetLabel(v string) {
	o.Label = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *FieldDescribe) GetLength() int32 {
	if o == nil || isNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetLengthOk() (*int32, bool) {
	if o == nil || isNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *FieldDescribe) HasLength() bool {
	if o != nil && !isNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *FieldDescribe) SetLength(v int32) {
	o.Length = &v
}

// GetMask returns the Mask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetMask() string {
	if o == nil || isNil(o.Mask.Get()) {
		var ret string
		return ret
	}
	return *o.Mask.Get()
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetMaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mask.Get(), o.Mask.IsSet()
}

// HasMask returns a boolean if a field has been set.
func (o *FieldDescribe) HasMask() bool {
	if o != nil && o.Mask.IsSet() {
		return true
	}

	return false
}

// SetMask gets a reference to the given NullableString and assigns it to the Mask field.
func (o *FieldDescribe) SetMask(v string) {
	o.Mask.Set(&v)
}

// SetMaskNil sets the value for Mask to be an explicit nil
func (o *FieldDescribe) SetMaskNil() {
	o.Mask.Set(nil)
}

// UnsetMask ensures that no value is present for Mask, not even an explicit nil
func (o *FieldDescribe) UnsetMask() {
	o.Mask.Unset()
}

// GetMaskType returns the MaskType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetMaskType() string {
	if o == nil || isNil(o.MaskType.Get()) {
		var ret string
		return ret
	}
	return *o.MaskType.Get()
}

// GetMaskTypeOk returns a tuple with the MaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetMaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskType.Get(), o.MaskType.IsSet()
}

// HasMaskType returns a boolean if a field has been set.
func (o *FieldDescribe) HasMaskType() bool {
	if o != nil && o.MaskType.IsSet() {
		return true
	}

	return false
}

// SetMaskType gets a reference to the given NullableString and assigns it to the MaskType field.
func (o *FieldDescribe) SetMaskType(v string) {
	o.MaskType.Set(&v)
}

// SetMaskTypeNil sets the value for MaskType to be an explicit nil
func (o *FieldDescribe) SetMaskTypeNil() {
	o.MaskType.Set(nil)
}

// UnsetMaskType ensures that no value is present for MaskType, not even an explicit nil
func (o *FieldDescribe) UnsetMaskType() {
	o.MaskType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FieldDescribe) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FieldDescribe) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FieldDescribe) SetName(v string) {
	o.Name = &v
}

// GetNameField returns the NameField field value if set, zero value otherwise.
func (o *FieldDescribe) GetNameField() bool {
	if o == nil || isNil(o.NameField) {
		var ret bool
		return ret
	}
	return *o.NameField
}

// GetNameFieldOk returns a tuple with the NameField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetNameFieldOk() (*bool, bool) {
	if o == nil || isNil(o.NameField) {
		return nil, false
	}
	return o.NameField, true
}

// HasNameField returns a boolean if a field has been set.
func (o *FieldDescribe) HasNameField() bool {
	if o != nil && !isNil(o.NameField) {
		return true
	}

	return false
}

// SetNameField gets a reference to the given bool and assigns it to the NameField field.
func (o *FieldDescribe) SetNameField(v bool) {
	o.NameField = &v
}

// GetNamePointing returns the NamePointing field value if set, zero value otherwise.
func (o *FieldDescribe) GetNamePointing() bool {
	if o == nil || isNil(o.NamePointing) {
		var ret bool
		return ret
	}
	return *o.NamePointing
}

// GetNamePointingOk returns a tuple with the NamePointing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetNamePointingOk() (*bool, bool) {
	if o == nil || isNil(o.NamePointing) {
		return nil, false
	}
	return o.NamePointing, true
}

// HasNamePointing returns a boolean if a field has been set.
func (o *FieldDescribe) HasNamePointing() bool {
	if o != nil && !isNil(o.NamePointing) {
		return true
	}

	return false
}

// SetNamePointing gets a reference to the given bool and assigns it to the NamePointing field.
func (o *FieldDescribe) SetNamePointing(v bool) {
	o.NamePointing = &v
}

// GetNillable returns the Nillable field value if set, zero value otherwise.
func (o *FieldDescribe) GetNillable() bool {
	if o == nil || isNil(o.Nillable) {
		var ret bool
		return ret
	}
	return *o.Nillable
}

// GetNillableOk returns a tuple with the Nillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetNillableOk() (*bool, bool) {
	if o == nil || isNil(o.Nillable) {
		return nil, false
	}
	return o.Nillable, true
}

// HasNillable returns a boolean if a field has been set.
func (o *FieldDescribe) HasNillable() bool {
	if o != nil && !isNil(o.Nillable) {
		return true
	}

	return false
}

// SetNillable gets a reference to the given bool and assigns it to the Nillable field.
func (o *FieldDescribe) SetNillable(v bool) {
	o.Nillable = &v
}

// GetPermissionable returns the Permissionable field value if set, zero value otherwise.
func (o *FieldDescribe) GetPermissionable() bool {
	if o == nil || isNil(o.Permissionable) {
		var ret bool
		return ret
	}
	return *o.Permissionable
}

// GetPermissionableOk returns a tuple with the Permissionable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetPermissionableOk() (*bool, bool) {
	if o == nil || isNil(o.Permissionable) {
		return nil, false
	}
	return o.Permissionable, true
}

// HasPermissionable returns a boolean if a field has been set.
func (o *FieldDescribe) HasPermissionable() bool {
	if o != nil && !isNil(o.Permissionable) {
		return true
	}

	return false
}

// SetPermissionable gets a reference to the given bool and assigns it to the Permissionable field.
func (o *FieldDescribe) SetPermissionable(v bool) {
	o.Permissionable = &v
}

// GetPicklistValues returns the PicklistValues field value if set, zero value otherwise.
func (o *FieldDescribe) GetPicklistValues() []FieldDescribePicklist {
	if o == nil || isNil(o.PicklistValues) {
		var ret []FieldDescribePicklist
		return ret
	}
	return o.PicklistValues
}

// GetPicklistValuesOk returns a tuple with the PicklistValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetPicklistValuesOk() ([]FieldDescribePicklist, bool) {
	if o == nil || isNil(o.PicklistValues) {
		return nil, false
	}
	return o.PicklistValues, true
}

// HasPicklistValues returns a boolean if a field has been set.
func (o *FieldDescribe) HasPicklistValues() bool {
	if o != nil && !isNil(o.PicklistValues) {
		return true
	}

	return false
}

// SetPicklistValues gets a reference to the given []FieldDescribePicklist and assigns it to the PicklistValues field.
func (o *FieldDescribe) SetPicklistValues(v []FieldDescribePicklist) {
	o.PicklistValues = v
}

// GetPolymorphicForeignKey returns the PolymorphicForeignKey field value if set, zero value otherwise.
func (o *FieldDescribe) GetPolymorphicForeignKey() bool {
	if o == nil || isNil(o.PolymorphicForeignKey) {
		var ret bool
		return ret
	}
	return *o.PolymorphicForeignKey
}

// GetPolymorphicForeignKeyOk returns a tuple with the PolymorphicForeignKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetPolymorphicForeignKeyOk() (*bool, bool) {
	if o == nil || isNil(o.PolymorphicForeignKey) {
		return nil, false
	}
	return o.PolymorphicForeignKey, true
}

// HasPolymorphicForeignKey returns a boolean if a field has been set.
func (o *FieldDescribe) HasPolymorphicForeignKey() bool {
	if o != nil && !isNil(o.PolymorphicForeignKey) {
		return true
	}

	return false
}

// SetPolymorphicForeignKey gets a reference to the given bool and assigns it to the PolymorphicForeignKey field.
func (o *FieldDescribe) SetPolymorphicForeignKey(v bool) {
	o.PolymorphicForeignKey = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise.
func (o *FieldDescribe) GetPrecision() int32 {
	if o == nil || isNil(o.Precision) {
		var ret int32
		return ret
	}
	return *o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetPrecisionOk() (*int32, bool) {
	if o == nil || isNil(o.Precision) {
		return nil, false
	}
	return o.Precision, true
}

// HasPrecision returns a boolean if a field has been set.
func (o *FieldDescribe) HasPrecision() bool {
	if o != nil && !isNil(o.Precision) {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given int32 and assigns it to the Precision field.
func (o *FieldDescribe) SetPrecision(v int32) {
	o.Precision = &v
}

// GetQueryByDistance returns the QueryByDistance field value if set, zero value otherwise.
func (o *FieldDescribe) GetQueryByDistance() bool {
	if o == nil || isNil(o.QueryByDistance) {
		var ret bool
		return ret
	}
	return *o.QueryByDistance
}

// GetQueryByDistanceOk returns a tuple with the QueryByDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetQueryByDistanceOk() (*bool, bool) {
	if o == nil || isNil(o.QueryByDistance) {
		return nil, false
	}
	return o.QueryByDistance, true
}

// HasQueryByDistance returns a boolean if a field has been set.
func (o *FieldDescribe) HasQueryByDistance() bool {
	if o != nil && !isNil(o.QueryByDistance) {
		return true
	}

	return false
}

// SetQueryByDistance gets a reference to the given bool and assigns it to the QueryByDistance field.
func (o *FieldDescribe) SetQueryByDistance(v bool) {
	o.QueryByDistance = &v
}

// GetReferenceTargetField returns the ReferenceTargetField field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetReferenceTargetField() string {
	if o == nil || isNil(o.ReferenceTargetField.Get()) {
		var ret string
		return ret
	}
	return *o.ReferenceTargetField.Get()
}

// GetReferenceTargetFieldOk returns a tuple with the ReferenceTargetField field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetReferenceTargetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferenceTargetField.Get(), o.ReferenceTargetField.IsSet()
}

// HasReferenceTargetField returns a boolean if a field has been set.
func (o *FieldDescribe) HasReferenceTargetField() bool {
	if o != nil && o.ReferenceTargetField.IsSet() {
		return true
	}

	return false
}

// SetReferenceTargetField gets a reference to the given NullableString and assigns it to the ReferenceTargetField field.
func (o *FieldDescribe) SetReferenceTargetField(v string) {
	o.ReferenceTargetField.Set(&v)
}

// SetReferenceTargetFieldNil sets the value for ReferenceTargetField to be an explicit nil
func (o *FieldDescribe) SetReferenceTargetFieldNil() {
	o.ReferenceTargetField.Set(nil)
}

// UnsetReferenceTargetField ensures that no value is present for ReferenceTargetField, not even an explicit nil
func (o *FieldDescribe) UnsetReferenceTargetField() {
	o.ReferenceTargetField.Unset()
}

// GetReferenceTo returns the ReferenceTo field value if set, zero value otherwise.
func (o *FieldDescribe) GetReferenceTo() []string {
	if o == nil || isNil(o.ReferenceTo) {
		var ret []string
		return ret
	}
	return o.ReferenceTo
}

// GetReferenceToOk returns a tuple with the ReferenceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetReferenceToOk() ([]string, bool) {
	if o == nil || isNil(o.ReferenceTo) {
		return nil, false
	}
	return o.ReferenceTo, true
}

// HasReferenceTo returns a boolean if a field has been set.
func (o *FieldDescribe) HasReferenceTo() bool {
	if o != nil && !isNil(o.ReferenceTo) {
		return true
	}

	return false
}

// SetReferenceTo gets a reference to the given []string and assigns it to the ReferenceTo field.
func (o *FieldDescribe) SetReferenceTo(v []string) {
	o.ReferenceTo = v
}

// GetRelationshipName returns the RelationshipName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetRelationshipName() string {
	if o == nil || isNil(o.RelationshipName.Get()) {
		var ret string
		return ret
	}
	return *o.RelationshipName.Get()
}

// GetRelationshipNameOk returns a tuple with the RelationshipName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetRelationshipNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelationshipName.Get(), o.RelationshipName.IsSet()
}

// HasRelationshipName returns a boolean if a field has been set.
func (o *FieldDescribe) HasRelationshipName() bool {
	if o != nil && o.RelationshipName.IsSet() {
		return true
	}

	return false
}

// SetRelationshipName gets a reference to the given NullableString and assigns it to the RelationshipName field.
func (o *FieldDescribe) SetRelationshipName(v string) {
	o.RelationshipName.Set(&v)
}

// SetRelationshipNameNil sets the value for RelationshipName to be an explicit nil
func (o *FieldDescribe) SetRelationshipNameNil() {
	o.RelationshipName.Set(nil)
}

// UnsetRelationshipName ensures that no value is present for RelationshipName, not even an explicit nil
func (o *FieldDescribe) UnsetRelationshipName() {
	o.RelationshipName.Unset()
}

// GetRelationshipOrder returns the RelationshipOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDescribe) GetRelationshipOrder() int32 {
	if o == nil || isNil(o.RelationshipOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.RelationshipOrder.Get()
}

// GetRelationshipOrderOk returns a tuple with the RelationshipOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDescribe) GetRelationshipOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelationshipOrder.Get(), o.RelationshipOrder.IsSet()
}

// HasRelationshipOrder returns a boolean if a field has been set.
func (o *FieldDescribe) HasRelationshipOrder() bool {
	if o != nil && o.RelationshipOrder.IsSet() {
		return true
	}

	return false
}

// SetRelationshipOrder gets a reference to the given NullableInt32 and assigns it to the RelationshipOrder field.
func (o *FieldDescribe) SetRelationshipOrder(v int32) {
	o.RelationshipOrder.Set(&v)
}

// SetRelationshipOrderNil sets the value for RelationshipOrder to be an explicit nil
func (o *FieldDescribe) SetRelationshipOrderNil() {
	o.RelationshipOrder.Set(nil)
}

// UnsetRelationshipOrder ensures that no value is present for RelationshipOrder, not even an explicit nil
func (o *FieldDescribe) UnsetRelationshipOrder() {
	o.RelationshipOrder.Unset()
}

// GetRestrictedDelete returns the RestrictedDelete field value if set, zero value otherwise.
func (o *FieldDescribe) GetRestrictedDelete() bool {
	if o == nil || isNil(o.RestrictedDelete) {
		var ret bool
		return ret
	}
	return *o.RestrictedDelete
}

// GetRestrictedDeleteOk returns a tuple with the RestrictedDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetRestrictedDeleteOk() (*bool, bool) {
	if o == nil || isNil(o.RestrictedDelete) {
		return nil, false
	}
	return o.RestrictedDelete, true
}

// HasRestrictedDelete returns a boolean if a field has been set.
func (o *FieldDescribe) HasRestrictedDelete() bool {
	if o != nil && !isNil(o.RestrictedDelete) {
		return true
	}

	return false
}

// SetRestrictedDelete gets a reference to the given bool and assigns it to the RestrictedDelete field.
func (o *FieldDescribe) SetRestrictedDelete(v bool) {
	o.RestrictedDelete = &v
}

// GetRestrictedPicklist returns the RestrictedPicklist field value if set, zero value otherwise.
func (o *FieldDescribe) GetRestrictedPicklist() bool {
	if o == nil || isNil(o.RestrictedPicklist) {
		var ret bool
		return ret
	}
	return *o.RestrictedPicklist
}

// GetRestrictedPicklistOk returns a tuple with the RestrictedPicklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetRestrictedPicklistOk() (*bool, bool) {
	if o == nil || isNil(o.RestrictedPicklist) {
		return nil, false
	}
	return o.RestrictedPicklist, true
}

// HasRestrictedPicklist returns a boolean if a field has been set.
func (o *FieldDescribe) HasRestrictedPicklist() bool {
	if o != nil && !isNil(o.RestrictedPicklist) {
		return true
	}

	return false
}

// SetRestrictedPicklist gets a reference to the given bool and assigns it to the RestrictedPicklist field.
func (o *FieldDescribe) SetRestrictedPicklist(v bool) {
	o.RestrictedPicklist = &v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *FieldDescribe) GetScale() int32 {
	if o == nil || isNil(o.Scale) {
		var ret int32
		return ret
	}
	return *o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetScaleOk() (*int32, bool) {
	if o == nil || isNil(o.Scale) {
		return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *FieldDescribe) HasScale() bool {
	if o != nil && !isNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given int32 and assigns it to the Scale field.
func (o *FieldDescribe) SetScale(v int32) {
	o.Scale = &v
}

// GetSearchPrefilterable returns the SearchPrefilterable field value if set, zero value otherwise.
func (o *FieldDescribe) GetSearchPrefilterable() bool {
	if o == nil || isNil(o.SearchPrefilterable) {
		var ret bool
		return ret
	}
	return *o.SearchPrefilterable
}

// GetSearchPrefilterableOk returns a tuple with the SearchPrefilterable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetSearchPrefilterableOk() (*bool, bool) {
	if o == nil || isNil(o.SearchPrefilterable) {
		return nil, false
	}
	return o.SearchPrefilterable, true
}

// HasSearchPrefilterable returns a boolean if a field has been set.
func (o *FieldDescribe) HasSearchPrefilterable() bool {
	if o != nil && !isNil(o.SearchPrefilterable) {
		return true
	}

	return false
}

// SetSearchPrefilterable gets a reference to the given bool and assigns it to the SearchPrefilterable field.
func (o *FieldDescribe) SetSearchPrefilterable(v bool) {
	o.SearchPrefilterable = &v
}

// GetSoapType returns the SoapType field value if set, zero value otherwise.
func (o *FieldDescribe) GetSoapType() string {
	if o == nil || isNil(o.SoapType) {
		var ret string
		return ret
	}
	return *o.SoapType
}

// GetSoapTypeOk returns a tuple with the SoapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetSoapTypeOk() (*string, bool) {
	if o == nil || isNil(o.SoapType) {
		return nil, false
	}
	return o.SoapType, true
}

// HasSoapType returns a boolean if a field has been set.
func (o *FieldDescribe) HasSoapType() bool {
	if o != nil && !isNil(o.SoapType) {
		return true
	}

	return false
}

// SetSoapType gets a reference to the given string and assigns it to the SoapType field.
func (o *FieldDescribe) SetSoapType(v string) {
	o.SoapType = &v
}

// GetSortable returns the Sortable field value if set, zero value otherwise.
func (o *FieldDescribe) GetSortable() bool {
	if o == nil || isNil(o.Sortable) {
		var ret bool
		return ret
	}
	return *o.Sortable
}

// GetSortableOk returns a tuple with the Sortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetSortableOk() (*bool, bool) {
	if o == nil || isNil(o.Sortable) {
		return nil, false
	}
	return o.Sortable, true
}

// HasSortable returns a boolean if a field has been set.
func (o *FieldDescribe) HasSortable() bool {
	if o != nil && !isNil(o.Sortable) {
		return true
	}

	return false
}

// SetSortable gets a reference to the given bool and assigns it to the Sortable field.
func (o *FieldDescribe) SetSortable(v bool) {
	o.Sortable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FieldDescribe) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FieldDescribe) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FieldDescribe) SetType(v string) {
	o.Type = &v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *FieldDescribe) GetUnique() bool {
	if o == nil || isNil(o.Unique) {
		var ret bool
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetUniqueOk() (*bool, bool) {
	if o == nil || isNil(o.Unique) {
		return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *FieldDescribe) HasUnique() bool {
	if o != nil && !isNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given bool and assigns it to the Unique field.
func (o *FieldDescribe) SetUnique(v bool) {
	o.Unique = &v
}

// GetUpdateable returns the Updateable field value if set, zero value otherwise.
func (o *FieldDescribe) GetUpdateable() bool {
	if o == nil || isNil(o.Updateable) {
		var ret bool
		return ret
	}
	return *o.Updateable
}

// GetUpdateableOk returns a tuple with the Updateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetUpdateableOk() (*bool, bool) {
	if o == nil || isNil(o.Updateable) {
		return nil, false
	}
	return o.Updateable, true
}

// HasUpdateable returns a boolean if a field has been set.
func (o *FieldDescribe) HasUpdateable() bool {
	if o != nil && !isNil(o.Updateable) {
		return true
	}

	return false
}

// SetUpdateable gets a reference to the given bool and assigns it to the Updateable field.
func (o *FieldDescribe) SetUpdateable(v bool) {
	o.Updateable = &v
}

// GetWriteRequiresMasterRead returns the WriteRequiresMasterRead field value if set, zero value otherwise.
func (o *FieldDescribe) GetWriteRequiresMasterRead() bool {
	if o == nil || isNil(o.WriteRequiresMasterRead) {
		var ret bool
		return ret
	}
	return *o.WriteRequiresMasterRead
}

// GetWriteRequiresMasterReadOk returns a tuple with the WriteRequiresMasterRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDescribe) GetWriteRequiresMasterReadOk() (*bool, bool) {
	if o == nil || isNil(o.WriteRequiresMasterRead) {
		return nil, false
	}
	return o.WriteRequiresMasterRead, true
}

// HasWriteRequiresMasterRead returns a boolean if a field has been set.
func (o *FieldDescribe) HasWriteRequiresMasterRead() bool {
	if o != nil && !isNil(o.WriteRequiresMasterRead) {
		return true
	}

	return false
}

// SetWriteRequiresMasterRead gets a reference to the given bool and assigns it to the WriteRequiresMasterRead field.
func (o *FieldDescribe) SetWriteRequiresMasterRead(v bool) {
	o.WriteRequiresMasterRead = &v
}

func (o FieldDescribe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Aggregatable) {
		toSerialize["aggregatable"] = o.Aggregatable
	}
	if !isNil(o.AiPredictionField) {
		toSerialize["aiPredictionField"] = o.AiPredictionField
	}
	if !isNil(o.AutoNumber) {
		toSerialize["autoNumber"] = o.AutoNumber
	}
	if !isNil(o.ByteLength) {
		toSerialize["byteLength"] = o.ByteLength
	}
	if !isNil(o.Calculated) {
		toSerialize["calculated"] = o.Calculated
	}
	if o.CalculatedFormula.IsSet() {
		toSerialize["calculatedFormula"] = o.CalculatedFormula.Get()
	}
	if !isNil(o.CascadeDelete) {
		toSerialize["cascadeDelete"] = o.CascadeDelete
	}
	if !isNil(o.CaseSensitive) {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}
	if o.CompoundFieldName.IsSet() {
		toSerialize["compoundFieldName"] = o.CompoundFieldName.Get()
	}
	if o.ControllerName.IsSet() {
		toSerialize["controllerName"] = o.ControllerName.Get()
	}
	if !isNil(o.Createable) {
		toSerialize["createable"] = o.Createable
	}
	if !isNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.DefaultValueFormula.IsSet() {
		toSerialize["defaultValueFormula"] = o.DefaultValueFormula.Get()
	}
	if !isNil(o.DefaultedOnCreate) {
		toSerialize["defaultedOnCreate"] = o.DefaultedOnCreate
	}
	if !isNil(o.DependentPicklist) {
		toSerialize["dependentPicklist"] = o.DependentPicklist
	}
	if !isNil(o.DeprecatedAndHidden) {
		toSerialize["deprecatedAndHidden"] = o.DeprecatedAndHidden
	}
	if !isNil(o.Digits) {
		toSerialize["digits"] = o.Digits
	}
	if !isNil(o.DisplayLocationInDecimal) {
		toSerialize["displayLocationInDecimal"] = o.DisplayLocationInDecimal
	}
	if !isNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	if !isNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.ExtraTypeInfo.IsSet() {
		toSerialize["extraTypeInfo"] = o.ExtraTypeInfo.Get()
	}
	if !isNil(o.Filterable) {
		toSerialize["filterable"] = o.Filterable
	}
	if o.FilteredLookupInfo != nil {
		toSerialize["filteredLookupInfo"] = o.FilteredLookupInfo
	}
	if !isNil(o.FormulaTreatNullNumberAsZero) {
		toSerialize["formulaTreatNullNumberAsZero"] = o.FormulaTreatNullNumberAsZero
	}
	if !isNil(o.Groupable) {
		toSerialize["groupable"] = o.Groupable
	}
	if !isNil(o.HighScaleNumber) {
		toSerialize["highScaleNumber"] = o.HighScaleNumber
	}
	if !isNil(o.HtmlFormatted) {
		toSerialize["htmlFormatted"] = o.HtmlFormatted
	}
	if !isNil(o.IdLookup) {
		toSerialize["idLookup"] = o.IdLookup
	}
	if o.InlineHelpText.IsSet() {
		toSerialize["inlineHelpText"] = o.InlineHelpText.Get()
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if o.Mask.IsSet() {
		toSerialize["mask"] = o.Mask.Get()
	}
	if o.MaskType.IsSet() {
		toSerialize["maskType"] = o.MaskType.Get()
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NameField) {
		toSerialize["nameField"] = o.NameField
	}
	if !isNil(o.NamePointing) {
		toSerialize["namePointing"] = o.NamePointing
	}
	if !isNil(o.Nillable) {
		toSerialize["nillable"] = o.Nillable
	}
	if !isNil(o.Permissionable) {
		toSerialize["permissionable"] = o.Permissionable
	}
	if !isNil(o.PicklistValues) {
		toSerialize["picklistValues"] = o.PicklistValues
	}
	if !isNil(o.PolymorphicForeignKey) {
		toSerialize["polymorphicForeignKey"] = o.PolymorphicForeignKey
	}
	if !isNil(o.Precision) {
		toSerialize["precision"] = o.Precision
	}
	if !isNil(o.QueryByDistance) {
		toSerialize["queryByDistance"] = o.QueryByDistance
	}
	if o.ReferenceTargetField.IsSet() {
		toSerialize["referenceTargetField"] = o.ReferenceTargetField.Get()
	}
	if !isNil(o.ReferenceTo) {
		toSerialize["referenceTo"] = o.ReferenceTo
	}
	if o.RelationshipName.IsSet() {
		toSerialize["relationshipName"] = o.RelationshipName.Get()
	}
	if o.RelationshipOrder.IsSet() {
		toSerialize["relationshipOrder"] = o.RelationshipOrder.Get()
	}
	if !isNil(o.RestrictedDelete) {
		toSerialize["restrictedDelete"] = o.RestrictedDelete
	}
	if !isNil(o.RestrictedPicklist) {
		toSerialize["restrictedPicklist"] = o.RestrictedPicklist
	}
	if !isNil(o.Scale) {
		toSerialize["scale"] = o.Scale
	}
	if !isNil(o.SearchPrefilterable) {
		toSerialize["searchPrefilterable"] = o.SearchPrefilterable
	}
	if !isNil(o.SoapType) {
		toSerialize["soapType"] = o.SoapType
	}
	if !isNil(o.Sortable) {
		toSerialize["sortable"] = o.Sortable
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Unique) {
		toSerialize["unique"] = o.Unique
	}
	if !isNil(o.Updateable) {
		toSerialize["updateable"] = o.Updateable
	}
	if !isNil(o.WriteRequiresMasterRead) {
		toSerialize["writeRequiresMasterRead"] = o.WriteRequiresMasterRead
	}
	return json.Marshal(toSerialize)
}

type NullableFieldDescribe struct {
	value *FieldDescribe
	isSet bool
}

func (v NullableFieldDescribe) Get() *FieldDescribe {
	return v.value
}

func (v *NullableFieldDescribe) Set(val *FieldDescribe) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldDescribe) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldDescribe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldDescribe(val *FieldDescribe) *NullableFieldDescribe {
	return &NullableFieldDescribe{value: val, isSet: true}
}

func (v NullableFieldDescribe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldDescribe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
