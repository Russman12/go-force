/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
)

// CreateRecordResult struct for CreateRecordResult
type CreateRecordResult struct {
	Id      NullableString `json:"id,omitempty"`
	Errors  []interface{}  `json:"errors,omitempty"`
	Success *bool          `json:"success,omitempty"`
}

// NewCreateRecordResult instantiates a new CreateRecordResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRecordResult() *CreateRecordResult {
	this := CreateRecordResult{}
	return &this
}

// NewCreateRecordResultWithDefaults instantiates a new CreateRecordResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRecordResultWithDefaults() *CreateRecordResult {
	this := CreateRecordResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRecordResult) GetId() string {
	if o == nil || isNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRecordResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CreateRecordResult) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CreateRecordResult) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *CreateRecordResult) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CreateRecordResult) UnsetId() {
	o.Id.Unset()
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CreateRecordResult) GetErrors() []interface{} {
	if o == nil || isNil(o.Errors) {
		var ret []interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordResult) GetErrorsOk() ([]interface{}, bool) {
	if o == nil || isNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CreateRecordResult) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []interface{} and assigns it to the Errors field.
func (o *CreateRecordResult) SetErrors(v []interface{}) {
	o.Errors = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *CreateRecordResult) GetSuccess() bool {
	if o == nil || isNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordResult) GetSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *CreateRecordResult) HasSuccess() bool {
	if o != nil && !isNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *CreateRecordResult) SetSuccess(v bool) {
	o.Success = &v
}

func (o CreateRecordResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !isNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableCreateRecordResult struct {
	value *CreateRecordResult
	isSet bool
}

func (v NullableCreateRecordResult) Get() *CreateRecordResult {
	return v.value
}

func (v *NullableCreateRecordResult) Set(val *CreateRecordResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordResult(val *CreateRecordResult) *NullableCreateRecordResult {
	return &NullableCreateRecordResult{value: val, isSet: true}
}

func (v NullableCreateRecordResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
