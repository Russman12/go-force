/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// TestResults struct for TestResults
type TestResults struct {
	ApexLogId *string `json:"apexLogId,omitempty"`
	CodeCoverage []CodeCoverage `json:"codeCoverage,omitempty"`
	CodeCoverageWarnings []CodeCoverageWarning `json:"codeCoverageWarnings,omitempty"`
	Failures []map[string]interface{} `json:"failures,omitempty"`
	FlowCoverage []FlowCoverage `json:"flowCoverage,omitempty"`
	FlowCoverageWarnings []map[string]interface{} `json:"flowCoverageWarnings,omitempty"`
	NumFailures *int32 `json:"numFailures,omitempty"`
	NumTestsRun *int32 `json:"numTestsRun,omitempty"`
	Successes []TestResultsSuccess `json:"successes,omitempty"`
	TotalTime *int32 `json:"totalTime,omitempty"`
}

// NewTestResults instantiates a new TestResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResults() *TestResults {
	this := TestResults{}
	return &this
}

// NewTestResultsWithDefaults instantiates a new TestResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultsWithDefaults() *TestResults {
	this := TestResults{}
	return &this
}

// GetApexLogId returns the ApexLogId field value if set, zero value otherwise.
func (o *TestResults) GetApexLogId() string {
	if o == nil || isNil(o.ApexLogId) {
		var ret string
		return ret
	}
	return *o.ApexLogId
}

// GetApexLogIdOk returns a tuple with the ApexLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetApexLogIdOk() (*string, bool) {
	if o == nil || isNil(o.ApexLogId) {
    return nil, false
	}
	return o.ApexLogId, true
}

// HasApexLogId returns a boolean if a field has been set.
func (o *TestResults) HasApexLogId() bool {
	if o != nil && !isNil(o.ApexLogId) {
		return true
	}

	return false
}

// SetApexLogId gets a reference to the given string and assigns it to the ApexLogId field.
func (o *TestResults) SetApexLogId(v string) {
	o.ApexLogId = &v
}

// GetCodeCoverage returns the CodeCoverage field value if set, zero value otherwise.
func (o *TestResults) GetCodeCoverage() []CodeCoverage {
	if o == nil || isNil(o.CodeCoverage) {
		var ret []CodeCoverage
		return ret
	}
	return o.CodeCoverage
}

// GetCodeCoverageOk returns a tuple with the CodeCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetCodeCoverageOk() ([]CodeCoverage, bool) {
	if o == nil || isNil(o.CodeCoverage) {
    return nil, false
	}
	return o.CodeCoverage, true
}

// HasCodeCoverage returns a boolean if a field has been set.
func (o *TestResults) HasCodeCoverage() bool {
	if o != nil && !isNil(o.CodeCoverage) {
		return true
	}

	return false
}

// SetCodeCoverage gets a reference to the given []CodeCoverage and assigns it to the CodeCoverage field.
func (o *TestResults) SetCodeCoverage(v []CodeCoverage) {
	o.CodeCoverage = v
}

// GetCodeCoverageWarnings returns the CodeCoverageWarnings field value if set, zero value otherwise.
func (o *TestResults) GetCodeCoverageWarnings() []CodeCoverageWarning {
	if o == nil || isNil(o.CodeCoverageWarnings) {
		var ret []CodeCoverageWarning
		return ret
	}
	return o.CodeCoverageWarnings
}

// GetCodeCoverageWarningsOk returns a tuple with the CodeCoverageWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetCodeCoverageWarningsOk() ([]CodeCoverageWarning, bool) {
	if o == nil || isNil(o.CodeCoverageWarnings) {
    return nil, false
	}
	return o.CodeCoverageWarnings, true
}

// HasCodeCoverageWarnings returns a boolean if a field has been set.
func (o *TestResults) HasCodeCoverageWarnings() bool {
	if o != nil && !isNil(o.CodeCoverageWarnings) {
		return true
	}

	return false
}

// SetCodeCoverageWarnings gets a reference to the given []CodeCoverageWarning and assigns it to the CodeCoverageWarnings field.
func (o *TestResults) SetCodeCoverageWarnings(v []CodeCoverageWarning) {
	o.CodeCoverageWarnings = v
}

// GetFailures returns the Failures field value if set, zero value otherwise.
func (o *TestResults) GetFailures() []map[string]interface{} {
	if o == nil || isNil(o.Failures) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetFailuresOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Failures) {
    return nil, false
	}
	return o.Failures, true
}

// HasFailures returns a boolean if a field has been set.
func (o *TestResults) HasFailures() bool {
	if o != nil && !isNil(o.Failures) {
		return true
	}

	return false
}

// SetFailures gets a reference to the given []map[string]interface{} and assigns it to the Failures field.
func (o *TestResults) SetFailures(v []map[string]interface{}) {
	o.Failures = v
}

// GetFlowCoverage returns the FlowCoverage field value if set, zero value otherwise.
func (o *TestResults) GetFlowCoverage() []FlowCoverage {
	if o == nil || isNil(o.FlowCoverage) {
		var ret []FlowCoverage
		return ret
	}
	return o.FlowCoverage
}

// GetFlowCoverageOk returns a tuple with the FlowCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetFlowCoverageOk() ([]FlowCoverage, bool) {
	if o == nil || isNil(o.FlowCoverage) {
    return nil, false
	}
	return o.FlowCoverage, true
}

// HasFlowCoverage returns a boolean if a field has been set.
func (o *TestResults) HasFlowCoverage() bool {
	if o != nil && !isNil(o.FlowCoverage) {
		return true
	}

	return false
}

// SetFlowCoverage gets a reference to the given []FlowCoverage and assigns it to the FlowCoverage field.
func (o *TestResults) SetFlowCoverage(v []FlowCoverage) {
	o.FlowCoverage = v
}

// GetFlowCoverageWarnings returns the FlowCoverageWarnings field value if set, zero value otherwise.
func (o *TestResults) GetFlowCoverageWarnings() []map[string]interface{} {
	if o == nil || isNil(o.FlowCoverageWarnings) {
		var ret []map[string]interface{}
		return ret
	}
	return o.FlowCoverageWarnings
}

// GetFlowCoverageWarningsOk returns a tuple with the FlowCoverageWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetFlowCoverageWarningsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.FlowCoverageWarnings) {
    return nil, false
	}
	return o.FlowCoverageWarnings, true
}

// HasFlowCoverageWarnings returns a boolean if a field has been set.
func (o *TestResults) HasFlowCoverageWarnings() bool {
	if o != nil && !isNil(o.FlowCoverageWarnings) {
		return true
	}

	return false
}

// SetFlowCoverageWarnings gets a reference to the given []map[string]interface{} and assigns it to the FlowCoverageWarnings field.
func (o *TestResults) SetFlowCoverageWarnings(v []map[string]interface{}) {
	o.FlowCoverageWarnings = v
}

// GetNumFailures returns the NumFailures field value if set, zero value otherwise.
func (o *TestResults) GetNumFailures() int32 {
	if o == nil || isNil(o.NumFailures) {
		var ret int32
		return ret
	}
	return *o.NumFailures
}

// GetNumFailuresOk returns a tuple with the NumFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetNumFailuresOk() (*int32, bool) {
	if o == nil || isNil(o.NumFailures) {
    return nil, false
	}
	return o.NumFailures, true
}

// HasNumFailures returns a boolean if a field has been set.
func (o *TestResults) HasNumFailures() bool {
	if o != nil && !isNil(o.NumFailures) {
		return true
	}

	return false
}

// SetNumFailures gets a reference to the given int32 and assigns it to the NumFailures field.
func (o *TestResults) SetNumFailures(v int32) {
	o.NumFailures = &v
}

// GetNumTestsRun returns the NumTestsRun field value if set, zero value otherwise.
func (o *TestResults) GetNumTestsRun() int32 {
	if o == nil || isNil(o.NumTestsRun) {
		var ret int32
		return ret
	}
	return *o.NumTestsRun
}

// GetNumTestsRunOk returns a tuple with the NumTestsRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetNumTestsRunOk() (*int32, bool) {
	if o == nil || isNil(o.NumTestsRun) {
    return nil, false
	}
	return o.NumTestsRun, true
}

// HasNumTestsRun returns a boolean if a field has been set.
func (o *TestResults) HasNumTestsRun() bool {
	if o != nil && !isNil(o.NumTestsRun) {
		return true
	}

	return false
}

// SetNumTestsRun gets a reference to the given int32 and assigns it to the NumTestsRun field.
func (o *TestResults) SetNumTestsRun(v int32) {
	o.NumTestsRun = &v
}

// GetSuccesses returns the Successes field value if set, zero value otherwise.
func (o *TestResults) GetSuccesses() []TestResultsSuccess {
	if o == nil || isNil(o.Successes) {
		var ret []TestResultsSuccess
		return ret
	}
	return o.Successes
}

// GetSuccessesOk returns a tuple with the Successes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetSuccessesOk() ([]TestResultsSuccess, bool) {
	if o == nil || isNil(o.Successes) {
    return nil, false
	}
	return o.Successes, true
}

// HasSuccesses returns a boolean if a field has been set.
func (o *TestResults) HasSuccesses() bool {
	if o != nil && !isNil(o.Successes) {
		return true
	}

	return false
}

// SetSuccesses gets a reference to the given []TestResultsSuccess and assigns it to the Successes field.
func (o *TestResults) SetSuccesses(v []TestResultsSuccess) {
	o.Successes = v
}

// GetTotalTime returns the TotalTime field value if set, zero value otherwise.
func (o *TestResults) GetTotalTime() int32 {
	if o == nil || isNil(o.TotalTime) {
		var ret int32
		return ret
	}
	return *o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResults) GetTotalTimeOk() (*int32, bool) {
	if o == nil || isNil(o.TotalTime) {
    return nil, false
	}
	return o.TotalTime, true
}

// HasTotalTime returns a boolean if a field has been set.
func (o *TestResults) HasTotalTime() bool {
	if o != nil && !isNil(o.TotalTime) {
		return true
	}

	return false
}

// SetTotalTime gets a reference to the given int32 and assigns it to the TotalTime field.
func (o *TestResults) SetTotalTime(v int32) {
	o.TotalTime = &v
}

func (o TestResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApexLogId) {
		toSerialize["apexLogId"] = o.ApexLogId
	}
	if !isNil(o.CodeCoverage) {
		toSerialize["codeCoverage"] = o.CodeCoverage
	}
	if !isNil(o.CodeCoverageWarnings) {
		toSerialize["codeCoverageWarnings"] = o.CodeCoverageWarnings
	}
	if !isNil(o.Failures) {
		toSerialize["failures"] = o.Failures
	}
	if !isNil(o.FlowCoverage) {
		toSerialize["flowCoverage"] = o.FlowCoverage
	}
	if !isNil(o.FlowCoverageWarnings) {
		toSerialize["flowCoverageWarnings"] = o.FlowCoverageWarnings
	}
	if !isNil(o.NumFailures) {
		toSerialize["numFailures"] = o.NumFailures
	}
	if !isNil(o.NumTestsRun) {
		toSerialize["numTestsRun"] = o.NumTestsRun
	}
	if !isNil(o.Successes) {
		toSerialize["successes"] = o.Successes
	}
	if !isNil(o.TotalTime) {
		toSerialize["totalTime"] = o.TotalTime
	}
	return json.Marshal(toSerialize)
}

type NullableTestResults struct {
	value *TestResults
	isSet bool
}

func (v NullableTestResults) Get() *TestResults {
	return v.value
}

func (v *NullableTestResults) Set(val *TestResults) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResults) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResults(val *TestResults) *NullableTestResults {
	return &NullableTestResults{value: val, isSet: true}
}

func (v NullableTestResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


