/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// TestRequest struct for TestRequest
type TestRequest struct {
	Tests []TestsArrayItem `json:"tests,omitempty"`
}

// NewTestRequest instantiates a new TestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRequest() *TestRequest {
	this := TestRequest{}
	return &this
}

// NewTestRequestWithDefaults instantiates a new TestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRequestWithDefaults() *TestRequest {
	this := TestRequest{}
	return &this
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *TestRequest) GetTests() []TestsArrayItem {
	if o == nil || isNil(o.Tests) {
		var ret []TestsArrayItem
		return ret
	}
	return o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRequest) GetTestsOk() ([]TestsArrayItem, bool) {
	if o == nil || isNil(o.Tests) {
    return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *TestRequest) HasTests() bool {
	if o != nil && !isNil(o.Tests) {
		return true
	}

	return false
}

// SetTests gets a reference to the given []TestsArrayItem and assigns it to the Tests field.
func (o *TestRequest) SetTests(v []TestsArrayItem) {
	o.Tests = v
}

func (o TestRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Tests) {
		toSerialize["tests"] = o.Tests
	}
	return json.Marshal(toSerialize)
}

type NullableTestRequest struct {
	value *TestRequest
	isSet bool
}

func (v NullableTestRequest) Get() *TestRequest {
	return v.value
}

func (v *NullableTestRequest) Set(val *TestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRequest(val *TestRequest) *NullableTestRequest {
	return &NullableTestRequest{value: val, isSet: true}
}

func (v NullableTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


