/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// CodeCoverage struct for CodeCoverage
type CodeCoverage struct {
	Id *string `json:"id,omitempty"`
	LocationsNotCovered []map[string]interface{} `json:"locationsNotCovered,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	NumLocations *int32 `json:"numLocations,omitempty"`
	NumLocationsNotCovered *int32 `json:"numLocationsNotCovered,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewCodeCoverage instantiates a new CodeCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeCoverage() *CodeCoverage {
	this := CodeCoverage{}
	return &this
}

// NewCodeCoverageWithDefaults instantiates a new CodeCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeCoverageWithDefaults() *CodeCoverage {
	this := CodeCoverage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CodeCoverage) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CodeCoverage) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CodeCoverage) SetId(v string) {
	o.Id = &v
}

// GetLocationsNotCovered returns the LocationsNotCovered field value if set, zero value otherwise.
func (o *CodeCoverage) GetLocationsNotCovered() []map[string]interface{} {
	if o == nil || isNil(o.LocationsNotCovered) {
		var ret []map[string]interface{}
		return ret
	}
	return o.LocationsNotCovered
}

// GetLocationsNotCoveredOk returns a tuple with the LocationsNotCovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetLocationsNotCoveredOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.LocationsNotCovered) {
    return nil, false
	}
	return o.LocationsNotCovered, true
}

// HasLocationsNotCovered returns a boolean if a field has been set.
func (o *CodeCoverage) HasLocationsNotCovered() bool {
	if o != nil && !isNil(o.LocationsNotCovered) {
		return true
	}

	return false
}

// SetLocationsNotCovered gets a reference to the given []map[string]interface{} and assigns it to the LocationsNotCovered field.
func (o *CodeCoverage) SetLocationsNotCovered(v []map[string]interface{}) {
	o.LocationsNotCovered = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CodeCoverage) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CodeCoverage) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CodeCoverage) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *CodeCoverage) GetNamespace() string {
	if o == nil || isNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.Namespace) {
    return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *CodeCoverage) HasNamespace() bool {
	if o != nil && !isNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *CodeCoverage) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNumLocations returns the NumLocations field value if set, zero value otherwise.
func (o *CodeCoverage) GetNumLocations() int32 {
	if o == nil || isNil(o.NumLocations) {
		var ret int32
		return ret
	}
	return *o.NumLocations
}

// GetNumLocationsOk returns a tuple with the NumLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetNumLocationsOk() (*int32, bool) {
	if o == nil || isNil(o.NumLocations) {
    return nil, false
	}
	return o.NumLocations, true
}

// HasNumLocations returns a boolean if a field has been set.
func (o *CodeCoverage) HasNumLocations() bool {
	if o != nil && !isNil(o.NumLocations) {
		return true
	}

	return false
}

// SetNumLocations gets a reference to the given int32 and assigns it to the NumLocations field.
func (o *CodeCoverage) SetNumLocations(v int32) {
	o.NumLocations = &v
}

// GetNumLocationsNotCovered returns the NumLocationsNotCovered field value if set, zero value otherwise.
func (o *CodeCoverage) GetNumLocationsNotCovered() int32 {
	if o == nil || isNil(o.NumLocationsNotCovered) {
		var ret int32
		return ret
	}
	return *o.NumLocationsNotCovered
}

// GetNumLocationsNotCoveredOk returns a tuple with the NumLocationsNotCovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetNumLocationsNotCoveredOk() (*int32, bool) {
	if o == nil || isNil(o.NumLocationsNotCovered) {
    return nil, false
	}
	return o.NumLocationsNotCovered, true
}

// HasNumLocationsNotCovered returns a boolean if a field has been set.
func (o *CodeCoverage) HasNumLocationsNotCovered() bool {
	if o != nil && !isNil(o.NumLocationsNotCovered) {
		return true
	}

	return false
}

// SetNumLocationsNotCovered gets a reference to the given int32 and assigns it to the NumLocationsNotCovered field.
func (o *CodeCoverage) SetNumLocationsNotCovered(v int32) {
	o.NumLocationsNotCovered = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CodeCoverage) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeCoverage) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CodeCoverage) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CodeCoverage) SetType(v string) {
	o.Type = &v
}

func (o CodeCoverage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.LocationsNotCovered) {
		toSerialize["locationsNotCovered"] = o.LocationsNotCovered
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !isNil(o.NumLocations) {
		toSerialize["numLocations"] = o.NumLocations
	}
	if !isNil(o.NumLocationsNotCovered) {
		toSerialize["numLocationsNotCovered"] = o.NumLocationsNotCovered
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCodeCoverage struct {
	value *CodeCoverage
	isSet bool
}

func (v NullableCodeCoverage) Get() *CodeCoverage {
	return v.value
}

func (v *NullableCodeCoverage) Set(val *CodeCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeCoverage(val *CodeCoverage) *NullableCodeCoverage {
	return &NullableCodeCoverage{value: val, isSet: true}
}

func (v NullableCodeCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


