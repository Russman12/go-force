/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
	"fmt"
)

// TestsArrayItem - struct for TestsArrayItem
type TestsArrayItem struct {
	TestsArrayClassIdItem *TestsArrayClassIdItem
	TestsArrayClassNameItem *TestsArrayClassNameItem
	TestsArrayMaxFailedTestsItem *TestsArrayMaxFailedTestsItem
	TestsArrayTestLevelItem *TestsArrayTestLevelItem
}

// TestsArrayClassIdItemAsTestsArrayItem is a convenience function that returns TestsArrayClassIdItem wrapped in TestsArrayItem
func TestsArrayClassIdItemAsTestsArrayItem(v *TestsArrayClassIdItem) TestsArrayItem {
	return TestsArrayItem{
		TestsArrayClassIdItem: v,
	}
}

// TestsArrayClassNameItemAsTestsArrayItem is a convenience function that returns TestsArrayClassNameItem wrapped in TestsArrayItem
func TestsArrayClassNameItemAsTestsArrayItem(v *TestsArrayClassNameItem) TestsArrayItem {
	return TestsArrayItem{
		TestsArrayClassNameItem: v,
	}
}

// TestsArrayMaxFailedTestsItemAsTestsArrayItem is a convenience function that returns TestsArrayMaxFailedTestsItem wrapped in TestsArrayItem
func TestsArrayMaxFailedTestsItemAsTestsArrayItem(v *TestsArrayMaxFailedTestsItem) TestsArrayItem {
	return TestsArrayItem{
		TestsArrayMaxFailedTestsItem: v,
	}
}

// TestsArrayTestLevelItemAsTestsArrayItem is a convenience function that returns TestsArrayTestLevelItem wrapped in TestsArrayItem
func TestsArrayTestLevelItemAsTestsArrayItem(v *TestsArrayTestLevelItem) TestsArrayItem {
	return TestsArrayItem{
		TestsArrayTestLevelItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestsArrayItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestsArrayClassIdItem
	err = newStrictDecoder(data).Decode(&dst.TestsArrayClassIdItem)
	if err == nil {
		jsonTestsArrayClassIdItem, _ := json.Marshal(dst.TestsArrayClassIdItem)
		if string(jsonTestsArrayClassIdItem) == "{}" { // empty struct
			dst.TestsArrayClassIdItem = nil
		} else {
			match++
		}
	} else {
		dst.TestsArrayClassIdItem = nil
	}

	// try to unmarshal data into TestsArrayClassNameItem
	err = newStrictDecoder(data).Decode(&dst.TestsArrayClassNameItem)
	if err == nil {
		jsonTestsArrayClassNameItem, _ := json.Marshal(dst.TestsArrayClassNameItem)
		if string(jsonTestsArrayClassNameItem) == "{}" { // empty struct
			dst.TestsArrayClassNameItem = nil
		} else {
			match++
		}
	} else {
		dst.TestsArrayClassNameItem = nil
	}

	// try to unmarshal data into TestsArrayMaxFailedTestsItem
	err = newStrictDecoder(data).Decode(&dst.TestsArrayMaxFailedTestsItem)
	if err == nil {
		jsonTestsArrayMaxFailedTestsItem, _ := json.Marshal(dst.TestsArrayMaxFailedTestsItem)
		if string(jsonTestsArrayMaxFailedTestsItem) == "{}" { // empty struct
			dst.TestsArrayMaxFailedTestsItem = nil
		} else {
			match++
		}
	} else {
		dst.TestsArrayMaxFailedTestsItem = nil
	}

	// try to unmarshal data into TestsArrayTestLevelItem
	err = newStrictDecoder(data).Decode(&dst.TestsArrayTestLevelItem)
	if err == nil {
		jsonTestsArrayTestLevelItem, _ := json.Marshal(dst.TestsArrayTestLevelItem)
		if string(jsonTestsArrayTestLevelItem) == "{}" { // empty struct
			dst.TestsArrayTestLevelItem = nil
		} else {
			match++
		}
	} else {
		dst.TestsArrayTestLevelItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestsArrayClassIdItem = nil
		dst.TestsArrayClassNameItem = nil
		dst.TestsArrayMaxFailedTestsItem = nil
		dst.TestsArrayTestLevelItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestsArrayItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestsArrayItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestsArrayItem) MarshalJSON() ([]byte, error) {
	if src.TestsArrayClassIdItem != nil {
		return json.Marshal(&src.TestsArrayClassIdItem)
	}

	if src.TestsArrayClassNameItem != nil {
		return json.Marshal(&src.TestsArrayClassNameItem)
	}

	if src.TestsArrayMaxFailedTestsItem != nil {
		return json.Marshal(&src.TestsArrayMaxFailedTestsItem)
	}

	if src.TestsArrayTestLevelItem != nil {
		return json.Marshal(&src.TestsArrayTestLevelItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestsArrayItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TestsArrayClassIdItem != nil {
		return obj.TestsArrayClassIdItem
	}

	if obj.TestsArrayClassNameItem != nil {
		return obj.TestsArrayClassNameItem
	}

	if obj.TestsArrayMaxFailedTestsItem != nil {
		return obj.TestsArrayMaxFailedTestsItem
	}

	if obj.TestsArrayTestLevelItem != nil {
		return obj.TestsArrayTestLevelItem
	}

	// all schemas are nil
	return nil
}

type NullableTestsArrayItem struct {
	value *TestsArrayItem
	isSet bool
}

func (v NullableTestsArrayItem) Get() *TestsArrayItem {
	return v.value
}

func (v *NullableTestsArrayItem) Set(val *TestsArrayItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTestsArrayItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTestsArrayItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestsArrayItem(val *TestsArrayItem) *NullableTestsArrayItem {
	return &NullableTestsArrayItem{value: val, isSet: true}
}

func (v NullableTestsArrayItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestsArrayItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


