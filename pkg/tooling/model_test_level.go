/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
	"fmt"
)

// TestLevel the model 'TestLevel'
type TestLevel string

// List of TestLevel
const (
	TESTLEVEL_RUN_SPECIFIED_TESTS TestLevel = "RunSpecifiedTests"
	TESTLEVEL_RUN_LOCAL_TESTS TestLevel = "RunLocalTests"
	TESTLEVEL_RUN_ALL_TESTS_IN_ORG TestLevel = "RunAllTestsInOrg"
)

// All allowed values of TestLevel enum
var AllowedTestLevelEnumValues = []TestLevel{
	"RunSpecifiedTests",
	"RunLocalTests",
	"RunAllTestsInOrg",
}

func (v *TestLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestLevel(value)
	for _, existing := range AllowedTestLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestLevel", value)
}

// NewTestLevelFromValue returns a pointer to a valid TestLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestLevelFromValue(v string) (*TestLevel, error) {
	ev := TestLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestLevel: valid values are %v", v, AllowedTestLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestLevel) IsValid() bool {
	for _, existing := range AllowedTestLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestLevel value
func (v TestLevel) Ptr() *TestLevel {
	return &v
}

type NullableTestLevel struct {
	value *TestLevel
	isSet bool
}

func (v NullableTestLevel) Get() *TestLevel {
	return v.value
}

func (v *NullableTestLevel) Set(val *TestLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestLevel(val *TestLevel) *NullableTestLevel {
	return &NullableTestLevel{value: val, isSet: true}
}

func (v NullableTestLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

