/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// Field struct for Field
type Field struct {
	// Indicates whether this field is an autonumber field (true) or not (false). Analogous to a SQL IDENTITY type, autonumber fields are read only, non-createable text fields with a maximum length of 30 characters. Autonumber fields are read-only fields used to provide a unique ID that is independent of the internal object ID (such as a purchase order number or invoice number). Autonumber fields are configured entirely in the Salesforce user interface. The API provides access to this attribute so that client applications can determine whether a given field is an autonumber field.
	Autonumber *bool `json:"autonumber,omitempty"`
	// For variable-length fields (including binary fields), the maximum size of the field, in bytes.
	ByteLength *int32 `json:"byteLength,omitempty"`
	// Indicates whether the field is a custom formula field (true) or not (false). Note that custom formula fields are always read-only.
	Calculated *bool `json:"calculated,omitempty"`
	// Indicates whether the field is case sensitive (true) or not (false).
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// The name of the field that controls the values of this picklist. It only applies if type is picklist or multipicklist and dependentPicklist is true. The mapping of controlling field to dependent field is stored in the validFor attribute of each PicklistEntry for this picklist.
	ControllerName *string `json:"controllerName,omitempty"`
	// Indicates whether the field can be created (true) or not (false). If true, then this field value can be set in a create() call.
	Createable *bool `json:"createable,omitempty"`
	// Indicates whether the field is a custom field (true) or not (false).
	Custom *bool `json:"custom,omitempty"`
	// Indicates whether data translation is enabled for the field (true) or not (false). Available in API version 49.0 and later.
	DataTranslationEnabled *bool `json:"dataTranslationEnabled,omitempty"`
	// Indicates whether this field is defaulted when created (true) or not (false). If true, then Salesforce implicitly assigns a value for this field when the object is created, even if a value for this field is not passed in on the create() call. For example, in the Opportunity object, the Probability field has this attribute because its value is derived from the Stage field. Similarly, the Owner has this attribute on most objects because its value is derived from the current user (if the Owner field is not specified).
	DefaultedOnCreate *bool `json:"defaultedOnCreate,omitempty"`
	// The default value specified for this field if the formula is not used. If no value has been specified, this field is not returned.
	DefaultValueFormula *string `json:"defaultValueFormula,omitempty"`
	// Indicates whether a picklist is a dependent picklist (true) where available values depend on the chosen values from a controlling field, or not (false). See About Dependent Picklists.
	DependentPicklist *bool `json:"dependentPicklist,omitempty"`
	// Reserved for future use.
	DeprecatedAndHidden *bool `json:"deprecatedAndHidden,omitempty"`
	// For fields of type integer. Maximum number of digits. The API returns an error if an integer value exceeds the number of digits.
	Digits *int32 `json:"digits,omitempty"`
	// Indicates how the geolocation values of a Location custom field appears in the user interface. If true, the geolocation values appear in decimal notation. If false, the geolocation values appear as degrees, minutes, and seconds.
	DisplayLocationInDecimal *bool `json:"displayLocationInDecimal,omitempty"`
	// Indicates whether this field is encrypted. This value only appears in the results of a describeSObjects() call when it is true; otherwise, it is omitted from the results. This field is available in API version 31.0 and later.
	Encrypted *bool `json:"encrypted,omitempty"`
	// If the field is a textarea field type, indicates if the text area is plain text (plaintextarea) or rich text (richtextarea). If the field is a url field type, if this value is imageurl, the URL references an image file. Available on standard fields on standard objects only, for example, Account.photoUrl, Contact.photoUrl, and so on. If the field is a reference field type, indicates the type of external object relationship. Available on external objects only. null—lookup relationship externallookup—external lookup relationship indirectlookup—indirect lookup relationship filterable boolean Indicates whether the field is filterable (true) or not (false). If true, then this field can be specified in the WHERE clause of a query string in a query() call. filteredLookupInfo FilteredLookupInfo If the field is a reference field type with a lookup filter, filteredLookupInfo contains the lookup filter information for the field. If there is no lookup filter, or the filter is inactive, this field is null. This field is available in API version 31.0 and later. formula string The formula specified for this field. If no formula is specified for this field, it is not returned.
	ExtraTypeInfo *string `json:"extraTypeInfo,omitempty"`
	// Indicates whether the field can be included in the GROUP BY clause of a SOQL query (true) or not (false). See GROUP BY in the Salesforce SOQL and SOSL Reference Guide. Available in API version 18.0 and later.
	Groupable *bool `json:"groupable,omitempty"`
	// Indicates whether the field stores numbers to 8 decimal places regardless of what’s specified in the field details (true) or not (false). Used to handle currencies for products that cost fractions of a cent, in large quantities. If high-scale unit pricing isn’t enabled in your organization, this field isn’t returned. Available in API version 33.0 and later.
	HighScaleNumber *bool `json:"highScaleNumber,omitempty"`
	// Indicates whether a field such as a hyperlink custom formula field has been formatted for HTML and should be encoded for display in HTML (true) or not (false). Also indicates whether a field is a custom formula field that has an IMAGE text function.
	HtmlFormatted *bool `json:"htmlFormatted,omitempty"`
	// Indicates whether the field can be used to specify a record in an upsert() call (true) or not (false).
	IdLookup *bool `json:"idLookup,omitempty"`
	// The text that displays in the field-level help hover text for this field.
	InlineHelpText *string `json:"inlineHelpText,omitempty"`
	// Text label that is displayed next to the field in the Salesforce user interface. This label can be localized.
	Label *string `json:"label,omitempty"`
	// Returns the maximum size of the field in Unicode characters (not bytes) or 255, whichever is less. The maximum value returned by the getLength() property is 255. Available in API version 49.0 and later.
	Length *int32 `json:"length,omitempty"`
	// Reserved for future use.
	Mask *string `json:"mask,omitempty"`
	// Reserved for future use.
	MaskType *string `json:"maskType,omitempty"`
	// Field name used in API calls, such as create(), delete(), and query().
	Name *string `json:"name,omitempty"`
	// Indicates whether this field is a name field (true) or not (false). Used to identify the name field for standard objects (such as AccountName for an Account object) and custom objects. Limited to one per object, except where FirstName and LastName fields are used (such as in the Contact object). If a compound name is present, for example the Name field on a person account, nameField is set to true for that record. If no compound name is present, FirstName and LastName have this field set to true.
	NameField *bool `json:"nameField,omitempty"`
	// Indicates whether the field's value is the Name of the parent of this object (true) or not (false). Used for objects whose parents may be more than one type of object, for example a task may have an account or a contact as a parent.
	NamePointing *bool `json:"namePointing,omitempty"`
	// Indicates whether the field is nillable (true) or not (false). A nillable field can have empty content. A non-nillable field must have a value in order for the object to be created or saved.
	Nillable *bool `json:"nillable,omitempty"`
	// Indicates whether FieldPermissions can be specified for the field (true) or not (false).
	Permissionable *bool `json:"permissionable,omitempty"`
	// Provides the list of valid values for the picklist. Specified only if restrictedPicklist is true.
	PicklistValues []PicklistEntry `json:"picklistValues,omitempty"`
	// Indicates whether the foreign key includes multiple entity types (true) or not (false).
	PolymorphicForeignKey *bool `json:"polymorphicForeignKey,omitempty"`
	// For fields of type double. Maximum number of digits that can be stored, including all numbers to the left and to the right of the decimal point (but excluding the decimal point character).
	Precision *int32 `json:"precision,omitempty"`
	// The name of the relationship, if this is a master-detail relationship field.
	RelationshipName *string `json:"relationshipName,omitempty"`
	// The type of relationship for a master-detail relationship field. Valid values are: `0` if the field is the primary relationship `1` if the field is the secondary relationship
	RelationshipOrder *int32 `json:"relationshipOrder,omitempty"`
	// Applies only to indirect lookup relationships on external objects. Name of the custom field on the parent standard or custom object whose values are matched against the values of the child external object's indirect lookup relationship field. This matching is done to determine which records are related to each other. This field is available in API version 32.0 and later.
	ReferenceTargetField *string `json:"referenceTargetField,omitempty"`
	// For fields that refer to other objects, this array indicates the object types of the referenced objects.
	ReferenceTo []string `json:"referenceTo,omitempty"`
	// Indicates whether the field is a restricted picklist (true) or not (false).
	RestrictedPicklist *bool `json:"restrictedPicklist,omitempty"`
	// For fields of type double. Number of digits to the right of the decimal point. The API silently truncates any extra digits to the right of the decimal point, but it returns a fault response if the number has too many digits to the left of the decimal point.
	Scale *int32 `json:"scale,omitempty"`
	// Indicates whether a foreign key can be included in prefiltering (true) or not (false) when used in a SOSL WHERE clause. Prefiltering means to filter by a specific field value before executing the full search query. Available in API version 40.0 and later.
	SearchPrefilterable *bool `json:"searchPrefilterable,omitempty"`
	SoapType *string `json:"soapType,omitempty"`
	// Indicates whether a query can sort on this field (true) or not (false).
	Sortable *bool `json:"sortable,omitempty"`
	Type *FieldType `json:"type,omitempty"`
	// Indicates whether the value must be unique true) or not false).
	Unique *bool `json:"unique,omitempty"`
	// Indicates one of the following: Whether the field is updateable, (true) or not (false). If true, then this field value can be set in an update() call. If the field is in a master-detail relationship on a custom object, indicates whether the child records can be reparented to different parent records (true), false otherwise.
	Updateable *bool `json:"updateable,omitempty"`
	// This field only applies to master-detail relationships. Indicates whether a user requires read sharing access (true) or write sharing access (false) to the parent record to insert, update, and delete a child record. In both cases, a user also needs Create, Edit, and Delete object permissions for the child object.
	WriteRequiresMasterRead *bool `json:"writeRequiresMasterRead,omitempty"`
}

// NewField instantiates a new Field object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewField() *Field {
	this := Field{}
	return &this
}

// NewFieldWithDefaults instantiates a new Field object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldWithDefaults() *Field {
	this := Field{}
	return &this
}

// GetAutonumber returns the Autonumber field value if set, zero value otherwise.
func (o *Field) GetAutonumber() bool {
	if o == nil || isNil(o.Autonumber) {
		var ret bool
		return ret
	}
	return *o.Autonumber
}

// GetAutonumberOk returns a tuple with the Autonumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetAutonumberOk() (*bool, bool) {
	if o == nil || isNil(o.Autonumber) {
    return nil, false
	}
	return o.Autonumber, true
}

// HasAutonumber returns a boolean if a field has been set.
func (o *Field) HasAutonumber() bool {
	if o != nil && !isNil(o.Autonumber) {
		return true
	}

	return false
}

// SetAutonumber gets a reference to the given bool and assigns it to the Autonumber field.
func (o *Field) SetAutonumber(v bool) {
	o.Autonumber = &v
}

// GetByteLength returns the ByteLength field value if set, zero value otherwise.
func (o *Field) GetByteLength() int32 {
	if o == nil || isNil(o.ByteLength) {
		var ret int32
		return ret
	}
	return *o.ByteLength
}

// GetByteLengthOk returns a tuple with the ByteLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetByteLengthOk() (*int32, bool) {
	if o == nil || isNil(o.ByteLength) {
    return nil, false
	}
	return o.ByteLength, true
}

// HasByteLength returns a boolean if a field has been set.
func (o *Field) HasByteLength() bool {
	if o != nil && !isNil(o.ByteLength) {
		return true
	}

	return false
}

// SetByteLength gets a reference to the given int32 and assigns it to the ByteLength field.
func (o *Field) SetByteLength(v int32) {
	o.ByteLength = &v
}

// GetCalculated returns the Calculated field value if set, zero value otherwise.
func (o *Field) GetCalculated() bool {
	if o == nil || isNil(o.Calculated) {
		var ret bool
		return ret
	}
	return *o.Calculated
}

// GetCalculatedOk returns a tuple with the Calculated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetCalculatedOk() (*bool, bool) {
	if o == nil || isNil(o.Calculated) {
    return nil, false
	}
	return o.Calculated, true
}

// HasCalculated returns a boolean if a field has been set.
func (o *Field) HasCalculated() bool {
	if o != nil && !isNil(o.Calculated) {
		return true
	}

	return false
}

// SetCalculated gets a reference to the given bool and assigns it to the Calculated field.
func (o *Field) SetCalculated(v bool) {
	o.Calculated = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *Field) GetCaseSensitive() bool {
	if o == nil || isNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || isNil(o.CaseSensitive) {
    return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *Field) HasCaseSensitive() bool {
	if o != nil && !isNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *Field) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetControllerName returns the ControllerName field value if set, zero value otherwise.
func (o *Field) GetControllerName() string {
	if o == nil || isNil(o.ControllerName) {
		var ret string
		return ret
	}
	return *o.ControllerName
}

// GetControllerNameOk returns a tuple with the ControllerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetControllerNameOk() (*string, bool) {
	if o == nil || isNil(o.ControllerName) {
    return nil, false
	}
	return o.ControllerName, true
}

// HasControllerName returns a boolean if a field has been set.
func (o *Field) HasControllerName() bool {
	if o != nil && !isNil(o.ControllerName) {
		return true
	}

	return false
}

// SetControllerName gets a reference to the given string and assigns it to the ControllerName field.
func (o *Field) SetControllerName(v string) {
	o.ControllerName = &v
}

// GetCreateable returns the Createable field value if set, zero value otherwise.
func (o *Field) GetCreateable() bool {
	if o == nil || isNil(o.Createable) {
		var ret bool
		return ret
	}
	return *o.Createable
}

// GetCreateableOk returns a tuple with the Createable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetCreateableOk() (*bool, bool) {
	if o == nil || isNil(o.Createable) {
    return nil, false
	}
	return o.Createable, true
}

// HasCreateable returns a boolean if a field has been set.
func (o *Field) HasCreateable() bool {
	if o != nil && !isNil(o.Createable) {
		return true
	}

	return false
}

// SetCreateable gets a reference to the given bool and assigns it to the Createable field.
func (o *Field) SetCreateable(v bool) {
	o.Createable = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *Field) GetCustom() bool {
	if o == nil || isNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetCustomOk() (*bool, bool) {
	if o == nil || isNil(o.Custom) {
    return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *Field) HasCustom() bool {
	if o != nil && !isNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *Field) SetCustom(v bool) {
	o.Custom = &v
}

// GetDataTranslationEnabled returns the DataTranslationEnabled field value if set, zero value otherwise.
func (o *Field) GetDataTranslationEnabled() bool {
	if o == nil || isNil(o.DataTranslationEnabled) {
		var ret bool
		return ret
	}
	return *o.DataTranslationEnabled
}

// GetDataTranslationEnabledOk returns a tuple with the DataTranslationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDataTranslationEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.DataTranslationEnabled) {
    return nil, false
	}
	return o.DataTranslationEnabled, true
}

// HasDataTranslationEnabled returns a boolean if a field has been set.
func (o *Field) HasDataTranslationEnabled() bool {
	if o != nil && !isNil(o.DataTranslationEnabled) {
		return true
	}

	return false
}

// SetDataTranslationEnabled gets a reference to the given bool and assigns it to the DataTranslationEnabled field.
func (o *Field) SetDataTranslationEnabled(v bool) {
	o.DataTranslationEnabled = &v
}

// GetDefaultedOnCreate returns the DefaultedOnCreate field value if set, zero value otherwise.
func (o *Field) GetDefaultedOnCreate() bool {
	if o == nil || isNil(o.DefaultedOnCreate) {
		var ret bool
		return ret
	}
	return *o.DefaultedOnCreate
}

// GetDefaultedOnCreateOk returns a tuple with the DefaultedOnCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDefaultedOnCreateOk() (*bool, bool) {
	if o == nil || isNil(o.DefaultedOnCreate) {
    return nil, false
	}
	return o.DefaultedOnCreate, true
}

// HasDefaultedOnCreate returns a boolean if a field has been set.
func (o *Field) HasDefaultedOnCreate() bool {
	if o != nil && !isNil(o.DefaultedOnCreate) {
		return true
	}

	return false
}

// SetDefaultedOnCreate gets a reference to the given bool and assigns it to the DefaultedOnCreate field.
func (o *Field) SetDefaultedOnCreate(v bool) {
	o.DefaultedOnCreate = &v
}

// GetDefaultValueFormula returns the DefaultValueFormula field value if set, zero value otherwise.
func (o *Field) GetDefaultValueFormula() string {
	if o == nil || isNil(o.DefaultValueFormula) {
		var ret string
		return ret
	}
	return *o.DefaultValueFormula
}

// GetDefaultValueFormulaOk returns a tuple with the DefaultValueFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDefaultValueFormulaOk() (*string, bool) {
	if o == nil || isNil(o.DefaultValueFormula) {
    return nil, false
	}
	return o.DefaultValueFormula, true
}

// HasDefaultValueFormula returns a boolean if a field has been set.
func (o *Field) HasDefaultValueFormula() bool {
	if o != nil && !isNil(o.DefaultValueFormula) {
		return true
	}

	return false
}

// SetDefaultValueFormula gets a reference to the given string and assigns it to the DefaultValueFormula field.
func (o *Field) SetDefaultValueFormula(v string) {
	o.DefaultValueFormula = &v
}

// GetDependentPicklist returns the DependentPicklist field value if set, zero value otherwise.
func (o *Field) GetDependentPicklist() bool {
	if o == nil || isNil(o.DependentPicklist) {
		var ret bool
		return ret
	}
	return *o.DependentPicklist
}

// GetDependentPicklistOk returns a tuple with the DependentPicklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDependentPicklistOk() (*bool, bool) {
	if o == nil || isNil(o.DependentPicklist) {
    return nil, false
	}
	return o.DependentPicklist, true
}

// HasDependentPicklist returns a boolean if a field has been set.
func (o *Field) HasDependentPicklist() bool {
	if o != nil && !isNil(o.DependentPicklist) {
		return true
	}

	return false
}

// SetDependentPicklist gets a reference to the given bool and assigns it to the DependentPicklist field.
func (o *Field) SetDependentPicklist(v bool) {
	o.DependentPicklist = &v
}

// GetDeprecatedAndHidden returns the DeprecatedAndHidden field value if set, zero value otherwise.
func (o *Field) GetDeprecatedAndHidden() bool {
	if o == nil || isNil(o.DeprecatedAndHidden) {
		var ret bool
		return ret
	}
	return *o.DeprecatedAndHidden
}

// GetDeprecatedAndHiddenOk returns a tuple with the DeprecatedAndHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDeprecatedAndHiddenOk() (*bool, bool) {
	if o == nil || isNil(o.DeprecatedAndHidden) {
    return nil, false
	}
	return o.DeprecatedAndHidden, true
}

// HasDeprecatedAndHidden returns a boolean if a field has been set.
func (o *Field) HasDeprecatedAndHidden() bool {
	if o != nil && !isNil(o.DeprecatedAndHidden) {
		return true
	}

	return false
}

// SetDeprecatedAndHidden gets a reference to the given bool and assigns it to the DeprecatedAndHidden field.
func (o *Field) SetDeprecatedAndHidden(v bool) {
	o.DeprecatedAndHidden = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *Field) GetDigits() int32 {
	if o == nil || isNil(o.Digits) {
		var ret int32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDigitsOk() (*int32, bool) {
	if o == nil || isNil(o.Digits) {
    return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *Field) HasDigits() bool {
	if o != nil && !isNil(o.Digits) {
		return true
	}

	return false
}

// SetDigits gets a reference to the given int32 and assigns it to the Digits field.
func (o *Field) SetDigits(v int32) {
	o.Digits = &v
}

// GetDisplayLocationInDecimal returns the DisplayLocationInDecimal field value if set, zero value otherwise.
func (o *Field) GetDisplayLocationInDecimal() bool {
	if o == nil || isNil(o.DisplayLocationInDecimal) {
		var ret bool
		return ret
	}
	return *o.DisplayLocationInDecimal
}

// GetDisplayLocationInDecimalOk returns a tuple with the DisplayLocationInDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDisplayLocationInDecimalOk() (*bool, bool) {
	if o == nil || isNil(o.DisplayLocationInDecimal) {
    return nil, false
	}
	return o.DisplayLocationInDecimal, true
}

// HasDisplayLocationInDecimal returns a boolean if a field has been set.
func (o *Field) HasDisplayLocationInDecimal() bool {
	if o != nil && !isNil(o.DisplayLocationInDecimal) {
		return true
	}

	return false
}

// SetDisplayLocationInDecimal gets a reference to the given bool and assigns it to the DisplayLocationInDecimal field.
func (o *Field) SetDisplayLocationInDecimal(v bool) {
	o.DisplayLocationInDecimal = &v
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *Field) GetEncrypted() bool {
	if o == nil || isNil(o.Encrypted) {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetEncryptedOk() (*bool, bool) {
	if o == nil || isNil(o.Encrypted) {
    return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *Field) HasEncrypted() bool {
	if o != nil && !isNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *Field) SetEncrypted(v bool) {
	o.Encrypted = &v
}

// GetExtraTypeInfo returns the ExtraTypeInfo field value if set, zero value otherwise.
func (o *Field) GetExtraTypeInfo() string {
	if o == nil || isNil(o.ExtraTypeInfo) {
		var ret string
		return ret
	}
	return *o.ExtraTypeInfo
}

// GetExtraTypeInfoOk returns a tuple with the ExtraTypeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetExtraTypeInfoOk() (*string, bool) {
	if o == nil || isNil(o.ExtraTypeInfo) {
    return nil, false
	}
	return o.ExtraTypeInfo, true
}

// HasExtraTypeInfo returns a boolean if a field has been set.
func (o *Field) HasExtraTypeInfo() bool {
	if o != nil && !isNil(o.ExtraTypeInfo) {
		return true
	}

	return false
}

// SetExtraTypeInfo gets a reference to the given string and assigns it to the ExtraTypeInfo field.
func (o *Field) SetExtraTypeInfo(v string) {
	o.ExtraTypeInfo = &v
}

// GetGroupable returns the Groupable field value if set, zero value otherwise.
func (o *Field) GetGroupable() bool {
	if o == nil || isNil(o.Groupable) {
		var ret bool
		return ret
	}
	return *o.Groupable
}

// GetGroupableOk returns a tuple with the Groupable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetGroupableOk() (*bool, bool) {
	if o == nil || isNil(o.Groupable) {
    return nil, false
	}
	return o.Groupable, true
}

// HasGroupable returns a boolean if a field has been set.
func (o *Field) HasGroupable() bool {
	if o != nil && !isNil(o.Groupable) {
		return true
	}

	return false
}

// SetGroupable gets a reference to the given bool and assigns it to the Groupable field.
func (o *Field) SetGroupable(v bool) {
	o.Groupable = &v
}

// GetHighScaleNumber returns the HighScaleNumber field value if set, zero value otherwise.
func (o *Field) GetHighScaleNumber() bool {
	if o == nil || isNil(o.HighScaleNumber) {
		var ret bool
		return ret
	}
	return *o.HighScaleNumber
}

// GetHighScaleNumberOk returns a tuple with the HighScaleNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetHighScaleNumberOk() (*bool, bool) {
	if o == nil || isNil(o.HighScaleNumber) {
    return nil, false
	}
	return o.HighScaleNumber, true
}

// HasHighScaleNumber returns a boolean if a field has been set.
func (o *Field) HasHighScaleNumber() bool {
	if o != nil && !isNil(o.HighScaleNumber) {
		return true
	}

	return false
}

// SetHighScaleNumber gets a reference to the given bool and assigns it to the HighScaleNumber field.
func (o *Field) SetHighScaleNumber(v bool) {
	o.HighScaleNumber = &v
}

// GetHtmlFormatted returns the HtmlFormatted field value if set, zero value otherwise.
func (o *Field) GetHtmlFormatted() bool {
	if o == nil || isNil(o.HtmlFormatted) {
		var ret bool
		return ret
	}
	return *o.HtmlFormatted
}

// GetHtmlFormattedOk returns a tuple with the HtmlFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetHtmlFormattedOk() (*bool, bool) {
	if o == nil || isNil(o.HtmlFormatted) {
    return nil, false
	}
	return o.HtmlFormatted, true
}

// HasHtmlFormatted returns a boolean if a field has been set.
func (o *Field) HasHtmlFormatted() bool {
	if o != nil && !isNil(o.HtmlFormatted) {
		return true
	}

	return false
}

// SetHtmlFormatted gets a reference to the given bool and assigns it to the HtmlFormatted field.
func (o *Field) SetHtmlFormatted(v bool) {
	o.HtmlFormatted = &v
}

// GetIdLookup returns the IdLookup field value if set, zero value otherwise.
func (o *Field) GetIdLookup() bool {
	if o == nil || isNil(o.IdLookup) {
		var ret bool
		return ret
	}
	return *o.IdLookup
}

// GetIdLookupOk returns a tuple with the IdLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetIdLookupOk() (*bool, bool) {
	if o == nil || isNil(o.IdLookup) {
    return nil, false
	}
	return o.IdLookup, true
}

// HasIdLookup returns a boolean if a field has been set.
func (o *Field) HasIdLookup() bool {
	if o != nil && !isNil(o.IdLookup) {
		return true
	}

	return false
}

// SetIdLookup gets a reference to the given bool and assigns it to the IdLookup field.
func (o *Field) SetIdLookup(v bool) {
	o.IdLookup = &v
}

// GetInlineHelpText returns the InlineHelpText field value if set, zero value otherwise.
func (o *Field) GetInlineHelpText() string {
	if o == nil || isNil(o.InlineHelpText) {
		var ret string
		return ret
	}
	return *o.InlineHelpText
}

// GetInlineHelpTextOk returns a tuple with the InlineHelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetInlineHelpTextOk() (*string, bool) {
	if o == nil || isNil(o.InlineHelpText) {
    return nil, false
	}
	return o.InlineHelpText, true
}

// HasInlineHelpText returns a boolean if a field has been set.
func (o *Field) HasInlineHelpText() bool {
	if o != nil && !isNil(o.InlineHelpText) {
		return true
	}

	return false
}

// SetInlineHelpText gets a reference to the given string and assigns it to the InlineHelpText field.
func (o *Field) SetInlineHelpText(v string) {
	o.InlineHelpText = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Field) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Field) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Field) SetLabel(v string) {
	o.Label = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *Field) GetLength() int32 {
	if o == nil || isNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetLengthOk() (*int32, bool) {
	if o == nil || isNil(o.Length) {
    return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *Field) HasLength() bool {
	if o != nil && !isNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *Field) SetLength(v int32) {
	o.Length = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *Field) GetMask() string {
	if o == nil || isNil(o.Mask) {
		var ret string
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetMaskOk() (*string, bool) {
	if o == nil || isNil(o.Mask) {
    return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *Field) HasMask() bool {
	if o != nil && !isNil(o.Mask) {
		return true
	}

	return false
}

// SetMask gets a reference to the given string and assigns it to the Mask field.
func (o *Field) SetMask(v string) {
	o.Mask = &v
}

// GetMaskType returns the MaskType field value if set, zero value otherwise.
func (o *Field) GetMaskType() string {
	if o == nil || isNil(o.MaskType) {
		var ret string
		return ret
	}
	return *o.MaskType
}

// GetMaskTypeOk returns a tuple with the MaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetMaskTypeOk() (*string, bool) {
	if o == nil || isNil(o.MaskType) {
    return nil, false
	}
	return o.MaskType, true
}

// HasMaskType returns a boolean if a field has been set.
func (o *Field) HasMaskType() bool {
	if o != nil && !isNil(o.MaskType) {
		return true
	}

	return false
}

// SetMaskType gets a reference to the given string and assigns it to the MaskType field.
func (o *Field) SetMaskType(v string) {
	o.MaskType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Field) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Field) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Field) SetName(v string) {
	o.Name = &v
}

// GetNameField returns the NameField field value if set, zero value otherwise.
func (o *Field) GetNameField() bool {
	if o == nil || isNil(o.NameField) {
		var ret bool
		return ret
	}
	return *o.NameField
}

// GetNameFieldOk returns a tuple with the NameField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetNameFieldOk() (*bool, bool) {
	if o == nil || isNil(o.NameField) {
    return nil, false
	}
	return o.NameField, true
}

// HasNameField returns a boolean if a field has been set.
func (o *Field) HasNameField() bool {
	if o != nil && !isNil(o.NameField) {
		return true
	}

	return false
}

// SetNameField gets a reference to the given bool and assigns it to the NameField field.
func (o *Field) SetNameField(v bool) {
	o.NameField = &v
}

// GetNamePointing returns the NamePointing field value if set, zero value otherwise.
func (o *Field) GetNamePointing() bool {
	if o == nil || isNil(o.NamePointing) {
		var ret bool
		return ret
	}
	return *o.NamePointing
}

// GetNamePointingOk returns a tuple with the NamePointing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetNamePointingOk() (*bool, bool) {
	if o == nil || isNil(o.NamePointing) {
    return nil, false
	}
	return o.NamePointing, true
}

// HasNamePointing returns a boolean if a field has been set.
func (o *Field) HasNamePointing() bool {
	if o != nil && !isNil(o.NamePointing) {
		return true
	}

	return false
}

// SetNamePointing gets a reference to the given bool and assigns it to the NamePointing field.
func (o *Field) SetNamePointing(v bool) {
	o.NamePointing = &v
}

// GetNillable returns the Nillable field value if set, zero value otherwise.
func (o *Field) GetNillable() bool {
	if o == nil || isNil(o.Nillable) {
		var ret bool
		return ret
	}
	return *o.Nillable
}

// GetNillableOk returns a tuple with the Nillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetNillableOk() (*bool, bool) {
	if o == nil || isNil(o.Nillable) {
    return nil, false
	}
	return o.Nillable, true
}

// HasNillable returns a boolean if a field has been set.
func (o *Field) HasNillable() bool {
	if o != nil && !isNil(o.Nillable) {
		return true
	}

	return false
}

// SetNillable gets a reference to the given bool and assigns it to the Nillable field.
func (o *Field) SetNillable(v bool) {
	o.Nillable = &v
}

// GetPermissionable returns the Permissionable field value if set, zero value otherwise.
func (o *Field) GetPermissionable() bool {
	if o == nil || isNil(o.Permissionable) {
		var ret bool
		return ret
	}
	return *o.Permissionable
}

// GetPermissionableOk returns a tuple with the Permissionable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetPermissionableOk() (*bool, bool) {
	if o == nil || isNil(o.Permissionable) {
    return nil, false
	}
	return o.Permissionable, true
}

// HasPermissionable returns a boolean if a field has been set.
func (o *Field) HasPermissionable() bool {
	if o != nil && !isNil(o.Permissionable) {
		return true
	}

	return false
}

// SetPermissionable gets a reference to the given bool and assigns it to the Permissionable field.
func (o *Field) SetPermissionable(v bool) {
	o.Permissionable = &v
}

// GetPicklistValues returns the PicklistValues field value if set, zero value otherwise.
func (o *Field) GetPicklistValues() []PicklistEntry {
	if o == nil || isNil(o.PicklistValues) {
		var ret []PicklistEntry
		return ret
	}
	return o.PicklistValues
}

// GetPicklistValuesOk returns a tuple with the PicklistValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetPicklistValuesOk() ([]PicklistEntry, bool) {
	if o == nil || isNil(o.PicklistValues) {
    return nil, false
	}
	return o.PicklistValues, true
}

// HasPicklistValues returns a boolean if a field has been set.
func (o *Field) HasPicklistValues() bool {
	if o != nil && !isNil(o.PicklistValues) {
		return true
	}

	return false
}

// SetPicklistValues gets a reference to the given []PicklistEntry and assigns it to the PicklistValues field.
func (o *Field) SetPicklistValues(v []PicklistEntry) {
	o.PicklistValues = v
}

// GetPolymorphicForeignKey returns the PolymorphicForeignKey field value if set, zero value otherwise.
func (o *Field) GetPolymorphicForeignKey() bool {
	if o == nil || isNil(o.PolymorphicForeignKey) {
		var ret bool
		return ret
	}
	return *o.PolymorphicForeignKey
}

// GetPolymorphicForeignKeyOk returns a tuple with the PolymorphicForeignKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetPolymorphicForeignKeyOk() (*bool, bool) {
	if o == nil || isNil(o.PolymorphicForeignKey) {
    return nil, false
	}
	return o.PolymorphicForeignKey, true
}

// HasPolymorphicForeignKey returns a boolean if a field has been set.
func (o *Field) HasPolymorphicForeignKey() bool {
	if o != nil && !isNil(o.PolymorphicForeignKey) {
		return true
	}

	return false
}

// SetPolymorphicForeignKey gets a reference to the given bool and assigns it to the PolymorphicForeignKey field.
func (o *Field) SetPolymorphicForeignKey(v bool) {
	o.PolymorphicForeignKey = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise.
func (o *Field) GetPrecision() int32 {
	if o == nil || isNil(o.Precision) {
		var ret int32
		return ret
	}
	return *o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetPrecisionOk() (*int32, bool) {
	if o == nil || isNil(o.Precision) {
    return nil, false
	}
	return o.Precision, true
}

// HasPrecision returns a boolean if a field has been set.
func (o *Field) HasPrecision() bool {
	if o != nil && !isNil(o.Precision) {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given int32 and assigns it to the Precision field.
func (o *Field) SetPrecision(v int32) {
	o.Precision = &v
}

// GetRelationshipName returns the RelationshipName field value if set, zero value otherwise.
func (o *Field) GetRelationshipName() string {
	if o == nil || isNil(o.RelationshipName) {
		var ret string
		return ret
	}
	return *o.RelationshipName
}

// GetRelationshipNameOk returns a tuple with the RelationshipName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetRelationshipNameOk() (*string, bool) {
	if o == nil || isNil(o.RelationshipName) {
    return nil, false
	}
	return o.RelationshipName, true
}

// HasRelationshipName returns a boolean if a field has been set.
func (o *Field) HasRelationshipName() bool {
	if o != nil && !isNil(o.RelationshipName) {
		return true
	}

	return false
}

// SetRelationshipName gets a reference to the given string and assigns it to the RelationshipName field.
func (o *Field) SetRelationshipName(v string) {
	o.RelationshipName = &v
}

// GetRelationshipOrder returns the RelationshipOrder field value if set, zero value otherwise.
func (o *Field) GetRelationshipOrder() int32 {
	if o == nil || isNil(o.RelationshipOrder) {
		var ret int32
		return ret
	}
	return *o.RelationshipOrder
}

// GetRelationshipOrderOk returns a tuple with the RelationshipOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetRelationshipOrderOk() (*int32, bool) {
	if o == nil || isNil(o.RelationshipOrder) {
    return nil, false
	}
	return o.RelationshipOrder, true
}

// HasRelationshipOrder returns a boolean if a field has been set.
func (o *Field) HasRelationshipOrder() bool {
	if o != nil && !isNil(o.RelationshipOrder) {
		return true
	}

	return false
}

// SetRelationshipOrder gets a reference to the given int32 and assigns it to the RelationshipOrder field.
func (o *Field) SetRelationshipOrder(v int32) {
	o.RelationshipOrder = &v
}

// GetReferenceTargetField returns the ReferenceTargetField field value if set, zero value otherwise.
func (o *Field) GetReferenceTargetField() string {
	if o == nil || isNil(o.ReferenceTargetField) {
		var ret string
		return ret
	}
	return *o.ReferenceTargetField
}

// GetReferenceTargetFieldOk returns a tuple with the ReferenceTargetField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetReferenceTargetFieldOk() (*string, bool) {
	if o == nil || isNil(o.ReferenceTargetField) {
    return nil, false
	}
	return o.ReferenceTargetField, true
}

// HasReferenceTargetField returns a boolean if a field has been set.
func (o *Field) HasReferenceTargetField() bool {
	if o != nil && !isNil(o.ReferenceTargetField) {
		return true
	}

	return false
}

// SetReferenceTargetField gets a reference to the given string and assigns it to the ReferenceTargetField field.
func (o *Field) SetReferenceTargetField(v string) {
	o.ReferenceTargetField = &v
}

// GetReferenceTo returns the ReferenceTo field value if set, zero value otherwise.
func (o *Field) GetReferenceTo() []string {
	if o == nil || isNil(o.ReferenceTo) {
		var ret []string
		return ret
	}
	return o.ReferenceTo
}

// GetReferenceToOk returns a tuple with the ReferenceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetReferenceToOk() ([]string, bool) {
	if o == nil || isNil(o.ReferenceTo) {
    return nil, false
	}
	return o.ReferenceTo, true
}

// HasReferenceTo returns a boolean if a field has been set.
func (o *Field) HasReferenceTo() bool {
	if o != nil && !isNil(o.ReferenceTo) {
		return true
	}

	return false
}

// SetReferenceTo gets a reference to the given []string and assigns it to the ReferenceTo field.
func (o *Field) SetReferenceTo(v []string) {
	o.ReferenceTo = v
}

// GetRestrictedPicklist returns the RestrictedPicklist field value if set, zero value otherwise.
func (o *Field) GetRestrictedPicklist() bool {
	if o == nil || isNil(o.RestrictedPicklist) {
		var ret bool
		return ret
	}
	return *o.RestrictedPicklist
}

// GetRestrictedPicklistOk returns a tuple with the RestrictedPicklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetRestrictedPicklistOk() (*bool, bool) {
	if o == nil || isNil(o.RestrictedPicklist) {
    return nil, false
	}
	return o.RestrictedPicklist, true
}

// HasRestrictedPicklist returns a boolean if a field has been set.
func (o *Field) HasRestrictedPicklist() bool {
	if o != nil && !isNil(o.RestrictedPicklist) {
		return true
	}

	return false
}

// SetRestrictedPicklist gets a reference to the given bool and assigns it to the RestrictedPicklist field.
func (o *Field) SetRestrictedPicklist(v bool) {
	o.RestrictedPicklist = &v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *Field) GetScale() int32 {
	if o == nil || isNil(o.Scale) {
		var ret int32
		return ret
	}
	return *o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetScaleOk() (*int32, bool) {
	if o == nil || isNil(o.Scale) {
    return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *Field) HasScale() bool {
	if o != nil && !isNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given int32 and assigns it to the Scale field.
func (o *Field) SetScale(v int32) {
	o.Scale = &v
}

// GetSearchPrefilterable returns the SearchPrefilterable field value if set, zero value otherwise.
func (o *Field) GetSearchPrefilterable() bool {
	if o == nil || isNil(o.SearchPrefilterable) {
		var ret bool
		return ret
	}
	return *o.SearchPrefilterable
}

// GetSearchPrefilterableOk returns a tuple with the SearchPrefilterable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetSearchPrefilterableOk() (*bool, bool) {
	if o == nil || isNil(o.SearchPrefilterable) {
    return nil, false
	}
	return o.SearchPrefilterable, true
}

// HasSearchPrefilterable returns a boolean if a field has been set.
func (o *Field) HasSearchPrefilterable() bool {
	if o != nil && !isNil(o.SearchPrefilterable) {
		return true
	}

	return false
}

// SetSearchPrefilterable gets a reference to the given bool and assigns it to the SearchPrefilterable field.
func (o *Field) SetSearchPrefilterable(v bool) {
	o.SearchPrefilterable = &v
}

// GetSoapType returns the SoapType field value if set, zero value otherwise.
func (o *Field) GetSoapType() string {
	if o == nil || isNil(o.SoapType) {
		var ret string
		return ret
	}
	return *o.SoapType
}

// GetSoapTypeOk returns a tuple with the SoapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetSoapTypeOk() (*string, bool) {
	if o == nil || isNil(o.SoapType) {
    return nil, false
	}
	return o.SoapType, true
}

// HasSoapType returns a boolean if a field has been set.
func (o *Field) HasSoapType() bool {
	if o != nil && !isNil(o.SoapType) {
		return true
	}

	return false
}

// SetSoapType gets a reference to the given string and assigns it to the SoapType field.
func (o *Field) SetSoapType(v string) {
	o.SoapType = &v
}

// GetSortable returns the Sortable field value if set, zero value otherwise.
func (o *Field) GetSortable() bool {
	if o == nil || isNil(o.Sortable) {
		var ret bool
		return ret
	}
	return *o.Sortable
}

// GetSortableOk returns a tuple with the Sortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetSortableOk() (*bool, bool) {
	if o == nil || isNil(o.Sortable) {
    return nil, false
	}
	return o.Sortable, true
}

// HasSortable returns a boolean if a field has been set.
func (o *Field) HasSortable() bool {
	if o != nil && !isNil(o.Sortable) {
		return true
	}

	return false
}

// SetSortable gets a reference to the given bool and assigns it to the Sortable field.
func (o *Field) SetSortable(v bool) {
	o.Sortable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Field) GetType() FieldType {
	if o == nil || isNil(o.Type) {
		var ret FieldType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetTypeOk() (*FieldType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Field) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given FieldType and assigns it to the Type field.
func (o *Field) SetType(v FieldType) {
	o.Type = &v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *Field) GetUnique() bool {
	if o == nil || isNil(o.Unique) {
		var ret bool
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetUniqueOk() (*bool, bool) {
	if o == nil || isNil(o.Unique) {
    return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *Field) HasUnique() bool {
	if o != nil && !isNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given bool and assigns it to the Unique field.
func (o *Field) SetUnique(v bool) {
	o.Unique = &v
}

// GetUpdateable returns the Updateable field value if set, zero value otherwise.
func (o *Field) GetUpdateable() bool {
	if o == nil || isNil(o.Updateable) {
		var ret bool
		return ret
	}
	return *o.Updateable
}

// GetUpdateableOk returns a tuple with the Updateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetUpdateableOk() (*bool, bool) {
	if o == nil || isNil(o.Updateable) {
    return nil, false
	}
	return o.Updateable, true
}

// HasUpdateable returns a boolean if a field has been set.
func (o *Field) HasUpdateable() bool {
	if o != nil && !isNil(o.Updateable) {
		return true
	}

	return false
}

// SetUpdateable gets a reference to the given bool and assigns it to the Updateable field.
func (o *Field) SetUpdateable(v bool) {
	o.Updateable = &v
}

// GetWriteRequiresMasterRead returns the WriteRequiresMasterRead field value if set, zero value otherwise.
func (o *Field) GetWriteRequiresMasterRead() bool {
	if o == nil || isNil(o.WriteRequiresMasterRead) {
		var ret bool
		return ret
	}
	return *o.WriteRequiresMasterRead
}

// GetWriteRequiresMasterReadOk returns a tuple with the WriteRequiresMasterRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetWriteRequiresMasterReadOk() (*bool, bool) {
	if o == nil || isNil(o.WriteRequiresMasterRead) {
    return nil, false
	}
	return o.WriteRequiresMasterRead, true
}

// HasWriteRequiresMasterRead returns a boolean if a field has been set.
func (o *Field) HasWriteRequiresMasterRead() bool {
	if o != nil && !isNil(o.WriteRequiresMasterRead) {
		return true
	}

	return false
}

// SetWriteRequiresMasterRead gets a reference to the given bool and assigns it to the WriteRequiresMasterRead field.
func (o *Field) SetWriteRequiresMasterRead(v bool) {
	o.WriteRequiresMasterRead = &v
}

func (o Field) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Autonumber) {
		toSerialize["autonumber"] = o.Autonumber
	}
	if !isNil(o.ByteLength) {
		toSerialize["byteLength"] = o.ByteLength
	}
	if !isNil(o.Calculated) {
		toSerialize["calculated"] = o.Calculated
	}
	if !isNil(o.CaseSensitive) {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}
	if !isNil(o.ControllerName) {
		toSerialize["controllerName"] = o.ControllerName
	}
	if !isNil(o.Createable) {
		toSerialize["createable"] = o.Createable
	}
	if !isNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !isNil(o.DataTranslationEnabled) {
		toSerialize["dataTranslationEnabled"] = o.DataTranslationEnabled
	}
	if !isNil(o.DefaultedOnCreate) {
		toSerialize["defaultedOnCreate"] = o.DefaultedOnCreate
	}
	if !isNil(o.DefaultValueFormula) {
		toSerialize["defaultValueFormula"] = o.DefaultValueFormula
	}
	if !isNil(o.DependentPicklist) {
		toSerialize["dependentPicklist"] = o.DependentPicklist
	}
	if !isNil(o.DeprecatedAndHidden) {
		toSerialize["deprecatedAndHidden"] = o.DeprecatedAndHidden
	}
	if !isNil(o.Digits) {
		toSerialize["digits"] = o.Digits
	}
	if !isNil(o.DisplayLocationInDecimal) {
		toSerialize["displayLocationInDecimal"] = o.DisplayLocationInDecimal
	}
	if !isNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	if !isNil(o.ExtraTypeInfo) {
		toSerialize["extraTypeInfo"] = o.ExtraTypeInfo
	}
	if !isNil(o.Groupable) {
		toSerialize["groupable"] = o.Groupable
	}
	if !isNil(o.HighScaleNumber) {
		toSerialize["highScaleNumber"] = o.HighScaleNumber
	}
	if !isNil(o.HtmlFormatted) {
		toSerialize["htmlFormatted"] = o.HtmlFormatted
	}
	if !isNil(o.IdLookup) {
		toSerialize["idLookup"] = o.IdLookup
	}
	if !isNil(o.InlineHelpText) {
		toSerialize["inlineHelpText"] = o.InlineHelpText
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !isNil(o.Mask) {
		toSerialize["mask"] = o.Mask
	}
	if !isNil(o.MaskType) {
		toSerialize["maskType"] = o.MaskType
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NameField) {
		toSerialize["nameField"] = o.NameField
	}
	if !isNil(o.NamePointing) {
		toSerialize["namePointing"] = o.NamePointing
	}
	if !isNil(o.Nillable) {
		toSerialize["nillable"] = o.Nillable
	}
	if !isNil(o.Permissionable) {
		toSerialize["permissionable"] = o.Permissionable
	}
	if !isNil(o.PicklistValues) {
		toSerialize["picklistValues"] = o.PicklistValues
	}
	if !isNil(o.PolymorphicForeignKey) {
		toSerialize["polymorphicForeignKey"] = o.PolymorphicForeignKey
	}
	if !isNil(o.Precision) {
		toSerialize["precision"] = o.Precision
	}
	if !isNil(o.RelationshipName) {
		toSerialize["relationshipName"] = o.RelationshipName
	}
	if !isNil(o.RelationshipOrder) {
		toSerialize["relationshipOrder"] = o.RelationshipOrder
	}
	if !isNil(o.ReferenceTargetField) {
		toSerialize["referenceTargetField"] = o.ReferenceTargetField
	}
	if !isNil(o.ReferenceTo) {
		toSerialize["referenceTo"] = o.ReferenceTo
	}
	if !isNil(o.RestrictedPicklist) {
		toSerialize["restrictedPicklist"] = o.RestrictedPicklist
	}
	if !isNil(o.Scale) {
		toSerialize["scale"] = o.Scale
	}
	if !isNil(o.SearchPrefilterable) {
		toSerialize["searchPrefilterable"] = o.SearchPrefilterable
	}
	if !isNil(o.SoapType) {
		toSerialize["soapType"] = o.SoapType
	}
	if !isNil(o.Sortable) {
		toSerialize["sortable"] = o.Sortable
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Unique) {
		toSerialize["unique"] = o.Unique
	}
	if !isNil(o.Updateable) {
		toSerialize["updateable"] = o.Updateable
	}
	if !isNil(o.WriteRequiresMasterRead) {
		toSerialize["writeRequiresMasterRead"] = o.WriteRequiresMasterRead
	}
	return json.Marshal(toSerialize)
}

type NullableField struct {
	value *Field
	isSet bool
}

func (v NullableField) Get() *Field {
	return v.value
}

func (v *NullableField) Set(val *Field) {
	v.value = val
	v.isSet = true
}

func (v NullableField) IsSet() bool {
	return v.isSet
}

func (v *NullableField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableField(val *Field) *NullableField {
	return &NullableField{value: val, isSet: true}
}

func (v NullableField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


