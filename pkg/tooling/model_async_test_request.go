/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
	"fmt"
)

// AsyncTestRequest - struct for AsyncTestRequest
type AsyncTestRequest struct {
	AsyncTestSimpleRequest *AsyncTestSimpleRequest
	TestRequest *TestRequest
}

// AsyncTestSimpleRequestAsAsyncTestRequest is a convenience function that returns AsyncTestSimpleRequest wrapped in AsyncTestRequest
func AsyncTestSimpleRequestAsAsyncTestRequest(v *AsyncTestSimpleRequest) AsyncTestRequest {
	return AsyncTestRequest{
		AsyncTestSimpleRequest: v,
	}
}

// TestRequestAsAsyncTestRequest is a convenience function that returns TestRequest wrapped in AsyncTestRequest
func TestRequestAsAsyncTestRequest(v *TestRequest) AsyncTestRequest {
	return AsyncTestRequest{
		TestRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AsyncTestRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AsyncTestSimpleRequest
	err = newStrictDecoder(data).Decode(&dst.AsyncTestSimpleRequest)
	if err == nil {
		jsonAsyncTestSimpleRequest, _ := json.Marshal(dst.AsyncTestSimpleRequest)
		if string(jsonAsyncTestSimpleRequest) == "{}" { // empty struct
			dst.AsyncTestSimpleRequest = nil
		} else {
			match++
		}
	} else {
		dst.AsyncTestSimpleRequest = nil
	}

	// try to unmarshal data into TestRequest
	err = newStrictDecoder(data).Decode(&dst.TestRequest)
	if err == nil {
		jsonTestRequest, _ := json.Marshal(dst.TestRequest)
		if string(jsonTestRequest) == "{}" { // empty struct
			dst.TestRequest = nil
		} else {
			match++
		}
	} else {
		dst.TestRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AsyncTestSimpleRequest = nil
		dst.TestRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AsyncTestRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AsyncTestRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AsyncTestRequest) MarshalJSON() ([]byte, error) {
	if src.AsyncTestSimpleRequest != nil {
		return json.Marshal(&src.AsyncTestSimpleRequest)
	}

	if src.TestRequest != nil {
		return json.Marshal(&src.TestRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AsyncTestRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AsyncTestSimpleRequest != nil {
		return obj.AsyncTestSimpleRequest
	}

	if obj.TestRequest != nil {
		return obj.TestRequest
	}

	// all schemas are nil
	return nil
}

type NullableAsyncTestRequest struct {
	value *AsyncTestRequest
	isSet bool
}

func (v NullableAsyncTestRequest) Get() *AsyncTestRequest {
	return v.value
}

func (v *NullableAsyncTestRequest) Set(val *AsyncTestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncTestRequest(val *AsyncTestRequest) *NullableAsyncTestRequest {
	return &NullableAsyncTestRequest{value: val, isSet: true}
}

func (v NullableAsyncTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


