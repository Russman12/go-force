/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
	"fmt"
)

// CompletionType Type of completion
type CompletionType string

// List of CompletionType
const (
	COMPLETIONTYPE_APEX CompletionType = "apex"
	COMPLETIONTYPE_VISUALFORCE CompletionType = "visualforce"
)

// All allowed values of CompletionType enum
var AllowedCompletionTypeEnumValues = []CompletionType{
	"apex",
	"visualforce",
}

func (v *CompletionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompletionType(value)
	for _, existing := range AllowedCompletionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompletionType", value)
}

// NewCompletionTypeFromValue returns a pointer to a valid CompletionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompletionTypeFromValue(v string) (*CompletionType, error) {
	ev := CompletionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompletionType: valid values are %v", v, AllowedCompletionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompletionType) IsValid() bool {
	for _, existing := range AllowedCompletionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompletionType value
func (v CompletionType) Ptr() *CompletionType {
	return &v
}

type NullableCompletionType struct {
	value *CompletionType
	isSet bool
}

func (v NullableCompletionType) Get() *CompletionType {
	return v.value
}

func (v *NullableCompletionType) Set(val *CompletionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionType(val *CompletionType) *NullableCompletionType {
	return &NullableCompletionType{value: val, isSet: true}
}

func (v NullableCompletionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

