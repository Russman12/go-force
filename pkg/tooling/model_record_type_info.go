/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// RecordTypeInfo The name of the named layout for the object. Standard objects can have defined named layouts which are separate from the primary layout for both the profile and the record type.
type RecordTypeInfo struct {
	// Indicates whether this record type is available (true) or not (false). Availability is used to display a list of available record types to the user when they are creating a new record.
	Available *bool `json:"available,omitempty"`
	// Indicates whether this is the default record type mapping (true) or not (false).
	DefaultRecordTypeMapping *bool `json:"defaultRecordTypeMapping,omitempty"`
	// Developer name of this record type. Available in API versions 43.0 and later.
	DeveloperName *string `json:"developerName,omitempty"`
	// Indicates whether this is the main record type (true) or not (false). The main record type is the default record type thatâ€™s used when a record has no custom record type associated with it.
	Master *bool `json:"master,omitempty"`
	// Name of this record type.
	Name *string `json:"name,omitempty"`
	// ID of this record type.
	RecordTypeId *string `json:"recordTypeId,omitempty"`
}

// NewRecordTypeInfo instantiates a new RecordTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordTypeInfo() *RecordTypeInfo {
	this := RecordTypeInfo{}
	return &this
}

// NewRecordTypeInfoWithDefaults instantiates a new RecordTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordTypeInfoWithDefaults() *RecordTypeInfo {
	this := RecordTypeInfo{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *RecordTypeInfo) GetAvailable() bool {
	if o == nil || isNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordTypeInfo) GetAvailableOk() (*bool, bool) {
	if o == nil || isNil(o.Available) {
    return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *RecordTypeInfo) HasAvailable() bool {
	if o != nil && !isNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *RecordTypeInfo) SetAvailable(v bool) {
	o.Available = &v
}

// GetDefaultRecordTypeMapping returns the DefaultRecordTypeMapping field value if set, zero value otherwise.
func (o *RecordTypeInfo) GetDefaultRecordTypeMapping() bool {
	if o == nil || isNil(o.DefaultRecordTypeMapping) {
		var ret bool
		return ret
	}
	return *o.DefaultRecordTypeMapping
}

// GetDefaultRecordTypeMappingOk returns a tuple with the DefaultRecordTypeMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordTypeInfo) GetDefaultRecordTypeMappingOk() (*bool, bool) {
	if o == nil || isNil(o.DefaultRecordTypeMapping) {
    return nil, false
	}
	return o.DefaultRecordTypeMapping, true
}

// HasDefaultRecordTypeMapping returns a boolean if a field has been set.
func (o *RecordTypeInfo) HasDefaultRecordTypeMapping() bool {
	if o != nil && !isNil(o.DefaultRecordTypeMapping) {
		return true
	}

	return false
}

// SetDefaultRecordTypeMapping gets a reference to the given bool and assigns it to the DefaultRecordTypeMapping field.
func (o *RecordTypeInfo) SetDefaultRecordTypeMapping(v bool) {
	o.DefaultRecordTypeMapping = &v
}

// GetDeveloperName returns the DeveloperName field value if set, zero value otherwise.
func (o *RecordTypeInfo) GetDeveloperName() string {
	if o == nil || isNil(o.DeveloperName) {
		var ret string
		return ret
	}
	return *o.DeveloperName
}

// GetDeveloperNameOk returns a tuple with the DeveloperName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordTypeInfo) GetDeveloperNameOk() (*string, bool) {
	if o == nil || isNil(o.DeveloperName) {
    return nil, false
	}
	return o.DeveloperName, true
}

// HasDeveloperName returns a boolean if a field has been set.
func (o *RecordTypeInfo) HasDeveloperName() bool {
	if o != nil && !isNil(o.DeveloperName) {
		return true
	}

	return false
}

// SetDeveloperName gets a reference to the given string and assigns it to the DeveloperName field.
func (o *RecordTypeInfo) SetDeveloperName(v string) {
	o.DeveloperName = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *RecordTypeInfo) GetMaster() bool {
	if o == nil || isNil(o.Master) {
		var ret bool
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordTypeInfo) GetMasterOk() (*bool, bool) {
	if o == nil || isNil(o.Master) {
    return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *RecordTypeInfo) HasMaster() bool {
	if o != nil && !isNil(o.Master) {
		return true
	}

	return false
}

// SetMaster gets a reference to the given bool and assigns it to the Master field.
func (o *RecordTypeInfo) SetMaster(v bool) {
	o.Master = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordTypeInfo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordTypeInfo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordTypeInfo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordTypeInfo) SetName(v string) {
	o.Name = &v
}

// GetRecordTypeId returns the RecordTypeId field value if set, zero value otherwise.
func (o *RecordTypeInfo) GetRecordTypeId() string {
	if o == nil || isNil(o.RecordTypeId) {
		var ret string
		return ret
	}
	return *o.RecordTypeId
}

// GetRecordTypeIdOk returns a tuple with the RecordTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordTypeInfo) GetRecordTypeIdOk() (*string, bool) {
	if o == nil || isNil(o.RecordTypeId) {
    return nil, false
	}
	return o.RecordTypeId, true
}

// HasRecordTypeId returns a boolean if a field has been set.
func (o *RecordTypeInfo) HasRecordTypeId() bool {
	if o != nil && !isNil(o.RecordTypeId) {
		return true
	}

	return false
}

// SetRecordTypeId gets a reference to the given string and assigns it to the RecordTypeId field.
func (o *RecordTypeInfo) SetRecordTypeId(v string) {
	o.RecordTypeId = &v
}

func (o RecordTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !isNil(o.DefaultRecordTypeMapping) {
		toSerialize["defaultRecordTypeMapping"] = o.DefaultRecordTypeMapping
	}
	if !isNil(o.DeveloperName) {
		toSerialize["developerName"] = o.DeveloperName
	}
	if !isNil(o.Master) {
		toSerialize["master"] = o.Master
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.RecordTypeId) {
		toSerialize["recordTypeId"] = o.RecordTypeId
	}
	return json.Marshal(toSerialize)
}

type NullableRecordTypeInfo struct {
	value *RecordTypeInfo
	isSet bool
}

func (v NullableRecordTypeInfo) Get() *RecordTypeInfo {
	return v.value
}

func (v *NullableRecordTypeInfo) Set(val *RecordTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordTypeInfo(val *RecordTypeInfo) *NullableRecordTypeInfo {
	return &NullableRecordTypeInfo{value: val, isSet: true}
}

func (v NullableRecordTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


