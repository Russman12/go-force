/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
	"fmt"
)

// EncodingType Use a compression header to compress a REST API request or response. Compression reduces the bandwidth required for a request, although it requires more processing power at your client. In most cases, this tradeoff benefits the overall performance of your application. REST API supports the gzip and deflate compression algorithms, as defined by the HTTP 1.1 specification. If youâ€™re unsure about which one to use, gzip is more common than deflate.
type EncodingType string

// List of EncodingType
const (
	ENCODINGTYPE_GZIP EncodingType = "gzip"
	ENCODINGTYPE_DEFLATE EncodingType = "deflate"
)

// All allowed values of EncodingType enum
var AllowedEncodingTypeEnumValues = []EncodingType{
	"gzip",
	"deflate",
}

func (v *EncodingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EncodingType(value)
	for _, existing := range AllowedEncodingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EncodingType", value)
}

// NewEncodingTypeFromValue returns a pointer to a valid EncodingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncodingTypeFromValue(v string) (*EncodingType, error) {
	ev := EncodingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EncodingType: valid values are %v", v, AllowedEncodingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncodingType) IsValid() bool {
	for _, existing := range AllowedEncodingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncodingType value
func (v EncodingType) Ptr() *EncodingType {
	return &v
}

type NullableEncodingType struct {
	value *EncodingType
	isSet bool
}

func (v NullableEncodingType) Get() *EncodingType {
	return v.value
}

func (v *NullableEncodingType) Set(val *EncodingType) {
	v.value = val
	v.isSet = true
}

func (v NullableEncodingType) IsSet() bool {
	return v.isSet
}

func (v *NullableEncodingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncodingType(val *EncodingType) *NullableEncodingType {
	return &NullableEncodingType{value: val, isSet: true}
}

func (v NullableEncodingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncodingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

