/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// TestResultsSuccess struct for TestResultsSuccess
type TestResultsSuccess struct {
	Id string `json:"id"`
	MethodName string `json:"methodName"`
	Name string `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	SeeAllData bool `json:"seeAllData"`
	Time float64 `json:"time"`
}

// NewTestResultsSuccess instantiates a new TestResultsSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultsSuccess(id string, methodName string, name string, seeAllData bool, time float64) *TestResultsSuccess {
	this := TestResultsSuccess{}
	this.Id = id
	this.MethodName = methodName
	this.Name = name
	this.SeeAllData = seeAllData
	this.Time = time
	return &this
}

// NewTestResultsSuccessWithDefaults instantiates a new TestResultsSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultsSuccessWithDefaults() *TestResultsSuccess {
	this := TestResultsSuccess{}
	return &this
}

// GetId returns the Id field value
func (o *TestResultsSuccess) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestResultsSuccess) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestResultsSuccess) SetId(v string) {
	o.Id = v
}

// GetMethodName returns the MethodName field value
func (o *TestResultsSuccess) GetMethodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MethodName
}

// GetMethodNameOk returns a tuple with the MethodName field value
// and a boolean to check if the value has been set.
func (o *TestResultsSuccess) GetMethodNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MethodName, true
}

// SetMethodName sets field value
func (o *TestResultsSuccess) SetMethodName(v string) {
	o.MethodName = v
}

// GetName returns the Name field value
func (o *TestResultsSuccess) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TestResultsSuccess) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TestResultsSuccess) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *TestResultsSuccess) GetNamespace() string {
	if o == nil || isNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultsSuccess) GetNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.Namespace) {
    return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *TestResultsSuccess) HasNamespace() bool {
	if o != nil && !isNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *TestResultsSuccess) SetNamespace(v string) {
	o.Namespace = &v
}

// GetSeeAllData returns the SeeAllData field value
func (o *TestResultsSuccess) GetSeeAllData() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SeeAllData
}

// GetSeeAllDataOk returns a tuple with the SeeAllData field value
// and a boolean to check if the value has been set.
func (o *TestResultsSuccess) GetSeeAllDataOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SeeAllData, true
}

// SetSeeAllData sets field value
func (o *TestResultsSuccess) SetSeeAllData(v bool) {
	o.SeeAllData = v
}

// GetTime returns the Time field value
func (o *TestResultsSuccess) GetTime() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *TestResultsSuccess) GetTimeOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *TestResultsSuccess) SetTime(v float64) {
	o.Time = v
}

func (o TestResultsSuccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["methodName"] = o.MethodName
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["seeAllData"] = o.SeeAllData
	}
	if true {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableTestResultsSuccess struct {
	value *TestResultsSuccess
	isSet bool
}

func (v NullableTestResultsSuccess) Get() *TestResultsSuccess {
	return v.value
}

func (v *NullableTestResultsSuccess) Set(val *TestResultsSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultsSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultsSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultsSuccess(val *TestResultsSuccess) *NullableTestResultsSuccess {
	return &NullableTestResultsSuccess{value: val, isSet: true}
}

func (v NullableTestResultsSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultsSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


