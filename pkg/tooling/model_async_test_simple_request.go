/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// AsyncTestSimpleRequest struct for AsyncTestSimpleRequest
type AsyncTestSimpleRequest struct {
	ClassNames *string `json:"classNames,omitempty"`
	Classids *string `json:"classids,omitempty"`
	SuiteNames *string `json:"suiteNames,omitempty"`
	Suiteids *string `json:"suiteids,omitempty"`
	MaxFailedTests *string `json:"maxFailedTests,omitempty"`
	TestLevel *string `json:"testLevel,omitempty"`
	SkipCodeCoverage *string `json:"skipCodeCoverage,omitempty"`
}

// NewAsyncTestSimpleRequest instantiates a new AsyncTestSimpleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncTestSimpleRequest() *AsyncTestSimpleRequest {
	this := AsyncTestSimpleRequest{}
	return &this
}

// NewAsyncTestSimpleRequestWithDefaults instantiates a new AsyncTestSimpleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncTestSimpleRequestWithDefaults() *AsyncTestSimpleRequest {
	this := AsyncTestSimpleRequest{}
	return &this
}

// GetClassNames returns the ClassNames field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetClassNames() string {
	if o == nil || isNil(o.ClassNames) {
		var ret string
		return ret
	}
	return *o.ClassNames
}

// GetClassNamesOk returns a tuple with the ClassNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetClassNamesOk() (*string, bool) {
	if o == nil || isNil(o.ClassNames) {
    return nil, false
	}
	return o.ClassNames, true
}

// HasClassNames returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasClassNames() bool {
	if o != nil && !isNil(o.ClassNames) {
		return true
	}

	return false
}

// SetClassNames gets a reference to the given string and assigns it to the ClassNames field.
func (o *AsyncTestSimpleRequest) SetClassNames(v string) {
	o.ClassNames = &v
}

// GetClassids returns the Classids field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetClassids() string {
	if o == nil || isNil(o.Classids) {
		var ret string
		return ret
	}
	return *o.Classids
}

// GetClassidsOk returns a tuple with the Classids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetClassidsOk() (*string, bool) {
	if o == nil || isNil(o.Classids) {
    return nil, false
	}
	return o.Classids, true
}

// HasClassids returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasClassids() bool {
	if o != nil && !isNil(o.Classids) {
		return true
	}

	return false
}

// SetClassids gets a reference to the given string and assigns it to the Classids field.
func (o *AsyncTestSimpleRequest) SetClassids(v string) {
	o.Classids = &v
}

// GetSuiteNames returns the SuiteNames field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetSuiteNames() string {
	if o == nil || isNil(o.SuiteNames) {
		var ret string
		return ret
	}
	return *o.SuiteNames
}

// GetSuiteNamesOk returns a tuple with the SuiteNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetSuiteNamesOk() (*string, bool) {
	if o == nil || isNil(o.SuiteNames) {
    return nil, false
	}
	return o.SuiteNames, true
}

// HasSuiteNames returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasSuiteNames() bool {
	if o != nil && !isNil(o.SuiteNames) {
		return true
	}

	return false
}

// SetSuiteNames gets a reference to the given string and assigns it to the SuiteNames field.
func (o *AsyncTestSimpleRequest) SetSuiteNames(v string) {
	o.SuiteNames = &v
}

// GetSuiteids returns the Suiteids field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetSuiteids() string {
	if o == nil || isNil(o.Suiteids) {
		var ret string
		return ret
	}
	return *o.Suiteids
}

// GetSuiteidsOk returns a tuple with the Suiteids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetSuiteidsOk() (*string, bool) {
	if o == nil || isNil(o.Suiteids) {
    return nil, false
	}
	return o.Suiteids, true
}

// HasSuiteids returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasSuiteids() bool {
	if o != nil && !isNil(o.Suiteids) {
		return true
	}

	return false
}

// SetSuiteids gets a reference to the given string and assigns it to the Suiteids field.
func (o *AsyncTestSimpleRequest) SetSuiteids(v string) {
	o.Suiteids = &v
}

// GetMaxFailedTests returns the MaxFailedTests field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetMaxFailedTests() string {
	if o == nil || isNil(o.MaxFailedTests) {
		var ret string
		return ret
	}
	return *o.MaxFailedTests
}

// GetMaxFailedTestsOk returns a tuple with the MaxFailedTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetMaxFailedTestsOk() (*string, bool) {
	if o == nil || isNil(o.MaxFailedTests) {
    return nil, false
	}
	return o.MaxFailedTests, true
}

// HasMaxFailedTests returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasMaxFailedTests() bool {
	if o != nil && !isNil(o.MaxFailedTests) {
		return true
	}

	return false
}

// SetMaxFailedTests gets a reference to the given string and assigns it to the MaxFailedTests field.
func (o *AsyncTestSimpleRequest) SetMaxFailedTests(v string) {
	o.MaxFailedTests = &v
}

// GetTestLevel returns the TestLevel field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetTestLevel() string {
	if o == nil || isNil(o.TestLevel) {
		var ret string
		return ret
	}
	return *o.TestLevel
}

// GetTestLevelOk returns a tuple with the TestLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetTestLevelOk() (*string, bool) {
	if o == nil || isNil(o.TestLevel) {
    return nil, false
	}
	return o.TestLevel, true
}

// HasTestLevel returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasTestLevel() bool {
	if o != nil && !isNil(o.TestLevel) {
		return true
	}

	return false
}

// SetTestLevel gets a reference to the given string and assigns it to the TestLevel field.
func (o *AsyncTestSimpleRequest) SetTestLevel(v string) {
	o.TestLevel = &v
}

// GetSkipCodeCoverage returns the SkipCodeCoverage field value if set, zero value otherwise.
func (o *AsyncTestSimpleRequest) GetSkipCodeCoverage() string {
	if o == nil || isNil(o.SkipCodeCoverage) {
		var ret string
		return ret
	}
	return *o.SkipCodeCoverage
}

// GetSkipCodeCoverageOk returns a tuple with the SkipCodeCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTestSimpleRequest) GetSkipCodeCoverageOk() (*string, bool) {
	if o == nil || isNil(o.SkipCodeCoverage) {
    return nil, false
	}
	return o.SkipCodeCoverage, true
}

// HasSkipCodeCoverage returns a boolean if a field has been set.
func (o *AsyncTestSimpleRequest) HasSkipCodeCoverage() bool {
	if o != nil && !isNil(o.SkipCodeCoverage) {
		return true
	}

	return false
}

// SetSkipCodeCoverage gets a reference to the given string and assigns it to the SkipCodeCoverage field.
func (o *AsyncTestSimpleRequest) SetSkipCodeCoverage(v string) {
	o.SkipCodeCoverage = &v
}

func (o AsyncTestSimpleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ClassNames) {
		toSerialize["classNames"] = o.ClassNames
	}
	if !isNil(o.Classids) {
		toSerialize["classids"] = o.Classids
	}
	if !isNil(o.SuiteNames) {
		toSerialize["suiteNames"] = o.SuiteNames
	}
	if !isNil(o.Suiteids) {
		toSerialize["suiteids"] = o.Suiteids
	}
	if !isNil(o.MaxFailedTests) {
		toSerialize["maxFailedTests"] = o.MaxFailedTests
	}
	if !isNil(o.TestLevel) {
		toSerialize["testLevel"] = o.TestLevel
	}
	if !isNil(o.SkipCodeCoverage) {
		toSerialize["skipCodeCoverage"] = o.SkipCodeCoverage
	}
	return json.Marshal(toSerialize)
}

type NullableAsyncTestSimpleRequest struct {
	value *AsyncTestSimpleRequest
	isSet bool
}

func (v NullableAsyncTestSimpleRequest) Get() *AsyncTestSimpleRequest {
	return v.value
}

func (v *NullableAsyncTestSimpleRequest) Set(val *AsyncTestSimpleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncTestSimpleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncTestSimpleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncTestSimpleRequest(val *AsyncTestSimpleRequest) *NullableAsyncTestSimpleRequest {
	return &NullableAsyncTestSimpleRequest{value: val, isSet: true}
}

func (v NullableAsyncTestSimpleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncTestSimpleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


