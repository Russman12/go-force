/*
Salesforce Platform REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tooling

import (
	"encoding/json"
)

// PicklistEntry struct for PicklistEntry
type PicklistEntry struct {
	// Indicates whether this item must be displayed (true) or not (false) in the drop-down list for the picklist field in the user interface.
	Active *bool `json:"active,omitempty"`
	// A set of bits where each bit indicates a controlling value for which this `PicklistEntry` is valid. See About Dependent Picklists.
	ValidFor *string `json:"validFor,omitempty"`
	// Indicates whether this item is the default item (true) in the picklist or not (false). Only one item in a picklist can be designated as the default.
	DefaultValue *bool `json:"defaultValue,omitempty"`
	// Display name of this item in the picklist.
	Label *string `json:"label,omitempty"`
	// Value of this item in the picklist.
	Value *string `json:"value,omitempty"`
}

// NewPicklistEntry instantiates a new PicklistEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPicklistEntry() *PicklistEntry {
	this := PicklistEntry{}
	return &this
}

// NewPicklistEntryWithDefaults instantiates a new PicklistEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPicklistEntryWithDefaults() *PicklistEntry {
	this := PicklistEntry{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PicklistEntry) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicklistEntry) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
    return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PicklistEntry) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PicklistEntry) SetActive(v bool) {
	o.Active = &v
}

// GetValidFor returns the ValidFor field value if set, zero value otherwise.
func (o *PicklistEntry) GetValidFor() string {
	if o == nil || isNil(o.ValidFor) {
		var ret string
		return ret
	}
	return *o.ValidFor
}

// GetValidForOk returns a tuple with the ValidFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicklistEntry) GetValidForOk() (*string, bool) {
	if o == nil || isNil(o.ValidFor) {
    return nil, false
	}
	return o.ValidFor, true
}

// HasValidFor returns a boolean if a field has been set.
func (o *PicklistEntry) HasValidFor() bool {
	if o != nil && !isNil(o.ValidFor) {
		return true
	}

	return false
}

// SetValidFor gets a reference to the given string and assigns it to the ValidFor field.
func (o *PicklistEntry) SetValidFor(v string) {
	o.ValidFor = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *PicklistEntry) GetDefaultValue() bool {
	if o == nil || isNil(o.DefaultValue) {
		var ret bool
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicklistEntry) GetDefaultValueOk() (*bool, bool) {
	if o == nil || isNil(o.DefaultValue) {
    return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *PicklistEntry) HasDefaultValue() bool {
	if o != nil && !isNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given bool and assigns it to the DefaultValue field.
func (o *PicklistEntry) SetDefaultValue(v bool) {
	o.DefaultValue = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PicklistEntry) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicklistEntry) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PicklistEntry) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PicklistEntry) SetLabel(v string) {
	o.Label = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PicklistEntry) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicklistEntry) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PicklistEntry) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PicklistEntry) SetValue(v string) {
	o.Value = &v
}

func (o PicklistEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.ValidFor) {
		toSerialize["validFor"] = o.ValidFor
	}
	if !isNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePicklistEntry struct {
	value *PicklistEntry
	isSet bool
}

func (v NullablePicklistEntry) Get() *PicklistEntry {
	return v.value
}

func (v *NullablePicklistEntry) Set(val *PicklistEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePicklistEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePicklistEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePicklistEntry(val *PicklistEntry) *NullablePicklistEntry {
	return &NullablePicklistEntry{value: val, isSet: true}
}

func (v NullablePicklistEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePicklistEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


