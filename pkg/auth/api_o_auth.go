/*
Salesforce Platform Auth API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// OAuthApiService OAuthApi service
type OAuthApiService service

type ApiOAuthUserPassRequest struct {
	ctx          context.Context
	ApiService   *OAuthApiService
	clientId     *string
	clientSecret *string
	username     *string
	password     *string
	grantType    *string
}

// The consumer key provided in the connected app.
func (r ApiOAuthUserPassRequest) ClientId(clientId string) ApiOAuthUserPassRequest {
	r.clientId = &clientId
	return r
}

// The consumer secret provided in the connected app.
func (r ApiOAuthUserPassRequest) ClientSecret(clientSecret string) ApiOAuthUserPassRequest {
	r.clientSecret = &clientSecret
	return r
}

// Your Salesforce username.
func (r ApiOAuthUserPassRequest) Username(username string) ApiOAuthUserPassRequest {
	r.username = &username
	return r
}

// Your Salesforce password.
func (r ApiOAuthUserPassRequest) Password(password string) ApiOAuthUserPassRequest {
	r.password = &password
	return r
}

// Sets the value of this parameter to password.
func (r ApiOAuthUserPassRequest) GrantType(grantType string) ApiOAuthUserPassRequest {
	r.grantType = &grantType
	return r
}

func (r ApiOAuthUserPassRequest) Execute() (*AuthResponse, *http.Response, error) {
	return r.ApiService.OAuthUserPassExecute(r)
}

/*
OAuthUserPass Get OAuth2 token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOAuthUserPassRequest
*/
func (a *OAuthApiService) OAuthUserPass(ctx context.Context) ApiOAuthUserPassRequest {
	return ApiOAuthUserPassRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AuthResponse
func (a *OAuthApiService) OAuthUserPassExecute(r ApiOAuthUserPassRequest) (*AuthResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuthResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthApiService.OAuthUserPass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.clientSecret == nil {
		return localVarReturnValue, nil, reportError("clientSecret is required and must be specified")
	}
	if r.username == nil {
		return localVarReturnValue, nil, reportError("username is required and must be specified")
	}
	if r.password == nil {
		return localVarReturnValue, nil, reportError("password is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.grantType != nil {
		localVarFormParams.Add("grant_type", parameterToString(*r.grantType, ""))
	}
	localVarFormParams.Add("client_id", parameterToString(*r.clientId, ""))
	localVarFormParams.Add("client_secret", parameterToString(*r.clientSecret, ""))
	localVarFormParams.Add("username", parameterToString(*r.username, ""))
	localVarFormParams.Add("password", parameterToString(*r.password, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
