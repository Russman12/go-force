/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// Job struct for Job

type JobColumnDelimiter int

const (
	JOB_COLUMN_DELIMITER_BACKQUOTE JobColumnDelimiter = iota
	JOB_COLUMN_DELIMITER_CARET
	JOB_COLUMN_DELIMITER_COMMA
	JOB_COLUMN_DELIMITER_PIPE
	JOB_COLUMN_DELIMITER_SEMICOLON
	JOB_COLUMN_DELIMITER_TAB
)

func (e *JobColumnDelimiter) String() *string {
	s := []string{"BACKQUOTE", "CARET", "COMMA", "PIPE", "SEMICOLON", "TAB"}[*e]
	return &s
}
func (e *JobColumnDelimiter) Get() *string {
	return e.String()
}
func (e *JobColumnDelimiter) IsSet() bool {
	return e != nil
}
func (e *JobColumnDelimiter) Set(val *JobColumnDelimiter) {
	e = val
}
func (e *JobColumnDelimiter) Unset() {
	e.Set(nil)
}
func (e JobColumnDelimiter) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *JobColumnDelimiter) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := JobColumnDelimiterParse(str)

	return err
}
func JobColumnDelimiterParse(s string) (*JobColumnDelimiter, error) {
	for i, e := range []string{"BACKQUOTE", "CARET", "COMMA", "PIPE", "SEMICOLON", "TAB"} {
		if s == e {
			enum := JobColumnDelimiter(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid JobColumnDelimiter", s)
}

type JobContentType int

const (
	JOB_CONTENT_TYPE_CSV JobContentType = iota
)

func (e *JobContentType) String() string {
	s := []string{"CSV"}[*e]
	return s
}
func (e JobContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *JobContentType) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := JobContentTypeParse(str)

	return err
}
func JobContentTypeParse(s string) (*JobContentType, error) {
	for i, e := range []string{"CSV"} {
		if s == e {
			enum := JobContentType(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid JobContentType", s)
}

type JobLineEnding int

const (
	JOB_LINE_ENDING_LF JobLineEnding = iota
	JOB_LINE_ENDING_CRLF
)

func (e *JobLineEnding) String() string {
	s := []string{"LF", "CRLF"}[*e]
	return s
}
func (e JobLineEnding) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *JobLineEnding) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := JobLineEndingParse(str)

	return err
}
func JobLineEndingParse(s string) (*JobLineEnding, error) {
	for i, e := range []string{"LF", "CRLF"} {
		if s == e {
			enum := JobLineEnding(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid JobLineEnding", s)
}

type JobOperation int

const (
	JOB_OPERATION_INSERT JobOperation = iota
	JOB_OPERATION_DELETE
	JOB_OPERATION_HARD_DELETE
	JOB_OPERATION_UPDATE
	JOB_OPERATION_UPSERT
)

func (e *JobOperation) String() string {
	s := []string{"insert", "delete", "hardDelete", "update", "upsert"}[*e]
	return s
}
func (e JobOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *JobOperation) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := JobOperationParse(str)

	return err
}
func JobOperationParse(s string) (*JobOperation, error) {
	for i, e := range []string{"insert", "delete", "hardDelete", "update", "upsert"} {
		if s == e {
			enum := JobOperation(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid JobOperation", s)
}

type Job struct {
	// The ID of the assignment rule. This property is only shown if an assignment rule is specified when the job is created.
	AssignmentRuleId *string `json:"assignmentRuleId,omitempty"`
	// The column delimiter used for CSV job data.
	ColumnDelimiter JobColumnDelimiter `json:"columnDelimiter,omitempty"`
	// The format of the data being processed. Only CSV is supported.
	ContentType *JobContentType `json:"contentType,omitempty"`
	// The name of the external ID field for an upsert.
	ExternalIdFieldName *string `json:"externalIdFieldName,omitempty"`
	// The line ending used for CSV job data.
	LineEnding *JobLineEnding `json:"lineEnding,omitempty"`
	// The object type for the data being processed.
	Object string `json:"object"`
	// The processing operation for the job.
	Operation JobOperation `json:"operation"`
}

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(object string, operation JobOperation) *Job {
	this := Job{}
	this.Object = object
	this.Operation = operation
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetAssignmentRuleId returns the AssignmentRuleId field value if set, zero value otherwise.
func (o *Job) GetAssignmentRuleId() string {
	if o == nil || isNil(o.AssignmentRuleId) {
		var ret string
		return ret
	}
	return *o.AssignmentRuleId
}

// GetAssignmentRuleIdOk returns a tuple with the AssignmentRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetAssignmentRuleIdOk() (*string, bool) {
	if o == nil || isNil(o.AssignmentRuleId) {
		return nil, false
	}
	return o.AssignmentRuleId, true
}

// HasAssignmentRuleId returns a boolean if a field has been set.
func (o *Job) HasAssignmentRuleId() bool {
	if o != nil && !isNil(o.AssignmentRuleId) {
		return true
	}

	return false
}

// SetAssignmentRuleId gets a reference to the given string and assigns it to the AssignmentRuleId field.
func (o *Job) SetAssignmentRuleId(v string) {
	o.AssignmentRuleId = &v
}

// GetColumnDelimiter returns the ColumnDelimiter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetColumnDelimiter() string {
	if o == nil || isNil(o.ColumnDelimiter.Get()) {
		var ret string
		return ret
	}
	return *o.ColumnDelimiter.Get()
}

// GetColumnDelimiterOk returns a tuple with the ColumnDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetColumnDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColumnDelimiter.Get(), o.ColumnDelimiter.IsSet()
}

// HasColumnDelimiter returns a boolean if a field has been set.
func (o *Job) HasColumnDelimiter() bool {
	if o != nil && o.ColumnDelimiter.IsSet() {
		return true
	}

	return false
}

// SetColumnDelimiter gets a reference to the given NullableString and assigns it to the ColumnDelimiter field.
func (o *Job) SetColumnDelimiter(v JobColumnDelimiter) {
	o.ColumnDelimiter.Set(&v)
}

// SetColumnDelimiterNil sets the value for ColumnDelimiter to be an explicit nil
func (o *Job) SetColumnDelimiterNil() {
	o.ColumnDelimiter.Set(nil)
}

// UnsetColumnDelimiter ensures that no value is present for ColumnDelimiter, not even an explicit nil
func (o *Job) UnsetColumnDelimiter() {
	o.ColumnDelimiter.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *Job) GetContentType() string {
	if o == nil || isNil(o.ContentType) {
		var ret string
		return ret
	}
	return o.ContentType.String()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetContentTypeOk() (*string, bool) {
	if o == nil || isNil(o.ContentType) {
		return nil, false
	}
	s := o.ContentType.String()
	return &s, true
}

// HasContentType returns a boolean if a field has been set.
func (o *Job) HasContentType() bool {
	if o != nil && !isNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *Job) SetContentType(v JobContentType) {
	o.ContentType = &v
}

// GetExternalIdFieldName returns the ExternalIdFieldName field value if set, zero value otherwise.
func (o *Job) GetExternalIdFieldName() string {
	if o == nil || isNil(o.ExternalIdFieldName) {
		var ret string
		return ret
	}
	return *o.ExternalIdFieldName
}

// GetExternalIdFieldNameOk returns a tuple with the ExternalIdFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetExternalIdFieldNameOk() (*string, bool) {
	if o == nil || isNil(o.ExternalIdFieldName) {
		return nil, false
	}
	return o.ExternalIdFieldName, true
}

// HasExternalIdFieldName returns a boolean if a field has been set.
func (o *Job) HasExternalIdFieldName() bool {
	if o != nil && !isNil(o.ExternalIdFieldName) {
		return true
	}

	return false
}

// SetExternalIdFieldName gets a reference to the given string and assigns it to the ExternalIdFieldName field.
func (o *Job) SetExternalIdFieldName(v string) {
	o.ExternalIdFieldName = &v
}

// GetLineEnding returns the LineEnding field value if set, zero value otherwise.
func (o *Job) GetLineEnding() string {
	if o == nil || isNil(o.LineEnding) {
		var ret string
		return ret
	}
	return o.LineEnding.String()
}

// GetLineEndingOk returns a tuple with the LineEnding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetLineEndingOk() (*string, bool) {
	if o == nil || isNil(o.LineEnding) {
		return nil, false
	}
	s := o.LineEnding.String()
	return &s, true
}

// HasLineEnding returns a boolean if a field has been set.
func (o *Job) HasLineEnding() bool {
	if o != nil && !isNil(o.LineEnding) {
		return true
	}

	return false
}

// SetLineEnding gets a reference to the given string and assigns it to the LineEnding field.
func (o *Job) SetLineEnding(v JobLineEnding) {
	o.LineEnding = &v
}

// GetObject returns the Object field value
func (o *Job) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Job) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Job) SetObject(v string) {
	o.Object = v
}

// GetOperation returns the Operation field value
func (o *Job) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation.String()
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Job) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	s := o.Operation.String()
	return &s, true
}

// SetOperation sets field value
func (o *Job) SetOperation(v JobOperation) {
	o.Operation = v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssignmentRuleId) {
		toSerialize["assignmentRuleId"] = o.AssignmentRuleId
	}
	if o.ColumnDelimiter.IsSet() {
		toSerialize["columnDelimiter"] = o.ColumnDelimiter.Get()
	}
	if !isNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !isNil(o.ExternalIdFieldName) {
		toSerialize["externalIdFieldName"] = o.ExternalIdFieldName
	}
	if !isNil(o.LineEnding) {
		toSerialize["lineEnding"] = o.LineEnding
	}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["operation"] = o.Operation
	}
	return json.Marshal(toSerialize)
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
