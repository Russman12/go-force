/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// ColumnDelimiter The column delimiter used for CSV job data.
type ColumnDelimiter string

// List of ColumnDelimiter
const (
	COLUMNDELIMITER_BACKQUOTE ColumnDelimiter = "BACKQUOTE"
	COLUMNDELIMITER_CARET     ColumnDelimiter = "CARET"
	COLUMNDELIMITER_COMMA     ColumnDelimiter = "COMMA"
	COLUMNDELIMITER_PIPE      ColumnDelimiter = "PIPE"
	COLUMNDELIMITER_SEMICOLON ColumnDelimiter = "SEMICOLON"
	COLUMNDELIMITER_TAB       ColumnDelimiter = "TAB"
)

// All allowed values of ColumnDelimiter enum
var AllowedColumnDelimiterEnumValues = []ColumnDelimiter{
	"BACKQUOTE",
	"CARET",
	"COMMA",
	"PIPE",
	"SEMICOLON",
	"TAB",
}

func (v *ColumnDelimiter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ColumnDelimiter(value)
	for _, existing := range AllowedColumnDelimiterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ColumnDelimiter", value)
}

// NewColumnDelimiterFromValue returns a pointer to a valid ColumnDelimiter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewColumnDelimiterFromValue(v string) (*ColumnDelimiter, error) {
	ev := ColumnDelimiter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ColumnDelimiter: valid values are %v", v, AllowedColumnDelimiterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ColumnDelimiter) IsValid() bool {
	for _, existing := range AllowedColumnDelimiterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ColumnDelimiter value
func (v ColumnDelimiter) Ptr() *ColumnDelimiter {
	return &v
}

type NullableColumnDelimiter struct {
	value *ColumnDelimiter
	isSet bool
}

func (v NullableColumnDelimiter) Get() *ColumnDelimiter {
	return v.value
}

func (v *NullableColumnDelimiter) Set(val *ColumnDelimiter) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnDelimiter) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnDelimiter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnDelimiter(val *ColumnDelimiter) *NullableColumnDelimiter {
	return &NullableColumnDelimiter{value: val, isSet: true}
}

func (v NullableColumnDelimiter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnDelimiter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
