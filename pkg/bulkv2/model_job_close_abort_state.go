/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// JobCloseAbortState The state to update the job to. Use UploadComplete to close a job, or Aborted to abort a job.
type JobCloseAbortState string

// List of JobCloseAbortState
const (
	JOBCLOSEABORTSTATE_UPLOAD_COMPLETE JobCloseAbortState = "UploadComplete"
	JOBCLOSEABORTSTATE_ABORTED         JobCloseAbortState = "Aborted"
)

// All allowed values of JobCloseAbortState enum
var AllowedJobCloseAbortStateEnumValues = []JobCloseAbortState{
	"UploadComplete",
	"Aborted",
}

func (v *JobCloseAbortState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobCloseAbortState(value)
	for _, existing := range AllowedJobCloseAbortStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobCloseAbortState", value)
}

// NewJobCloseAbortStateFromValue returns a pointer to a valid JobCloseAbortState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobCloseAbortStateFromValue(v string) (*JobCloseAbortState, error) {
	ev := JobCloseAbortState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobCloseAbortState: valid values are %v", v, AllowedJobCloseAbortStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobCloseAbortState) IsValid() bool {
	for _, existing := range AllowedJobCloseAbortStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobCloseAbortState value
func (v JobCloseAbortState) Ptr() *JobCloseAbortState {
	return &v
}

type NullableJobCloseAbortState struct {
	value *JobCloseAbortState
	isSet bool
}

func (v NullableJobCloseAbortState) Get() *JobCloseAbortState {
	return v.value
}

func (v *NullableJobCloseAbortState) Set(val *JobCloseAbortState) {
	v.value = val
	v.isSet = true
}

func (v NullableJobCloseAbortState) IsSet() bool {
	return v.isSet
}

func (v *NullableJobCloseAbortState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobCloseAbortState(val *JobCloseAbortState) *NullableJobCloseAbortState {
	return &NullableJobCloseAbortState{value: val, isSet: true}
}

func (v NullableJobCloseAbortState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobCloseAbortState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
