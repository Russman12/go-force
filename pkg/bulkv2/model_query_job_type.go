/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// QueryJobType The jobâ€™s type. For a query job, the type is always V2Query.
type QueryJobType string

// List of QueryJobType
const (
	QUERYJOBTYPE_V2_QUERY QueryJobType = "V2Query"
)

// All allowed values of QueryJobType enum
var AllowedQueryJobTypeEnumValues = []QueryJobType{
	"V2Query",
}

func (v *QueryJobType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryJobType(value)
	for _, existing := range AllowedQueryJobTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryJobType", value)
}

// NewQueryJobTypeFromValue returns a pointer to a valid QueryJobType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryJobTypeFromValue(v string) (*QueryJobType, error) {
	ev := QueryJobType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryJobType: valid values are %v", v, AllowedQueryJobTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryJobType) IsValid() bool {
	for _, existing := range AllowedQueryJobTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryJobType value
func (v QueryJobType) Ptr() *QueryJobType {
	return &v
}

type NullableQueryJobType struct {
	value *QueryJobType
	isSet bool
}

func (v NullableQueryJobType) Get() *QueryJobType {
	return v.value
}

func (v *NullableQueryJobType) Set(val *QueryJobType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryJobType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryJobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryJobType(val *QueryJobType) *NullableQueryJobType {
	return &NullableQueryJobType{value: val, isSet: true}
}

func (v NullableQueryJobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryJobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
