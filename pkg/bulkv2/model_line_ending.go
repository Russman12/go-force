/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// LineEnding The line ending used for CSV job data.
type LineEnding string

// List of LineEnding
const (
	LINEENDING_LF   LineEnding = "LF"
	LINEENDING_CRLF LineEnding = "CRLF"
)

// All allowed values of LineEnding enum
var AllowedLineEndingEnumValues = []LineEnding{
	"LF",
	"CRLF",
}

func (v *LineEnding) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LineEnding(value)
	for _, existing := range AllowedLineEndingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LineEnding", value)
}

// NewLineEndingFromValue returns a pointer to a valid LineEnding
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLineEndingFromValue(v string) (*LineEnding, error) {
	ev := LineEnding(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LineEnding: valid values are %v", v, AllowedLineEndingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LineEnding) IsValid() bool {
	for _, existing := range AllowedLineEndingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LineEnding value
func (v LineEnding) Ptr() *LineEnding {
	return &v
}

type NullableLineEnding struct {
	value *LineEnding
	isSet bool
}

func (v NullableLineEnding) Get() *LineEnding {
	return v.value
}

func (v *NullableLineEnding) Set(val *LineEnding) {
	v.value = val
	v.isSet = true
}

func (v NullableLineEnding) IsSet() bool {
	return v.isSet
}

func (v *NullableLineEnding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineEnding(val *LineEnding) *NullableLineEnding {
	return &NullableLineEnding{value: val, isSet: true}
}

func (v NullableLineEnding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineEnding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
