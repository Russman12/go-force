/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// QueryJob struct for QueryJob

type QueryJobOperation int

const (
	QUERY_JOB_OPERATION_QUERY QueryJobOperation = iota
	QUERY_JOB_OPERATION_QUERY_ALL
)

func (e *QueryJobOperation) String() string {
	s := []string{"query", "queryAll"}[*e]
	return s
}
func (e QueryJobOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *QueryJobOperation) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := QueryJobOperationParse(str)

	return err
}
func QueryJobOperationParse(s string) (*QueryJobOperation, error) {
	for i, e := range []string{"query", "queryAll"} {
		if s == e {
			enum := QueryJobOperation(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid QueryJobOperation", s)
}

type QueryJobContentType int

const (
	QUERY_JOB_CONTENT_TYPE_CSV QueryJobContentType = iota
)

func (e *QueryJobContentType) String() string {
	s := []string{"CSV"}[*e]
	return s
}
func (e QueryJobContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *QueryJobContentType) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := QueryJobContentTypeParse(str)

	return err
}
func QueryJobContentTypeParse(s string) (*QueryJobContentType, error) {
	for i, e := range []string{"CSV"} {
		if s == e {
			enum := QueryJobContentType(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid QueryJobContentType", s)
}

type QueryJobColumnDelimiter int

const (
	QUERY_JOB_COLUMN_DELIMITER_BACKQUOTE QueryJobColumnDelimiter = iota
	QUERY_JOB_COLUMN_DELIMITER_CARET
	QUERY_JOB_COLUMN_DELIMITER_COMMA
	QUERY_JOB_COLUMN_DELIMITER_PIPE
	QUERY_JOB_COLUMN_DELIMITER_SEMICOLON
	QUERY_JOB_COLUMN_DELIMITER_TAB
)

func (e *QueryJobColumnDelimiter) String() *string {
	s := []string{"BACKQUOTE", "CARET", "COMMA", "PIPE", "SEMICOLON", "TAB"}[*e]
	return &s
}
func (e *QueryJobColumnDelimiter) Get() *string {
	return e.String()
}
func (e *QueryJobColumnDelimiter) IsSet() bool {
	return e != nil
}
func (e *QueryJobColumnDelimiter) Set(val *QueryJobColumnDelimiter) {
	e = val
}
func (e *QueryJobColumnDelimiter) Unset() {
	e.Set(nil)
}
func (e QueryJobColumnDelimiter) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *QueryJobColumnDelimiter) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := QueryJobColumnDelimiterParse(str)

	return err
}
func QueryJobColumnDelimiterParse(s string) (*QueryJobColumnDelimiter, error) {
	for i, e := range []string{"BACKQUOTE", "CARET", "COMMA", "PIPE", "SEMICOLON", "TAB"} {
		if s == e {
			enum := QueryJobColumnDelimiter(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid QueryJobColumnDelimiter", s)
}

type QueryJobLineEnding int

const (
	QUERY_JOB_LINE_ENDING_LF QueryJobLineEnding = iota
	QUERY_JOB_LINE_ENDING_CRLF
)

func (e *QueryJobLineEnding) String() string {
	s := []string{"LF", "CRLF"}[*e]
	return s
}
func (e QueryJobLineEnding) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *QueryJobLineEnding) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	e, err := QueryJobLineEndingParse(str)

	return err
}
func QueryJobLineEndingParse(s string) (*QueryJobLineEnding, error) {
	for i, e := range []string{"LF", "CRLF"} {
		if s == e {
			enum := QueryJobLineEnding(i)
			return &enum, nil
		}
	}
	return nil, fmt.Errorf("%q is not a valid QueryJobLineEnding", s)
}

type QueryJob struct {
	// The type of query.
	Operation *QueryJobOperation `json:"operation,omitempty"`
	// The format that is used for the results. Currently the only supported value is CSV.
	ContentType *QueryJobContentType `json:"contentType,omitempty"`
	// The column delimiter used for CSV job data. The default value is COMMA.
	ColumnDelimiter QueryJobColumnDelimiter `json:"columnDelimiter,omitempty"`
	// The line ending used for CSV job data, marking the end of a data row. The default is LF.
	LineEnding *QueryJobLineEnding `json:"lineEnding,omitempty"`
}

// NewQueryJob instantiates a new QueryJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryJob() *QueryJob {
	this := QueryJob{}
	return &this
}

// NewQueryJobWithDefaults instantiates a new QueryJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryJobWithDefaults() *QueryJob {
	this := QueryJob{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *QueryJob) GetOperation() string {
	if o == nil || isNil(o.Operation) {
		var ret string
		return ret
	}
	return o.Operation.String()
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetOperationOk() (*string, bool) {
	if o == nil || isNil(o.Operation) {
		return nil, false
	}
	s := o.Operation.String()
	return &s, true
}

// HasOperation returns a boolean if a field has been set.
func (o *QueryJob) HasOperation() bool {
	if o != nil && !isNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *QueryJob) SetOperation(v QueryJobOperation) {
	o.Operation = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *QueryJob) GetContentType() string {
	if o == nil || isNil(o.ContentType) {
		var ret string
		return ret
	}
	return o.ContentType.String()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetContentTypeOk() (*string, bool) {
	if o == nil || isNil(o.ContentType) {
		return nil, false
	}
	s := o.ContentType.String()
	return &s, true
}

// HasContentType returns a boolean if a field has been set.
func (o *QueryJob) HasContentType() bool {
	if o != nil && !isNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *QueryJob) SetContentType(v QueryJobContentType) {
	o.ContentType = &v
}

// GetColumnDelimiter returns the ColumnDelimiter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryJob) GetColumnDelimiter() string {
	if o == nil || isNil(o.ColumnDelimiter.Get()) {
		var ret string
		return ret
	}
	return *o.ColumnDelimiter.Get()
}

// GetColumnDelimiterOk returns a tuple with the ColumnDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryJob) GetColumnDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColumnDelimiter.Get(), o.ColumnDelimiter.IsSet()
}

// HasColumnDelimiter returns a boolean if a field has been set.
func (o *QueryJob) HasColumnDelimiter() bool {
	if o != nil && o.ColumnDelimiter.IsSet() {
		return true
	}

	return false
}

// SetColumnDelimiter gets a reference to the given NullableString and assigns it to the ColumnDelimiter field.
func (o *QueryJob) SetColumnDelimiter(v QueryJobColumnDelimiter) {
	o.ColumnDelimiter.Set(&v)
}

// SetColumnDelimiterNil sets the value for ColumnDelimiter to be an explicit nil
func (o *QueryJob) SetColumnDelimiterNil() {
	o.ColumnDelimiter.Set(nil)
}

// UnsetColumnDelimiter ensures that no value is present for ColumnDelimiter, not even an explicit nil
func (o *QueryJob) UnsetColumnDelimiter() {
	o.ColumnDelimiter.Unset()
}

// GetLineEnding returns the LineEnding field value if set, zero value otherwise.
func (o *QueryJob) GetLineEnding() string {
	if o == nil || isNil(o.LineEnding) {
		var ret string
		return ret
	}
	return o.LineEnding.String()
}

// GetLineEndingOk returns a tuple with the LineEnding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetLineEndingOk() (*string, bool) {
	if o == nil || isNil(o.LineEnding) {
		return nil, false
	}
	s := o.LineEnding.String()
	return &s, true
}

// HasLineEnding returns a boolean if a field has been set.
func (o *QueryJob) HasLineEnding() bool {
	if o != nil && !isNil(o.LineEnding) {
		return true
	}

	return false
}

// SetLineEnding gets a reference to the given string and assigns it to the LineEnding field.
func (o *QueryJob) SetLineEnding(v QueryJobLineEnding) {
	o.LineEnding = &v
}

func (o QueryJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !isNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if o.ColumnDelimiter.IsSet() {
		toSerialize["columnDelimiter"] = o.ColumnDelimiter.Get()
	}
	if !isNil(o.LineEnding) {
		toSerialize["lineEnding"] = o.LineEnding
	}
	return json.Marshal(toSerialize)
}

type NullableQueryJob struct {
	value *QueryJob
	isSet bool
}

func (v NullableQueryJob) Get() *QueryJob {
	return v.value
}

func (v *NullableQueryJob) Set(val *QueryJob) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryJob) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryJob(val *QueryJob) *NullableQueryJob {
	return &NullableQueryJob{value: val, isSet: true}
}

func (v NullableQueryJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
