/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
)

// QueryJob struct for QueryJob
type QueryJob struct {
	Operation       *QueryOperation  `json:"operation,omitempty"`
	ContentType     *ContentType     `json:"contentType,omitempty"`
	ColumnDelimiter *ColumnDelimiter `json:"columnDelimiter,omitempty"`
	LineEnding      *LineEnding      `json:"lineEnding,omitempty"`
}

// NewQueryJob instantiates a new QueryJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryJob() *QueryJob {
	this := QueryJob{}
	return &this
}

// NewQueryJobWithDefaults instantiates a new QueryJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryJobWithDefaults() *QueryJob {
	this := QueryJob{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *QueryJob) GetOperation() QueryOperation {
	if o == nil || isNil(o.Operation) {
		var ret QueryOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetOperationOk() (*QueryOperation, bool) {
	if o == nil || isNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *QueryJob) HasOperation() bool {
	if o != nil && !isNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given QueryOperation and assigns it to the Operation field.
func (o *QueryJob) SetOperation(v QueryOperation) {
	o.Operation = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *QueryJob) GetContentType() ContentType {
	if o == nil || isNil(o.ContentType) {
		var ret ContentType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetContentTypeOk() (*ContentType, bool) {
	if o == nil || isNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *QueryJob) HasContentType() bool {
	if o != nil && !isNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given ContentType and assigns it to the ContentType field.
func (o *QueryJob) SetContentType(v ContentType) {
	o.ContentType = &v
}

// GetColumnDelimiter returns the ColumnDelimiter field value if set, zero value otherwise.
func (o *QueryJob) GetColumnDelimiter() ColumnDelimiter {
	if o == nil || isNil(o.ColumnDelimiter) {
		var ret ColumnDelimiter
		return ret
	}
	return *o.ColumnDelimiter
}

// GetColumnDelimiterOk returns a tuple with the ColumnDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetColumnDelimiterOk() (*ColumnDelimiter, bool) {
	if o == nil || isNil(o.ColumnDelimiter) {
		return nil, false
	}
	return o.ColumnDelimiter, true
}

// HasColumnDelimiter returns a boolean if a field has been set.
func (o *QueryJob) HasColumnDelimiter() bool {
	if o != nil && !isNil(o.ColumnDelimiter) {
		return true
	}

	return false
}

// SetColumnDelimiter gets a reference to the given ColumnDelimiter and assigns it to the ColumnDelimiter field.
func (o *QueryJob) SetColumnDelimiter(v ColumnDelimiter) {
	o.ColumnDelimiter = &v
}

// GetLineEnding returns the LineEnding field value if set, zero value otherwise.
func (o *QueryJob) GetLineEnding() LineEnding {
	if o == nil || isNil(o.LineEnding) {
		var ret LineEnding
		return ret
	}
	return *o.LineEnding
}

// GetLineEndingOk returns a tuple with the LineEnding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJob) GetLineEndingOk() (*LineEnding, bool) {
	if o == nil || isNil(o.LineEnding) {
		return nil, false
	}
	return o.LineEnding, true
}

// HasLineEnding returns a boolean if a field has been set.
func (o *QueryJob) HasLineEnding() bool {
	if o != nil && !isNil(o.LineEnding) {
		return true
	}

	return false
}

// SetLineEnding gets a reference to the given LineEnding and assigns it to the LineEnding field.
func (o *QueryJob) SetLineEnding(v LineEnding) {
	o.LineEnding = &v
}

func (o QueryJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !isNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !isNil(o.ColumnDelimiter) {
		toSerialize["columnDelimiter"] = o.ColumnDelimiter
	}
	if !isNil(o.LineEnding) {
		toSerialize["lineEnding"] = o.LineEnding
	}
	return json.Marshal(toSerialize)
}

type NullableQueryJob struct {
	value *QueryJob
	isSet bool
}

func (v NullableQueryJob) Get() *QueryJob {
	return v.value
}

func (v *NullableQueryJob) Set(val *QueryJob) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryJob) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryJob(val *QueryJob) *NullableQueryJob {
	return &NullableQueryJob{value: val, isSet: true}
}

func (v NullableQueryJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
