/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// JobOperation The processing operation for the job.
type JobOperation string

// List of JobOperation
const (
	JOBOPERATION_INSERT      JobOperation = "insert"
	JOBOPERATION_DELETE      JobOperation = "delete"
	JOBOPERATION_HARD_DELETE JobOperation = "hardDelete"
	JOBOPERATION_UPDATE      JobOperation = "update"
	JOBOPERATION_UPSERT      JobOperation = "upsert"
)

// All allowed values of JobOperation enum
var AllowedJobOperationEnumValues = []JobOperation{
	"insert",
	"delete",
	"hardDelete",
	"update",
	"upsert",
}

func (v *JobOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobOperation(value)
	for _, existing := range AllowedJobOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobOperation", value)
}

// NewJobOperationFromValue returns a pointer to a valid JobOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobOperationFromValue(v string) (*JobOperation, error) {
	ev := JobOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobOperation: valid values are %v", v, AllowedJobOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobOperation) IsValid() bool {
	for _, existing := range AllowedJobOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobOperation value
func (v JobOperation) Ptr() *JobOperation {
	return &v
}

type NullableJobOperation struct {
	value *JobOperation
	isSet bool
}

func (v NullableJobOperation) Get() *JobOperation {
	return v.value
}

func (v *NullableJobOperation) Set(val *JobOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableJobOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableJobOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobOperation(val *JobOperation) *NullableJobOperation {
	return &NullableJobOperation{value: val, isSet: true}
}

func (v NullableJobOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
