/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// QueryAbortState the model 'QueryAbortState'
type QueryAbortState string

// List of QueryAbortState
const (
	QUERYABORTSTATE_ABORTED QueryAbortState = "Aborted"
)

// All allowed values of QueryAbortState enum
var AllowedQueryAbortStateEnumValues = []QueryAbortState{
	"Aborted",
}

func (v *QueryAbortState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryAbortState(value)
	for _, existing := range AllowedQueryAbortStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryAbortState", value)
}

// NewQueryAbortStateFromValue returns a pointer to a valid QueryAbortState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryAbortStateFromValue(v string) (*QueryAbortState, error) {
	ev := QueryAbortState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryAbortState: valid values are %v", v, AllowedQueryAbortStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryAbortState) IsValid() bool {
	for _, existing := range AllowedQueryAbortStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryAbortState value
func (v QueryAbortState) Ptr() *QueryAbortState {
	return &v
}

type NullableQueryAbortState struct {
	value *QueryAbortState
	isSet bool
}

func (v NullableQueryAbortState) Get() *QueryAbortState {
	return v.value
}

func (v *NullableQueryAbortState) Set(val *QueryAbortState) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryAbortState) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryAbortState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryAbortState(val *QueryAbortState) *NullableQueryAbortState {
	return &NullableQueryAbortState{value: val, isSet: true}
}

func (v NullableQueryAbortState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryAbortState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
