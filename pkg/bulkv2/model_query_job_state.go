/*
Salesforce Platform Bulk V2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bulkv2

import (
	"encoding/json"
	"fmt"
)

// QueryJobState The current state of processing for the job.
type QueryJobState string

// List of QueryJobState
const (
	QUERYJOBSTATE_UPLOAD_COMPLETE QueryJobState = "UploadComplete"
	QUERYJOBSTATE_IN_PROGRESS     QueryJobState = "InProgress"
	QUERYJOBSTATE_ABORTED         QueryJobState = "Aborted"
	QUERYJOBSTATE_JOB_COMPLETE    QueryJobState = "JobComplete"
	QUERYJOBSTATE_FAILED          QueryJobState = "Failed"
)

// All allowed values of QueryJobState enum
var AllowedQueryJobStateEnumValues = []QueryJobState{
	"UploadComplete",
	"InProgress",
	"Aborted",
	"JobComplete",
	"Failed",
}

func (v *QueryJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryJobState(value)
	for _, existing := range AllowedQueryJobStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryJobState", value)
}

// NewQueryJobStateFromValue returns a pointer to a valid QueryJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryJobStateFromValue(v string) (*QueryJobState, error) {
	ev := QueryJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryJobState: valid values are %v", v, AllowedQueryJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryJobState) IsValid() bool {
	for _, existing := range AllowedQueryJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryJobState value
func (v QueryJobState) Ptr() *QueryJobState {
	return &v
}

type NullableQueryJobState struct {
	value *QueryJobState
	isSet bool
}

func (v NullableQueryJobState) Get() *QueryJobState {
	return v.value
}

func (v *NullableQueryJobState) Set(val *QueryJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryJobState(val *QueryJobState) *NullableQueryJobState {
	return &NullableQueryJobState{value: val, isSet: true}
}

func (v NullableQueryJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
