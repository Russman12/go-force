/*
Salesforce Platform Bulk V2 API

Testing JobApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bulkv2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"

	"github.com/russman12/go-force/mocks"
	openapiclient "github.com/russman12/go-force/pkg/bulkv2"
)

func Test_bulkv2_JobApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration, mocks.NewTokenSource(t))

	t.Run("Test JobApiService CloseOrAbortJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.CloseOrAbortJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService CreateJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.JobApi.CreateJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService DeleteJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.JobApi.DeleteJob(context.Background(), jobId).Execute()

		require.Nil(t, err)

		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService GetJobFailedResults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.GetJobFailedResults(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService GetJobInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.GetJobInfo(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService GetJobSuccessfulResults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.GetJobSuccessfulResults(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService GetJobUnprocessedRecords", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.GetJobUnprocessedRecords(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService GetJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.JobApi.GetJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService UploadJobData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.JobApi.UploadJobData(context.Background(), jobId).Execute()

		require.Nil(t, err)

		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
