/*
Salesforce Platform Bulk V2 APIs

Testing JobApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bulkv2

import (
	"context"
	openapiclient "github.com/russman12/go-force/pkg/bulkv2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_bulkv2_JobApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test JobApiService CloseOrAbortJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.CloseOrAbortJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService CreateJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.JobApi.CreateJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService DeleteJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.JobApi.DeleteJob(context.Background(), jobId).Execute()

		require.Nil(t, err)

		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService GetJobInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.GetJobInfo(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService JobFailedResults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.JobFailedResults(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService JobSuccessfulResults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.JobSuccessfulResults(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService JobUnprocessedRecords", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.JobApi.JobUnprocessedRecords(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService Jobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.JobApi.Jobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobApiService UploadJobData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.JobApi.UploadJobData(context.Background(), jobId).Execute()

		require.Nil(t, err)

		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
