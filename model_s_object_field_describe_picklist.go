/*
Salesforce Platform APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"

)

// SObjectFieldDescribePicklist struct for SObjectFieldDescribePicklist
type SObjectFieldDescribePicklist struct {
	Active *bool `json:"active,omitempty"`
	DefaultValue *bool `json:"defaultValue,omitempty"`
	Label *string `json:"label,omitempty"`
	ValidFor NullableString `json:"validFor,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewSObjectFieldDescribePicklist instantiates a new SObjectFieldDescribePicklist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSObjectFieldDescribePicklist() *SObjectFieldDescribePicklist {
	this := SObjectFieldDescribePicklist{}
	return &this
}

// NewSObjectFieldDescribePicklistWithDefaults instantiates a new SObjectFieldDescribePicklist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSObjectFieldDescribePicklistWithDefaults() *SObjectFieldDescribePicklist {
	this := SObjectFieldDescribePicklist{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SObjectFieldDescribePicklist) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectFieldDescribePicklist) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
    return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SObjectFieldDescribePicklist) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SObjectFieldDescribePicklist) SetActive(v bool) {
	o.Active = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *SObjectFieldDescribePicklist) GetDefaultValue() bool {
	if o == nil || isNil(o.DefaultValue) {
		var ret bool
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectFieldDescribePicklist) GetDefaultValueOk() (*bool, bool) {
	if o == nil || isNil(o.DefaultValue) {
    return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SObjectFieldDescribePicklist) HasDefaultValue() bool {
	if o != nil && !isNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given bool and assigns it to the DefaultValue field.
func (o *SObjectFieldDescribePicklist) SetDefaultValue(v bool) {
	o.DefaultValue = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SObjectFieldDescribePicklist) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectFieldDescribePicklist) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SObjectFieldDescribePicklist) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SObjectFieldDescribePicklist) SetLabel(v string) {
	o.Label = &v
}

// GetValidFor returns the ValidFor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SObjectFieldDescribePicklist) GetValidFor() string {
	if o == nil || isNil(o.ValidFor.Get()) {
		var ret string
		return ret
	}
	return *o.ValidFor.Get()
}

// GetValidForOk returns a tuple with the ValidFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SObjectFieldDescribePicklist) GetValidForOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ValidFor.Get(), o.ValidFor.IsSet()
}

// HasValidFor returns a boolean if a field has been set.
func (o *SObjectFieldDescribePicklist) HasValidFor() bool {
	if o != nil && o.ValidFor.IsSet() {
		return true
	}

	return false
}

// SetValidFor gets a reference to the given NullableString and assigns it to the ValidFor field.
func (o *SObjectFieldDescribePicklist) SetValidFor(v string) {
	o.ValidFor.Set(&v)
}
// SetValidForNil sets the value for ValidFor to be an explicit nil
func (o *SObjectFieldDescribePicklist) SetValidForNil() {
	o.ValidFor.Set(nil)
}

// UnsetValidFor ensures that no value is present for ValidFor, not even an explicit nil
func (o *SObjectFieldDescribePicklist) UnsetValidFor() {
	o.ValidFor.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SObjectFieldDescribePicklist) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectFieldDescribePicklist) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SObjectFieldDescribePicklist) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SObjectFieldDescribePicklist) SetValue(v string) {
	o.Value = &v
}

func (o SObjectFieldDescribePicklist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if o.ValidFor.IsSet() {
		toSerialize["validFor"] = o.ValidFor.Get()
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSObjectFieldDescribePicklist struct {
	value *SObjectFieldDescribePicklist
	isSet bool
}

func (v NullableSObjectFieldDescribePicklist) Get() *SObjectFieldDescribePicklist {
	return v.value
}

func (v *NullableSObjectFieldDescribePicklist) Set(val *SObjectFieldDescribePicklist) {
	v.value = val
	v.isSet = true
}

func (v NullableSObjectFieldDescribePicklist) IsSet() bool {
	return v.isSet
}

func (v *NullableSObjectFieldDescribePicklist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSObjectFieldDescribePicklist(val *SObjectFieldDescribePicklist) *NullableSObjectFieldDescribePicklist {
	return &NullableSObjectFieldDescribePicklist{value: val, isSet: true}
}

func (v NullableSObjectFieldDescribePicklist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSObjectFieldDescribePicklist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


