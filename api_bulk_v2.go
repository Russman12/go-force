/*
Salesforce Platform APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goforce

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
    "io"
    "strings"
)


// BulkV2ApiService BulkV2Api service
type BulkV2ApiService service

type ApiBulkCloseOrAbortJobRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
	bulkCloseOrAbortJobRequest *BulkCloseOrAbortJobRequest
}

func (r ApiBulkCloseOrAbortJobRequest) BulkCloseOrAbortJobRequest(bulkCloseOrAbortJobRequest BulkCloseOrAbortJobRequest) ApiBulkCloseOrAbortJobRequest {
	r.bulkCloseOrAbortJobRequest = &bulkCloseOrAbortJobRequest
	return r
}

func (r ApiBulkCloseOrAbortJobRequest) Execute() (*BulkJobInfo, *http.Response, error) {
	return r.ApiService.BulkCloseOrAbortJobExecute(r)
}

/*
BulkCloseOrAbortJob Close or Abort a Job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiBulkCloseOrAbortJobRequest
*/
func (a *BulkV2ApiService) BulkCloseOrAbortJob(ctx context.Context, jobId string) ApiBulkCloseOrAbortJobRequest {
	return ApiBulkCloseOrAbortJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return BulkJobInfo
func (a *BulkV2ApiService) BulkCloseOrAbortJobExecute(r ApiBulkCloseOrAbortJobRequest) (*BulkJobInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkJobInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.BulkCloseOrAbortJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkCloseOrAbortJobRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkDeleteJobRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
}

func (r ApiBulkDeleteJobRequest) Execute() (*http.Response, error) {
	return r.ApiService.BulkDeleteJobExecute(r)
}

/*
BulkDeleteJob Delete Job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiBulkDeleteJobRequest
*/
func (a *BulkV2ApiService) BulkDeleteJob(ctx context.Context, jobId string) ApiBulkDeleteJobRequest {
	return ApiBulkDeleteJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
func (a *BulkV2ApiService) BulkDeleteJobExecute(r ApiBulkDeleteJobRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.BulkDeleteJob")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}


    return localVarHTTPResponse, nil
}

type ApiBulkJobFailedResultsRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
}

func (r ApiBulkJobFailedResultsRequest) Execute() (*io.ReadCloser, *http.Response, error) {
	return r.ApiService.BulkJobFailedResultsExecute(r)
}

/*
BulkJobFailedResults Get Job Failed Record Results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiBulkJobFailedResultsRequest
*/
func (a *BulkV2ApiService) BulkJobFailedResults(ctx context.Context, jobId string) ApiBulkJobFailedResultsRequest {
	return ApiBulkJobFailedResultsRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return io.ReadCloser
func (a *BulkV2ApiService) BulkJobFailedResultsExecute(r ApiBulkJobFailedResultsRequest) (*io.ReadCloser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *io.ReadCloser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.BulkJobFailedResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}/failedResults"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return &localVarHTTPResponse.Body, localVarHTTPResponse, nil
}

type ApiBulkJobSuccessfulResultsRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
}

func (r ApiBulkJobSuccessfulResultsRequest) Execute() (*io.ReadCloser, *http.Response, error) {
	return r.ApiService.BulkJobSuccessfulResultsExecute(r)
}

/*
BulkJobSuccessfulResults Get Job Successful Record Results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiBulkJobSuccessfulResultsRequest
*/
func (a *BulkV2ApiService) BulkJobSuccessfulResults(ctx context.Context, jobId string) ApiBulkJobSuccessfulResultsRequest {
	return ApiBulkJobSuccessfulResultsRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return io.ReadCloser
func (a *BulkV2ApiService) BulkJobSuccessfulResultsExecute(r ApiBulkJobSuccessfulResultsRequest) (*io.ReadCloser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *io.ReadCloser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.BulkJobSuccessfulResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}/successfulResults"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return &localVarHTTPResponse.Body, localVarHTTPResponse, nil
}

type ApiBulkJobUnprocessedRecordsRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
}

func (r ApiBulkJobUnprocessedRecordsRequest) Execute() (*io.ReadCloser, *http.Response, error) {
	return r.ApiService.BulkJobUnprocessedRecordsExecute(r)
}

/*
BulkJobUnprocessedRecords Get Job Unprocessed Record Results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiBulkJobUnprocessedRecordsRequest
*/
func (a *BulkV2ApiService) BulkJobUnprocessedRecords(ctx context.Context, jobId string) ApiBulkJobUnprocessedRecordsRequest {
	return ApiBulkJobUnprocessedRecordsRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return io.ReadCloser
func (a *BulkV2ApiService) BulkJobUnprocessedRecordsExecute(r ApiBulkJobUnprocessedRecordsRequest) (*io.ReadCloser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *io.ReadCloser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.BulkJobUnprocessedRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}/unprocessedrecords"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return &localVarHTTPResponse.Body, localVarHTTPResponse, nil
}

type ApiBulkJobsRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	isPkChunkingEnabled *bool
	jobType *string
	queryLocator *string
}

func (r ApiBulkJobsRequest) IsPkChunkingEnabled(isPkChunkingEnabled bool) ApiBulkJobsRequest {
	r.isPkChunkingEnabled = &isPkChunkingEnabled
	return r
}

func (r ApiBulkJobsRequest) JobType(jobType string) ApiBulkJobsRequest {
	r.jobType = &jobType
	return r
}

func (r ApiBulkJobsRequest) QueryLocator(queryLocator string) ApiBulkJobsRequest {
	r.queryLocator = &queryLocator
	return r
}

func (r ApiBulkJobsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BulkJobsExecute(r)
}

/*
BulkJobs Get All Jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkJobsRequest
*/
func (a *BulkV2ApiService) BulkJobs(ctx context.Context) ApiBulkJobsRequest {
	return ApiBulkJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *BulkV2ApiService) BulkJobsExecute(r ApiBulkJobsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.BulkJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isPkChunkingEnabled != nil {
		localVarQueryParams.Add("isPkChunkingEnabled", parameterToString(*r.isPkChunkingEnabled, ""))
	}
	if r.jobType != nil {
		localVarQueryParams.Add("jobType", parameterToString(*r.jobType, ""))
	}
	if r.queryLocator != nil {
		localVarQueryParams.Add("queryLocator", parameterToString(*r.queryLocator, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateJobRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	bulkJob *BulkJob
}

func (r ApiCreateJobRequest) BulkJob(bulkJob BulkJob) ApiCreateJobRequest {
	r.bulkJob = &bulkJob
	return r
}

func (r ApiCreateJobRequest) Execute() (*BulkJobInfo, *http.Response, error) {
	return r.ApiService.CreateJobExecute(r)
}

/*
CreateJob Create job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateJobRequest
*/
func (a *BulkV2ApiService) CreateJob(ctx context.Context) ApiCreateJobRequest {
	return ApiCreateJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkJobInfo
func (a *BulkV2ApiService) CreateJobExecute(r ApiCreateJobRequest) (*BulkJobInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkJobInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.CreateJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkJob
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetJobInfoRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
}

func (r ApiGetJobInfoRequest) Execute() (*BulkJobInfo, *http.Response, error) {
	return r.ApiService.GetJobInfoExecute(r)
}

/*
GetJobInfo Get Job Info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiGetJobInfoRequest
*/
func (a *BulkV2ApiService) GetJobInfo(ctx context.Context, jobId string) ApiGetJobInfoRequest {
	return ApiGetJobInfoRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return BulkJobInfo
func (a *BulkV2ApiService) GetJobInfoExecute(r ApiGetJobInfoRequest) (*BulkJobInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkJobInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.GetJobInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarReturnValue, localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadJobDataRequest struct {
	ctx context.Context
	ApiService *BulkV2ApiService
	jobId string
	body *io.ReadCloser
}

func (r ApiUploadJobDataRequest) Body(body io.ReadCloser) ApiUploadJobDataRequest {
	r.body = &body
	return r
}

func (r ApiUploadJobDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadJobDataExecute(r)
}

/*
UploadJobData Upload Job Data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiUploadJobDataRequest
*/
func (a *BulkV2ApiService) UploadJobData(ctx context.Context, jobId string) ApiUploadJobDataRequest {
	return ApiUploadJobDataRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
func (a *BulkV2ApiService) UploadJobDataExecute(r ApiUploadJobDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkV2ApiService.UploadJobData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/ingest/{jobId}/batches"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
        localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
        localVarHTTPResponse.Body.Close()
        localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
        if err != nil {
            return localVarHTTPResponse, err
        }
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}


    return localVarHTTPResponse, nil
}
