/*
Salesforce Platform APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goforce

import (
	"encoding/json"
)

// BulkJobs struct for BulkJobs
type BulkJobs struct {
	// Indicates whether there are more jobs to get. If false, use the nextRecordsUrl value to retrieve the next group of jobs.
	Done bool `json:"done"`
	// Contains information for each retrieved job.
	Records []BulkJobInfo `json:"records"`
	// A URL that contains a query locator used to get the next set of results in a subsequent request if done isnâ€™t true.
	NextRecordsUrl *string `json:"nextRecordsUrl,omitempty"`
}

// NewBulkJobs instantiates a new BulkJobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkJobs(done bool, records []BulkJobInfo) *BulkJobs {
	this := BulkJobs{}
	this.Done = done
	this.Records = records
	return &this
}

// NewBulkJobsWithDefaults instantiates a new BulkJobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkJobsWithDefaults() *BulkJobs {
	this := BulkJobs{}
	return &this
}

// GetDone returns the Done field value
func (o *BulkJobs) GetDone() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Done
}

// GetDoneOk returns a tuple with the Done field value
// and a boolean to check if the value has been set.
func (o *BulkJobs) GetDoneOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Done, true
}

// SetDone sets field value
func (o *BulkJobs) SetDone(v bool) {
	o.Done = v
}

// GetRecords returns the Records field value
func (o *BulkJobs) GetRecords() []BulkJobInfo {
	if o == nil {
		var ret []BulkJobInfo
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *BulkJobs) GetRecordsOk() ([]BulkJobInfo, bool) {
	if o == nil {
    return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *BulkJobs) SetRecords(v []BulkJobInfo) {
	o.Records = v
}

// GetNextRecordsUrl returns the NextRecordsUrl field value if set, zero value otherwise.
func (o *BulkJobs) GetNextRecordsUrl() string {
	if o == nil || isNil(o.NextRecordsUrl) {
		var ret string
		return ret
	}
	return *o.NextRecordsUrl
}

// GetNextRecordsUrlOk returns a tuple with the NextRecordsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkJobs) GetNextRecordsUrlOk() (*string, bool) {
	if o == nil || isNil(o.NextRecordsUrl) {
    return nil, false
	}
	return o.NextRecordsUrl, true
}

// HasNextRecordsUrl returns a boolean if a field has been set.
func (o *BulkJobs) HasNextRecordsUrl() bool {
	if o != nil && !isNil(o.NextRecordsUrl) {
		return true
	}

	return false
}

// SetNextRecordsUrl gets a reference to the given string and assigns it to the NextRecordsUrl field.
func (o *BulkJobs) SetNextRecordsUrl(v string) {
	o.NextRecordsUrl = &v
}

func (o BulkJobs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["done"] = o.Done
	}
	if true {
		toSerialize["records"] = o.Records
	}
	if !isNil(o.NextRecordsUrl) {
		toSerialize["nextRecordsUrl"] = o.NextRecordsUrl
	}
	return json.Marshal(toSerialize)
}

type NullableBulkJobs struct {
	value *BulkJobs
	isSet bool
}

func (v NullableBulkJobs) Get() *BulkJobs {
	return v.value
}

func (v *NullableBulkJobs) Set(val *BulkJobs) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkJobs) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkJobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkJobs(val *BulkJobs) *NullableBulkJobs {
	return &NullableBulkJobs{value: val, isSet: true}
}

func (v NullableBulkJobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkJobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


