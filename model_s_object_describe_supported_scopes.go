/*
Salesforce Platform APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 56.0
Contact: russell-laboe@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goforce

import (
	"encoding/json"
)

// SObjectDescribeSupportedScopes struct for SObjectDescribeSupportedScopes
type SObjectDescribeSupportedScopes struct {
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewSObjectDescribeSupportedScopes instantiates a new SObjectDescribeSupportedScopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSObjectDescribeSupportedScopes() *SObjectDescribeSupportedScopes {
	this := SObjectDescribeSupportedScopes{}
	return &this
}

// NewSObjectDescribeSupportedScopesWithDefaults instantiates a new SObjectDescribeSupportedScopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSObjectDescribeSupportedScopesWithDefaults() *SObjectDescribeSupportedScopes {
	this := SObjectDescribeSupportedScopes{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SObjectDescribeSupportedScopes) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribeSupportedScopes) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SObjectDescribeSupportedScopes) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SObjectDescribeSupportedScopes) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SObjectDescribeSupportedScopes) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SObjectDescribeSupportedScopes) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SObjectDescribeSupportedScopes) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SObjectDescribeSupportedScopes) SetName(v string) {
	o.Name = &v
}

func (o SObjectDescribeSupportedScopes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableSObjectDescribeSupportedScopes struct {
	value *SObjectDescribeSupportedScopes
	isSet bool
}

func (v NullableSObjectDescribeSupportedScopes) Get() *SObjectDescribeSupportedScopes {
	return v.value
}

func (v *NullableSObjectDescribeSupportedScopes) Set(val *SObjectDescribeSupportedScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableSObjectDescribeSupportedScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableSObjectDescribeSupportedScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSObjectDescribeSupportedScopes(val *SObjectDescribeSupportedScopes) *NullableSObjectDescribeSupportedScopes {
	return &NullableSObjectDescribeSupportedScopes{value: val, isSet: true}
}

func (v NullableSObjectDescribeSupportedScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSObjectDescribeSupportedScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


